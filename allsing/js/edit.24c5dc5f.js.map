{"version":3,"file":"js/edit.24c5dc5f.js","mappings":"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","sources":["webpack://allsing/./src/views/EditView.vue","webpack://allsing/./src/views/EditView.vue?eb6a"],"sourcesContent":["<template>\n  <div class=\"container edit\">\n    <van-nav-bar title=\"编辑\" \n       left-text=\"主页\" \n       @click-left=\"onBack()\" \n    />\n    <div class=\"content\">\n      <div class=\"c-e-name c-e-name-crop\">{{ musicName }}</div>\n      <div class=\"c-e-ctrlbox\" >\n        <div class=\"c-e-ctrlitem\" >\n          <van-icon\n            v-show=\"playing\"\n            name=\"pause-circle-o\"\n            class=\"c-e-ctrlicon\"\n            @click=\"onPause\"\n          />\n          <van-icon\n            name=\"play-circle\"\n            class=\"c-e-ctrlicon\"\n            v-show=\"!playing\"\n            @click=\"onPlay\"\n          />\n        </div>\n        <div class=\"c-e-sliderbox-time\">\n          {{ util.convertTime(curTime) }}\n        </div>\n        <div class=\"c-e-sliderbox\">\n          <van-slider v-model=\"curTime\" min=\"0\" :max=\"store.recordLength\" @change=\"onDurationChange\" \n            @drag-start=\"dragging = true\" @drag-end=\"dragging = false\"  />\n        </div>\n        <div class=\"c-e-sliderbox-time\">{{ util.convertTime(store.recordLength) }}</div>\n      </div>\n      <div class=\"c-co-lrcbox\">\n        {{ curLrc }}\n      </div>       \n      <div class=\"c-e-editbox\">\n        <div class=\"c-e-title\">\n          <span>人声音量</span><span>{{ humanVal }}</span>\n        </div>\n        <div class=\"c-e-voicebox\">\n          <van-slider min=\"0\" max=\"100\" v-model=\"humanVal\" @change=\"onHumanVoiceChange\" />\n        </div>\n        <div class=\"c-e-title\">\n          <span>伴奏音量</span><span>{{ accompanyVal }}</span>\n        </div>\n        <div class=\"c-e-voicebox\">\n          <van-slider min=\"0\" max=\"100\" v-model=\"accompanyVal\" @change=\"onAccompanyVoiceChange\" />\n        </div>\n        <div class=\"c-e-title\">\n          <span>人声迟延</span><span>{{ store.voiceDelay }}</span>\n        </div>\n        <div class=\"c-e-voicebox\">\n          <van-slider min=\"-1\" max=\"1\" step=\"0.1\" v-model=\"store.voiceDelay\" @change=\"onDelayChange\" />\n        </div>\n        <!-- <div class=\"c-e-effectbox\" v-show=\"reverb != null\">\n          <div class=\"c-e-effectbox-title\">reverb</div>\n          <van-switch v-model=\"reverOpen\" @change=\"onEffectChange\" />\n        </div> -->\n\n        <!-- 一开始reverb混响是预制了好几个效果,现在改成有一个混响,然后可以调节混响的参数 -->\n        <div class=\"c-e-title\">\n          <span>混响</span>\n          <div class=\"c-reverb-gp\">\n            <!-- 混响自定义按钮 -->\n            <van-button v-show=\"store.reverb\" plain type=\"primary\" size=\"small\" class=\"c-e-cusbtn\" @click=\"onReverbSetting\">设置</van-button>\n            <van-switch  v-model=\"store.reverb\" @change=\"onReverbChange\" />\n          </div>\n        </div>\n        \n        <!-- <div class=\"c-e-voicebox\">\n          <div class=\"c-co-reverbbox\"> \n            <van-radio-group v-model=\"store.reverb\" direction=\"horizontal\" @change=\"onReverbChange\">\n              <van-radio class=\"c-co-reverbitem\" :name=\"0\">none</van-radio>\n              <van-radio class=\"c-co-reverbitem\" :name=\"1\">reverb1</van-radio>\n              <van-radio class=\"c-co-reverbitem\" :name=\"2\">reverb2</van-radio>\n              <van-radio class=\"c-co-reverbitem\" :name=\"3\">reverb3</van-radio>\n            </van-radio-group>\n         </div>\n        </div>   -->\n        <div class=\"c-e-title\">\n          <span>压缩音频</span>\n          <van-switch v-model=\"store.compress\" />\n        </div>      \n      </div>\n      <div class=\"c-e-btnbox\">\n        <van-button plain class=\"c-e-btn\" @click=\"reRecord()\">重录</van-button>\n        <van-button plain class=\"c-e-btn\" type=\"danger\" @click=\"exportHuman\">导出人声</van-button>\n        <van-button class=\"c-e-btn\" type=\"primary\" @click=\"exportSong\">导出歌曲</van-button>\n      </div>\n    </div>\n  </div>\n  <ReverbDialog ref=\"rbDlg\"  @change=\"onReverbDetailChange\"/>\n</template>\n<script>\n// @ is an alias to /src\n// todo audio api 播放声音 获取进度 总时长等 看看用audio api 还是audio标签\nimport { ref } from \"vue\";\nimport useStore from \"../store\";\nimport util from \"../common/js/util.js\";\nimport { renderProgress }from \"../common/js/progress.js\";\nimport downloadAudio from \"../common/js/downloadAudio.js\";\nimport {stopDownload} from \"../common/js/downloadAudio.js\";\nimport { showConfirmDialog } from \"vant\";\nimport { showToast } from \"vant\";\nimport ReverbDialog from \"../components/ReverbDialog\";\nimport createPizzicato from \"../common/js/Pizzicato.js\";\nlet Pizzicato;\nexport default {\n  name: \"EditView\",\n  components: {ReverbDialog},\n  setup() {\n    Pizzicato = createPizzicato(new (window.AudioContext || window.webkitAudioContext)());\n    // 取store对象\n    const store = useStore();\n    const rbDlg = ref(null);\n    // console.log(store.banzou);\n    // console.log(store.audioChunk);\n    return {store, util, rbDlg};\n  },\n  data() {\n    return {\n      musicName: \"\",\n      curLrc: \"\",\n      // 当前播放时间\n      curTime: 0,\n      // audioContext在创建完了就会开始计时所以,第一次播放的时候,要记录一下已经播放了多久了\n      remainTime: 0,\n      playing: false,\n      //人声\n      humanVal: 90,\n      // 伴奏声\n      accompanyVal: 70,\n      //混响\n      //reverb: null,\n      // 混响映射 异步加载\n      reverbMap: {},\n      curReverbConvolver: null,\n      // 开启混响\n      // reverOpen: false,\n      // 延时\n      // delayVal: 0,\n      audioContext: null,\n      offlineAudioCtx: null,\n      // 拖拽歌曲进度条\n      dragging: false,\n      // 音量\n      bgGain: null,\n      voiceGain: null,\n      // 源\n      bgSource: null,\n      voiceSource: null,\n      // requestAnimationFrame的id\n      rTimer: null,\n      // 混响调节窗口\n      // rbSettingShow: false,\n      // 延时播放\n      delayPlayTimer: null,\n      // 伴奏\n      bgSource: null,\n      // 人声\n      voiceSource: null\n    };\n  },\n  mounted() {\n    console.log(\"reverb\", this.store.reverb)\n    if(!this.store.audioChunk || !this.store.audioChunk.length || !this.store.banzou) {\n      alert(\"没有找到需要编辑的音频\");\n      this.$router.replace(\"/\");\n      return;\n    }\n    this.audioContext = Pizzicato.context; //|| new (window.AudioContext || window.webkitAudioContext)();\n    // console.log(this.audioContext);\n    // const recordedSegments = [\n    //   { start: 10.12, end: 20.01, blob: recordedBlob1 },\n    //   { start: 15.0, end: 25.0, blob: recordedBlob2 }, // 这个片段将覆盖前面重叠部分\n    // ];\n    // const accompanimentBlob = new Blob([\n    //   /* 伴奏数据 */\n    // ]);\n    //const recordDuration = 60; // 设置伴奏时长为 60 秒\n    if(!this.store.recordLength) {\n      this.store.recordLength = this.store.banzouLength;\n    }\n    this.init([...this.store.audioChunk], this.store.banzou, this.store.recordLength);\n\n    this.musicName = this.store.banzou.name.replace(/\\.mp3$/i, \"\");\n    // if (!store.audioChunk.length) {\n    //   alert(\"没有找到录制的音频\");\n    //   this.$router.replace(\"/record\");\n    //   return;\n    // }\n  },\n  unmounted() {\n    if(this.rTimer) {\n      cancelAnimationFrame(this.rTimer);\n    }\n    if(this.delayPlayTimer) {\n      clearTimeout(this.delayPlayTimer);\n    }\n    try {\n      this.bgSource.disconnect();\n      this.bgSource.buffer = null;\n      this.voiceSource.disconnect();\n      this.voiceSource.buffer = null; \n    }catch(e){}\n   \n    try {\n      this.audioContext.close();\n    }catch(e){\n      console.log(e);\n    }\n    try {\n      if(this.offlineAudioCtx) {\n        if(this.offlineAudioCtx.state == \"running\") {\n          this.offlineAudioCtx.suspend(this.offlineAudioCtx.currentTime);\n        }\n        this.offlineAudioCtx = null;\n      }\n    }catch(e){\n      console.log(e);\n    }\n    console.log(\"hide loading\")\n    this.store.hideLoading();\n    this.store.hideProgess();\n    stopDownload();\n    renderProgress.stop();\n    Pizzicato = null;\n  },\n  methods: {\n    onBack() {\n      this.$router.replace(\"/\");\n    },\n    reRecord(){\n      showConfirmDialog({\n        title: '提示',\n        message:'是否要重录?',\n      }).then(() => {\n        this.$router.replace(\"/record\");\n      })\n      .catch(() => {\n        // on cancel\n      });      \n    },\n    async getReverb(num) {\n      const audioUrl = 'audio/reverb' + num + '.wav';\n      \n      try {\n        const response = await fetch(audioUrl);\n        if (!response.ok) {\n          throw new Error('Network response was not ok ' + response.statusText);\n        }\n        \n        const arrayBuffer = await response.arrayBuffer();\n        \n        // 解码为 AudioBuffer\n        const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n        \n        console.log(audioBuffer); // 检查是否成功加载 AudioBuffer\n        return audioBuffer; // 返回解码后的 AudioBuffer\n      } catch (error) {\n        console.error('There has been a problem with your fetch operation:', error);\n        return null;\n      }\n    },\n    async onReverbChange(b){\n      // if(this.curReverbConvolver){\n      //   this.curReverbConvolver.disconnect();\n      //   this.curReverbConvolver = null;\n      // }\n\n      //Pizzicato.context = this.audioContext;\n\n      if(b) {\n        // let reverbOpt = new Pizzicato.Effects.Reverb({\n        //   ...this.store.reverbOption\n        // });\n        // console.log(999, reverb)\n        //this.curReverbNode = reverbOpt;\n        this.voiceGain.disconnect();\n        this.voiceGain.connect(this.curReverbNode);\n        this.curReverbNode.connect(this.audioContext.destination)\n      }\n      else {\n        this.curReverbNode.disconnect();\n        this.voiceGain.disconnect();\n        this.voiceGain.connect(this.audioContext.destination)\n      }\n    },\n\n    onReverbDetailChange(opt){\n      if(!this.curReverbNode) {\n        return;\n      }\n      this.store.reverbOption = {\n        ...opt\n      };\n      this.curReverbNode.time = this.store.reverbOption.time;\n      this.curReverbNode.decay = this.store.reverbOption.decay;\n      this.curReverbNode.mix = this.store.reverbOption.mix;\n    },\n    onPlay() { \n      this.doPlay()\n    },\n    onPause() {\n      this.doStop()\n    },\n    onDurationChange(n) {\n      this.remainTime = this.audioContext.currentTime - n;\n      this.jumpTo(n);\n    },\n    onAccompanyVoiceChange(n) {\n      if (this.bgGain) {\n        this.bgGain.gain.value = n / 100;\n        this.store.banzouVolume = n / 100;\n      }\n    },\n    onHumanVoiceChange(n) {\n      if (this.voiceGain) {\n        this.voiceGain.gain.value = n / 100;\n      }\n    },\n    exportSong() {\n      this.doStop();\n      this.exportAudio(false, this.store.compress);\n    },\n    exportHuman() {\n      this.doStop();\n      this.exportAudio(true, this.store.compress);      \n    },\n    onDelayChange() {\n      console.log(this.store.voiceDelay)\n      this.jumpTo(this.curTime);\n    },\n\n    onReverbSetting(){\n      // this.rbSettingShow = true;\n      this.rbDlg.show({...this.store.reverbOption});\n    },\n\n    async init(recordedSegments, accompanimentBlob, recordDuration) {\n      this.store.showLoading();\n      //this.reverb = await this.getReverb();\n      // 1. 加载伴奏音频\n      const accompanimentBuffer = await this.loadAudioData(this.audioContext,accompanimentBlob);\n\n      // 2. 创建合成音频缓冲区，长度为设定的伴奏总时长\n      const sampleRate = this.audioContext.sampleRate;\n      const totalLength = recordDuration * sampleRate;\n\n      const bgBuffer = this.audioContext.createBuffer(2, totalLength, sampleRate); // 双声道\n\n      // 3. 插入伴奏到合成缓冲区\n      bgBuffer.getChannelData(0).set(accompanimentBuffer.getChannelData(0).subarray(0, totalLength));\n      let n = 0;\n      if(accompanimentBuffer.numberOfChannels > 1){\n        n = 1;\n      }      \n      bgBuffer.getChannelData(1).set(accompanimentBuffer.getChannelData(n).subarray(0, totalLength));\n      \n      const bgSource = this.audioContext.createBufferSource();\n      bgSource.buffer = bgBuffer;\n\n      this.bgGain = this.audioContext.createGain();\n      this.bgGain.gain.value = this.accompanyVal / 100;\n      // this.accompanyVal = Math.round(this.bgGain.gain.value * 100);\n      bgSource.connect(this.bgGain);  \n      Tone.setContext(this.audioContext);\n      var pitchShift = new Tone.PitchShift();\n      pitchShift.pitch = this.store.banzouPitch;  \n      Tone.connect(this.bgGain, pitchShift);    \n      // this.bgGain.connect(this.audioContext.destination);\n      Tone.connect(pitchShift, this.audioContext.destination);\n\n      // 4. 按 start 时间从后往前排序录音片段，确保后面插入的片段可以覆盖前面的\n      // recordedSegments.sort((a, b) => a.start - b.start); // 已经排序了 这个可以注释\n\n      for (let i = recordedSegments.length - 1; i >= 1; --i) {\n        const segment = recordedSegments[i];\n        const preSeg = recordedSegments[i - 1];\n        let r = segment.start - preSeg.end\n        if (r < 0) {\n          preSeg.end = segment.start;\n        }\n        if (r > 0) {\n          let silentBuffer = this.createSilentAudio(this.audioContext, r);\n          recordedSegments.splice(i, 0, {\n            start: preSeg.end,\n            end: segment.start,\n            buffer: silentBuffer\n          })\n        }\n\n      }\n\n      const voiceBuffer = this.audioContext.createBuffer(2, totalLength, sampleRate); // 双声道\n\n      // 5. 依次加载每个录音片段并插入到合成缓冲区\n      for (let i = 0; i < recordedSegments.length; i++) {\n        let segment = recordedSegments[i];\n        let audioBuffer;\n        // 这里区分的是录音,还是跳过的那部分空白录音,空白录音就直接buffer, 录音需要转换一下\n        if(segment.buffer) {\n          audioBuffer = segment.buffer;\n        }\n        else {\n          audioBuffer = await this.loadAudioData(this.audioContext, segment.blob);\n        }\n        const startSample = Math.floor(segment.start * sampleRate);\n\n        // 计算插入范围，确保后面的音频覆盖前面的\n        const endSample = Math.min(startSample + audioBuffer.length, totalLength);\n\n        // 插入到左右声道\n        voiceBuffer.getChannelData(0).set(audioBuffer.getChannelData(0).slice(0, Math.floor(endSample - startSample)), startSample);\n        let n = 0;\n        console.log(\"channel \" + audioBuffer.numberOfChannels)\n        if(audioBuffer.numberOfChannels > 1){\n          n = 1;\n        }\n        voiceBuffer.getChannelData(1).set(audioBuffer.getChannelData(n).slice(0, Math.floor(endSample - startSample)), startSample);\n      }\n\n      // 6. 播放合成的音频\n      const voiceSource = this.audioContext.createBufferSource();\n      voiceSource.buffer = voiceBuffer;\n      this.voiceGain = this.audioContext.createGain();\n      this.voiceGain.gain.value = this.humanVal / 100;\n\n      //this.humanVal = Math.round(this.voiceGain.gain.value * 100);\n      voiceSource.connect(this.voiceGain); \n      // 连接混响 \n      //let node = await util.connectReverbNode(this.voiceGain, this.store.reverb, this.audioContext);\n      // let nObj = await util.connectReverbNode(this.voiceGain, this.store.reverb, this.audioContext);\n      // let node = nObj.outputNode;\n      // this.disconnectReverb = nObj.disconnectReverb;      \n      // this.reverbNodes = nObj.reverbNodes; \n      this.curReverbNode = new Pizzicato.Effects.Reverb({\n        ...this.store.reverbOption\n      })\n      \n      this.onReverbChange(this.store.reverb);\n      \n      this.audioContext.onstatechange = () => {\n        console.log(\"state-> \", this.audioContext.state);\n      };\n      console.log(\"delay time->\", this.audioContext.currentTime)\n      this.bgSource = bgSource;\n      this.voiceSource = voiceSource;\n      this.playing = true;\n\n      this.remainTime = this.audioContext.currentTime;\n\n      this.setCurTime();\n\n      // 同时播放\n      bgSource.start();\n      // voiceSource.start();\n      this.startVoiceSource(); //人声不是简单的播放 还有迟延设置\n      console.log(\"voiceSource\", voiceSource);\n      this.store.hideLoading();\n      \n      // 7. 合成为 MP3 并下载\n      //this.exportBufferAsMp3(combinedBuffer);\n    },\n//     //连接reverb节点 \n//     async connectReverbNode(node, audioContext = this.audioContext, options) {\n//       return node;\n//       var defaultOptions = {\n//         delayTimes: [0.16, 0.38, 0.41, 0.59],\n//         feedbackGains: [0.7, 0.6, 0.5, 0.4],\n//         dryGain: 0.5,\n//         wetGain: 0.5\n//     };\n    \n//     defaultOptions = {\n//         delayTimes: [0.3, 0.5, 0.7, 0.9],\n//         feedbackGains: [0.8, 0.7, 0.6, 0.5],\n//         dryGain: 0.4,\n//         wetGain: 0.6\n//     };\n\n//     defaultOptions = {\n//     delayTimes: [0.1, 0.2, 0.3, 0.4],\n//     feedbackGains: [0.6, 0.5, 0.4, 0.3],\n//     dryGain: 0.6,\n//     wetGain: 0.4\n// }\n\n// defaultOptions = {\n//     delayTimes: [0.5, 1.0, 1.5, 2.0],\n//     feedbackGains: [0.9, 0.8, 0.7, 0.6],\n//     dryGain: 0.1,\n//     wetGain: 0.9\n// }\n//     const settings = { ...defaultOptions, ...options };\n\n//     // 创建干声增益节点\n//     const dryGainNode = audioContext.createGain();\n//     dryGainNode.gain.value = settings.dryGain;\n\n//     // 创建湿声增益节点\n//     const wetGainNode = audioContext.createGain();\n//     wetGainNode.gain.value = settings.wetGain;\n\n//     // 创建多个延迟节点用于创建多条延迟路径\n//     const delayNodes = [];\n\n//     for (let i = 0; i < 4; i++) {\n//         const delayNode = audioContext.createDelay(1.0); // 最大延迟时间为1秒\n//         const feedbackGain = audioContext.createGain();\n        \n//         delayNode.delayTime.value = settings.delayTimes[i];\n//         feedbackGain.gain.value = settings.feedbackGains[i];\n\n//         delayNode.connect(feedbackGain);\n//         feedbackGain.connect(delayNode);\n\n//         delayNodes.push(delayNode);\n//     }\n\n//     // 创建一个用于混合所有延迟路径的节点\n//     const mixNode = audioContext.createGain();\n\n//     // 连接各个延迟节点到混合节点\n//     delayNodes.forEach(delayNode => {\n//         delayNode.connect(mixNode);\n//     });\n\n//     // 创建一个用于连接所有节点的输出节点\n//     const outputNode = audioContext.createGain();\n\n//     // 连接各个节点\n//     node.connect(dryGainNode);\n//     node.connect(wetGainNode);\n//     wetGainNode.connect(mixNode);\n//     mixNode.connect(outputNode);\n//     dryGainNode.connect(outputNode);\n\n//     return outputNode;    \n\n\n//       if(this.store.reverb == 0){\n//         return node;\n//       }\n//       console.log(\"reverb->\", this.store.reverb)\n//       let r = this.reverbMap[this.store.reverb];\n//       if(!r) {\n//         r = await this.getReverb(this.store.reverb);\n//         if(!r) {\n//           return node;\n//         }\n//         this.reverbMap[this.store.reverb] = r;\n//       }\n\n//       const convolver = audioContext.createConvolver(); \n//       convolver.buffer = r;\n//       // convolver.normalize()\n//       //console.log(\"-------------\", convolver.buffer)\n//       this.curReverbConvolver = convolver;\n//       node.connect(convolver);\n//       //voiceSource.connect(convolver);\n//       return convolver;\n//     },\n    doStop(goStart) {\n      console.log(this.audioContext.state)\n      if(this.audioContext.state == \"running\") {\n        this.playing = false;\n        this.audioContext.suspend();\n        if(goStart) {\n          this.curTime = 0;\n          this.rTimer = null;\n          this.remainTime = this.audioContext.currentTime;\n        }\n        // this.bgSource.stop();\n        // this.voiceSource.stop();\n      }\n    },\n    // 跳到指定时间, 需要重新创建node, start以后没法再跳了\n    jumpTo(n) {\n\n      this.bgSource.stop();\n      const newBgSource = this.audioContext.createBufferSource();\n      newBgSource.buffer = this.bgSource.buffer;  \n      this.bgSource.disconnect();\n      this.bgSource.buffer = null;\n      newBgSource.connect(this.bgGain);  \n      this.bgSource = newBgSource;\n      console.log(\"bg\", 0, n)\n      this.bgSource.start(0, n);\n\n      this.voiceSource.stop();\n      const newVoiceSource = this.audioContext.createBufferSource();\n      newVoiceSource.buffer = this.voiceSource.buffer;  \n      this.voiceSource.disconnect();\n      this.voiceSource.buffer = null;\n      newVoiceSource.connect(this.voiceGain);  \n      this.voiceSource = newVoiceSource;\n      //newVoiceSource.start();\n      this.startVoiceSource(n);\n    },\n\n    startVoiceSource(n = 0, source=this.voiceSource) {\n      if(this.delayPlayTimer){\n        clearTimeout(this.delayPlayTimer);\n        this.delayPlayTimer = null;\n      }\n      //  第一个参数很坑, source.start(迟延几秒播放, 从第几秒开始); 结果第一个参数总不准 所以我就只设置成0 然后用setTimeout来延迟\n      let offsetTime = 0;\n      offsetTime = n + this.store.voiceDelay;\n      if(offsetTime >= 0) {\n        source.start(0, offsetTime);\n      }\n      else {\n        let n = offsetTime * -1000;\n        offsetTime = 0;\n        this.delayPlayTimer = setTimeout(()=>{\n          source.start(0, offsetTime);\n        }, n)        \n      }\n      // let delayTime = 0;\n      // let offsetTime = 0;\n      // /**\n      //  * 这个source.start(0, offsetTime); 第一个参数很坑 时间不准啊....\n      //  */\n      // // 人声调快\n      // if(this.store.voiceDelay >= 0) {\n      //   offsetTime = n + this.store.voiceDelay; // 人声调快\n      //   source.start(0, offsetTime);\n      // }\n      // // 如果开始就有人声 会把调快的0.x秒那部分弄没了 一般不会马上就有人声\n      // else {\n      //   delayTime = this.store.voiceDelay * -1; //人声调慢\n      //   offsetTime = n;// 该跳到哪去就跳到哪去\n      //   this.delayPlayTimer = setTimeout(()=>{\n      //     source.start(0, offsetTime);\n      //   }, delayTime*1000)\n      // }\n      \n    },\n\n    doPlay() {\n      console.log(this.audioContext.state)\n      if(this.audioContext.state != \"running\") {\n        this.playing = true;\n        this.audioContext.resume();\n        if(!this.rTimer) {\n          this.setCurTime();\n          this.jumpTo(0)\n        }\n        // this.bgSource.start(n);\n        // this.voiceSource.start(n);\n      }\n    },\n\n    //设置当前时间 这个就与上一个record界面不同了, record界面可以根据audio标签的update方法来获取,这里没有用audio标签就需要自己定时获取了\n    setCurTime() {\n      let n = this.audioContext.currentTime - this.remainTime;\n      if(n >= this.store.recordLength){\n        this.doStop(true);\n        return;\n      }\n      if(!this.dragging) {\n        this.curTime = n;\n      }\n      this.setCurLrc();\n      //console.log(\"curTime-> \", this.curTime,  this.store.banzouLength);\n      this.rTimer = requestAnimationFrame(this.setCurTime);\n    },\n\n    // 这个和compose页面有一个函数重复了 待改进\n    setCurLrc() {\n      if(!this.store.parsedLyrics || !this.store.parsedLyrics.length) {\n        return;\n      }\n      const currentTime = this.curTime;\n      // 查找当前播放时间对应的歌词行\n      for (let i = 0; i < this.store.parsedLyrics.length; i++) {\n        if (\n          currentTime >= this.store.parsedLyrics[i].time &&\n          (i === this.store.parsedLyrics.length - 1 ||\n            currentTime < this.store.parsedLyrics[i + 1].time)\n        ) {\n          this.curLrc = this.store.parsedLyrics[i].text; // 自动滚动到当前歌词行\n          break;\n        }\n      } \n    },\n\n    // 生成指定时长的空白音频\n    createSilentAudio(audioCtx, duration) {\n      const channels = 2;\n      const frameCount = audioCtx.sampleRate * duration;\n      const silentBuffer = audioCtx.createBuffer(channels, frameCount, audioCtx.sampleRate);\n      return silentBuffer;\n    },\n\n    // 加载音频\n    loadAudioData(audioContext, blob) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          audioContext\n            .decodeAudioData(reader.result)\n            .then((audioBuffer) => resolve(audioBuffer))\n            .catch((err) => reject(err));\n        };\n        reader.onerror = () => reject(reader.error);\n        reader.readAsArrayBuffer(blob);\n      });\n    },\n\n    // exportBufferAsMp3(audioBuffer) {\n    //   console.log(\"exportBufferAsMp3\", audioBuffer);\n    //   // const wav = audioBufferToWav(audioBuffer); // 你需要实现或引入 audioBufferToWav 函数\n    //   // const mp3Blob = wavToMp3(wav); // 你需要实现或引入 wavToMp3 函数\n\n    //   // const url = URL.createObjectURL(mp3Blob);\n    //   // const a = document.createElement(\"a\");\n    //   // document.body.appendChild(a);\n    //   // a.style = \"display: none\";\n    //   // a.href = url;\n    //   // a.download = \"combined_audio.mp3\";\n    //   // a.click();\n    //   // URL.revokeObjectURL(url);\n    // },\n    async exportAudio(onlyVoice, compress){\n        // 创建 OfflineAudioContext\n        let length = this.store.recordLength; // 设置音频长度为10秒\n        let audioCtx = new OfflineAudioContext({\n            numberOfChannels: 2,\n            length: 48000 * length,\n            sampleRate: 48000,\n        });\n        let Pizzicato = createPizzicato(audioCtx);\n        this.offlineAudioCtx = audioCtx;\n        let bufferSource;\n        if(!onlyVoice) {\n          // 将音频数据加载到 bufferSource\n          bufferSource = audioCtx.createBufferSource();\n          bufferSource.buffer = this.bgSource.buffer;\n      \n          // 创建 GainNode\n          let gainNode = audioCtx.createGain();\n      \n          // 设置 Tone.js 的上下文为 OfflineAudioContext\n          Tone.setContext(audioCtx);\n      \n          // 创建 Tone.PitchShift 并连接\n          let pitchShift = new Tone.PitchShift();\n          pitchShift.pitch = this.store.banzouPitch;  \n      \n          // 连接音频节点\n          bufferSource.connect(gainNode);\n          Tone.connect(gainNode, pitchShift);\n          Tone.connect(pitchShift, audioCtx.destination);\n        }\n    \n        // 人声 \n        let voiceBufferSource = audioCtx.createBufferSource();\n        voiceBufferSource.buffer = this.voiceSource.buffer;\n        let voiceGain = audioCtx.createGain();\n        voiceGain.gain.value = this.humanVal / 100;\n\n        //this.humanVal = Math.round(this.voiceGain.gain.value * 100);\n        voiceBufferSource.connect(voiceGain);     \n        // 连接混响 \n        //let node = await util.connectReverbNode(voiceGain,this.store.reverb, audioCtx);\n        // let nObj = await util.connectReverbNode(voiceGain, this.store.reverb, audioCtx);\n        // let node = nObj.outputNode;\n        // node.connect(audioCtx.destination);    \n        if(this.store.reverb) {\n            let node = new Pizzicato.Effects.Reverb({\n              time: this.curReverbNode.time,\n              decay: this.curReverbNode.decay,\n              mix: this.curReverbNode.mix\n            })\n            voiceGain.connect(node);\n            node.connect(audioCtx.destination);\n        }\n        else {\n          voiceGain.connect(audioCtx.destination);\n        }\n        if(!onlyVoice) {\n          bufferSource.start();\n        }\n        this.startVoiceSource(0, voiceBufferSource);\n        console.log(\"start generate\")\n        // 开始渲染 OfflineAudioContext\n        audioCtx.startRendering()\n            .then(renderedBuffer => {\n                if(!this.offlineAudioCtx){\n                  return;\n                }\n                console.log('渲染完成', renderedBuffer);\n                if(compress){\n                  showToast(\"正在压缩音频,可能要花费很长时间...\");\n                }\n                downloadAudio(renderedBuffer, audioCtx.length, compress, (progress)=>{\n                  // console.log(\"progress-mp3\", progress);\n                  if(!this.offlineAudioCtx){\n                    return;\n                  }                  \n                  this.store.showProgess(progress);\n                }, ()=>{\n                  this.store.hideProgess();\n                }); // 将渲染后的结果下载\n            })\n            .catch(err => {\n                console.error('渲染错误:', err);\n            });\n        showToast(\"正在生成音频,请稍后...\");\n        renderProgress.start(audioCtx, this.bgSource.buffer.duration, (progess)=>{\n          if(!this.offlineAudioCtx) {\n            return;\n          }\n          console.log(\"progess\", progess);\n          this.store.showProgess(progess);\n        }, ()=>{\n          this.store.hideProgess();\n          if(!onlyVoice) {\n            bufferSource.disconnect();\n            bufferSource.buffer = null;\n          }\n          voiceBufferSource.disconnect();\n          voiceBufferSource.buffer = null;\n        })\n    }    \n  },\n};\n</script>\n<style scoped>\n.c-reverb-gp {\n  display: flex;\n  align-items: center;\n}\n</style>\n","import { render } from \"./EditView.vue?vue&type=template&id=c7ae6504&scoped=true\"\nimport script from \"./EditView.vue?vue&type=script&lang=js\"\nexport * from \"./EditView.vue?vue&type=script&lang=js\"\n\nimport \"./EditView.vue?vue&type=style&index=0&id=c7ae6504&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-c7ae6504\"]])\n\nexport default __exports__"],"names":["class","_createElementVNode","_createElementBlock","_Fragment","_hoisted_1","_createVNode","_component_van_nav_bar","title","onClickLeft","_cache","$event","$options","onBack","_hoisted_2","_hoisted_3","_toDisplayString","$data","musicName","_hoisted_4","_hoisted_5","_component_van_icon","name","onClick","onPause","playing","onPlay","_hoisted_6","$setup","util","convertTime","curTime","_hoisted_7","_component_van_slider","modelValue","min","max","store","recordLength","onChange","onDurationChange","onDragStart","dragging","onDragEnd","_hoisted_8","_hoisted_9","curLrc","_hoisted_10","_hoisted_11","_hoisted_12","humanVal","_hoisted_13","onHumanVoiceChange","_hoisted_14","_hoisted_15","accompanyVal","_hoisted_16","onAccompanyVoiceChange","_hoisted_17","_hoisted_18","voiceDelay","_hoisted_19","step","onDelayChange","_hoisted_20","_hoisted_21","_hoisted_22","_component_van_button","plain","type","size","onReverbSetting","default","_withCtx","_createTextVNode","_","reverb","_component_van_switch","onReverbChange","_hoisted_23","_hoisted_24","compress","_hoisted_25","reRecord","exportHuman","exportSong","_component_ReverbDialog","ref","onReverbDetailChange","Pizzicato","components","ReverbDialog","setup","createPizzicato","window","AudioContext","webkitAudioContext","useStore","rbDlg","data","remainTime","reverbMap","curReverbConvolver","audioContext","offlineAudioCtx","bgGain","voiceGain","bgSource","voiceSource","rTimer","delayPlayTimer","mounted","console","log","this","audioChunk","length","banzou","alert","$router","replace","context","banzouLength","init","unmounted","cancelAnimationFrame","clearTimeout","disconnect","buffer","e","close","state","suspend","currentTime","hideLoading","hideProgess","stopDownload","renderProgress","stop","methods","showConfirmDialog","message","then","catch","getReverb","num","audioUrl","response","fetch","ok","Error","statusText","arrayBuffer","audioBuffer","decodeAudioData","error","b","connect","curReverbNode","destination","opt","reverbOption","time","decay","mix","doPlay","doStop","n","jumpTo","gain","value","banzouVolume","exportAudio","show","recordedSegments","accompanimentBlob","recordDuration","showLoading","accompanimentBuffer","loadAudioData","sampleRate","totalLength","bgBuffer","createBuffer","getChannelData","set","subarray","numberOfChannels","createBufferSource","createGain","Tone","setContext","pitchShift","PitchShift","pitch","banzouPitch","i","segment","preSeg","r","start","end","silentBuffer","createSilentAudio","splice","voiceBuffer","blob","startSample","Math","floor","endSample","slice","Effects","Reverb","onstatechange","setCurTime","startVoiceSource","goStart","newBgSource","newVoiceSource","source","offsetTime","setTimeout","resume","setCurLrc","requestAnimationFrame","parsedLyrics","text","audioCtx","duration","channels","frameCount","Promise","resolve","reject","reader","FileReader","onload","result","err","onerror","readAsArrayBuffer","onlyVoice","bufferSource","OfflineAudioContext","gainNode","voiceBufferSource","node","startRendering","renderedBuffer","showToast","downloadAudio","progress","showProgess","progess","__exports__","render"],"sourceRoot":""}