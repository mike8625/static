function lamejs() {
  function e(e) {
    return new Int32Array(e);
  }
  function a(e) {
    return new Float32Array(e);
  }
  function t(e) {
    if (1 == e.length) return a(e[0]);
    var s = e[0];
    e = e.slice(1);
    for (var n = [], r = 0; r < s; r++) n.push(t(e));
    return n;
  }
  function s(a) {
    if (1 == a.length) return e(a[0]);
    var t = a[0];
    a = a.slice(1);
    for (var n = [], r = 0; r < t; r++) n.push(s(a));
    return n;
  }
  function n(e) {
    if (1 == e.length) return new Int16Array(e[0]);
    var a = e[0];
    e = e.slice(1);
    for (var t = [], s = 0; s < a; s++) t.push(n(e));
    return t;
  }
  function r(e) {
    if (1 == e.length) return Array(e[0]);
    var a = e[0];
    e = e.slice(1);
    for (var t = [], s = 0; s < a; s++) t.push(r(e));
    return t;
  }
  function _(e) {
    this.ordinal = e;
  }
  function i(e) {
    this.ordinal = e;
  }
  function o(e) {
    this.ordinal = function () {
      return e;
    };
  }
  function l() {
    (this.getLameVersion = function () {
      return '3.98.4';
    }),
      (this.getLameShortVersion = function () {
        return '3.98.4';
      }),
      (this.getLameVeryShortVersion = function () {
        return 'LAME3.98r';
      }),
      (this.getPsyVersion = function () {
        return '0.93';
      }),
      (this.getLameUrl = function () {
        return 'http://www.mp3dev.org/';
      }),
      (this.getLameOsBitness = function () {
        return '32bits';
      });
  }
  function f() {
    function e(e, a, t, s, n, r) {
      for (; 0 != n--; )
        (t[s] =
          1e-10 +
          e[a + 0] * r[0] -
          t[s - 1] * r[1] +
          e[a - 1] * r[2] -
          t[s - 2] * r[3] +
          e[a - 2] * r[4] -
          t[s - 3] * r[5] +
          e[a - 3] * r[6] -
          t[s - 4] * r[7] +
          e[a - 4] * r[8] -
          t[s - 5] * r[9] +
          e[a - 5] * r[10] -
          t[s - 6] * r[11] +
          e[a - 6] * r[12] -
          t[s - 7] * r[13] +
          e[a - 7] * r[14] -
          t[s - 8] * r[15] +
          e[a - 8] * r[16] -
          t[s - 9] * r[17] +
          e[a - 9] * r[18] -
          t[s - 10] * r[19] +
          e[a - 10] * r[20]),
          ++s,
          ++a;
    }
    function a(e, a, t, s, n, r) {
      for (; 0 != n--; )
        (t[s] =
          e[a + 0] * r[0] -
          t[s - 1] * r[1] +
          e[a - 1] * r[2] -
          t[s - 2] * r[3] +
          e[a - 2] * r[4]),
          ++s,
          ++a;
    }
    function t(e) {
      return e * e;
    }
    var s = f.RMS_WINDOW_TIME_NUMERATOR,
      n = f.RMS_WINDOW_TIME_DENOMINATOR,
      r = [
        [
          0.038575994352, -3.84664617118067, -0.02160367184185,
          7.81501653005538, -0.00123395316851, -11.34170355132042,
          -9291677959e-14, 13.05504219327545, -0.01655260341619,
          -12.28759895145294, 0.02161526843274, 9.4829380631979,
          -0.02074045215285, -5.87257861775999, 0.00594298065125,
          2.75465861874613, 0.00306428023191, -0.86984376593551,
          0.00012025322027, 0.13919314567432, 0.00288463683916,
        ],
        [
          0.0541865640643, -3.47845948550071, -0.02911007808948,
          6.36317777566148, -0.00848709379851, -8.54751527471874,
          -0.00851165645469, 9.4769360780128, -0.00834990904936,
          -8.81498681370155, 0.02245293253339, 6.85401540936998,
          -0.02596338512915, -4.39470996079559, 0.01624864962975,
          2.19611684890774, -0.00240879051584, -0.75104302451432,
          0.00674613682247, 0.13149317958808, -0.00187763777362,
        ],
        [
          0.15457299681924, -2.37898834973084, -0.09331049056315,
          2.84868151156327, -0.06247880153653, -2.64577170229825,
          0.02163541888798, 2.23697657451713, -0.05588393329856,
          -1.67148153367602, 0.04781476674921, 1.00595954808547,
          0.00222312597743, -0.45953458054983, 0.03174092540049,
          0.16378164858596, -0.01390589421898, -0.05032077717131,
          0.00651420667831, 0.0234789740702, -0.00881362733839,
        ],
        [
          0.30296907319327, -1.61273165137247, -0.22613988682123,
          1.0797749225997, -0.08587323730772, -0.2565625775407,
          0.03282930172664, -0.1627671912044, -0.00915702933434,
          -0.22638893773906, -0.02364141202522, 0.39120800788284,
          -0.00584456039913, -0.22138138954925, 0.06276101321749,
          0.04500235387352, -828086748e-14, 0.02005851806501, 0.00205861885564,
          0.00302439095741, -0.02950134983287,
        ],
        [
          0.33642304856132, -1.49858979367799, -0.2557224142557,
          0.87350271418188, -0.11828570177555, 0.12205022308084,
          0.11921148675203, -0.80774944671438, -0.07834489609479,
          0.47854794562326, -0.0046997791438, -0.12453458140019,
          -0.0058950022444, -0.04067510197014, 0.05724228140351,
          0.08333755284107, 0.00832043980773, -0.04237348025746,
          -0.0163538138454, 0.02977207319925, -0.0176017656815,
        ],
        [
          0.4491525660845, -0.62820619233671, -0.14351757464547,
          0.29661783706366, -0.22784394429749, -0.372563729424,
          -0.01419140100551, 0.00213767857124, 0.04078262797139,
          -0.42029820170918, -0.12398163381748, 0.22199650564824,
          0.04097565135648, 0.00613424350682, 0.10478503600251,
          0.06747620744683, -0.01863887810927, 0.05784820375801,
          -0.03193428438915, 0.03222754072173, 0.00541907748707,
        ],
        [
          0.56619470757641, -1.04800335126349, -0.75464456939302,
          0.29156311971249, 0.1624213774223, -0.26806001042947,
          0.16744243493672, 0.00819999645858, -0.18901604199609,
          0.45054734505008, 0.3093178284183, -0.33032403314006,
          -0.27562961986224, 0.0673936833311, 0.00647310677246,
          -0.04784254229033, 0.08647503780351, 0.01639907836189,
          -0.0378898455484, 0.01807364323573, -0.00588215443421,
        ],
        [
          0.58100494960553, -0.51035327095184, -0.53174909058578,
          -0.31863563325245, -0.14289799034253, -0.20256413484477,
          0.17520704835522, 0.1472815413433, 0.02377945217615, 0.38952639978999,
          0.15558449135573, -0.23313271880868, -0.25344790059353,
          -0.05246019024463, 0.01628462406333, -0.02505961724053,
          0.06920467763959, 0.02442357316099, -0.03721611395801,
          0.01818801111503, -0.00749618797172,
        ],
        [
          0.53648789255105, -0.2504987195602, -0.42163034350696,
          -0.43193942311114, -0.00275953611929, -0.03424681017675,
          0.04267842219415, -0.04678328784242, -0.10214864179676,
          0.26408300200955, 0.14590772289388, 0.15113130533216,
          -0.02459864859345, -0.17556493366449, -0.11202315195388,
          -0.18823009262115, -0.04060034127, 0.05477720428674, 0.0478866554818,
          0.0470440968812, -0.02217936801134,
        ],
      ],
      _ = [
        [
          0.98621192462708, -1.97223372919527, -1.97242384925416,
          0.97261396931306, 0.98621192462708,
        ],
        [
          0.98500175787242, -1.96977855582618, -1.97000351574484,
          0.9702284756635, 0.98500175787242,
        ],
        [
          0.97938932735214, -1.95835380975398, -1.95877865470428,
          0.95920349965459, 0.97938932735214,
        ],
        [
          0.97531843204928, -1.95002759149878, -1.95063686409857,
          0.95124613669835, 0.97531843204928,
        ],
        [
          0.97316523498161, -1.94561023566527, -1.94633046996323,
          0.94705070426118, 0.97316523498161,
        ],
        [
          0.96454515552826, -1.92783286977036, -1.92909031105652,
          0.93034775234268, 0.96454515552826,
        ],
        [
          0.96009142950541, -1.91858953033784, -1.92018285901082,
          0.92177618768381, 0.96009142950541,
        ],
        [
          0.95856916599601, -1.9154210807478, -1.91713833199203,
          0.91885558323625, 0.95856916599601,
        ],
        [
          0.94597685600279, -1.88903307939452, -1.89195371200558,
          0.89487434461664, 0.94597685600279,
        ],
      ];
    (this.InitGainAnalysis = function (e, a) {
      e: {
        for (var t = 0; t < MAX_ORDER; t++)
          e.linprebuf[t] =
            e.lstepbuf[t] =
            e.loutbuf[t] =
            e.rinprebuf[t] =
            e.rstepbuf[t] =
            e.routbuf[t] =
              0;
        switch (0 | a) {
          case 48e3:
            e.reqindex = 0;
            break;
          case 44100:
            e.reqindex = 1;
            break;
          case 32e3:
            e.reqindex = 2;
            break;
          case 24e3:
            e.reqindex = 3;
            break;
          case 22050:
            e.reqindex = 4;
            break;
          case 16e3:
            e.reqindex = 5;
            break;
          case 12e3:
            e.reqindex = 6;
            break;
          case 11025:
            e.reqindex = 7;
            break;
          case 8e3:
            e.reqindex = 8;
            break;
          default:
            a = INIT_GAIN_ANALYSIS_ERROR;
            break e;
        }
        (e.sampleWindow = 0 | ((a * s + n - 1) / n)),
          (e.lsum = 0),
          (e.rsum = 0),
          (e.totsamp = 0),
          z.ill(e.A, 0),
          (a = INIT_GAIN_ANALYSIS_OK);
      }
      return a != INIT_GAIN_ANALYSIS_OK
        ? INIT_GAIN_ANALYSIS_ERROR
        : ((e.linpre = MAX_ORDER),
          (e.rinpre = MAX_ORDER),
          (e.lstep = MAX_ORDER),
          (e.rstep = MAX_ORDER),
          (e.lout = MAX_ORDER),
          (e.rout = MAX_ORDER),
          z.fill(e.B, 0),
          INIT_GAIN_ANALYSIS_OK);
    }),
      (this.AnalyzeSamples = function (s, n, i, o, l, h, c) {
        if (0 == h) return GAIN_ANALYSIS_OK;
        var b = 0,
          u = h;
        switch (c) {
          case 1:
            (o = n), (l = i);
            break;
          case 2:
            break;
          default:
            return GAIN_ANALYSIS_ERROR;
        }
        for (
          h < MAX_ORDER
            ? (K.arraycopy(n, i, s.linprebuf, MAX_ORDER, h),
              K.arraycopy(o, l, s.rinprebuf, MAX_ORDER, h))
            : (K.arraycopy(n, i, s.linprebuf, MAX_ORDER, MAX_ORDER),
              K.arraycopy(o, l, s.rinprebuf, MAX_ORDER, MAX_ORDER));
          0 < u;

        ) {
          var m =
            u > s.sampleWindow - s.totsamp ? s.sampleWindow - s.totsamp : u;
          if (b < MAX_ORDER) {
            c = s.linpre + b;
            var p = s.linprebuf,
              d = s.rinpre + b,
              v = s.rinprebuf;
            m > MAX_ORDER - b && (m = MAX_ORDER - b);
          } else (c = i + b), (p = n), (d = l + b), (v = o);
          e(p, c, s.lstepbuf, s.lstep + s.totsamp, m, r[s.reqindex]),
            e(v, d, s.rstepbuf, s.rstep + s.totsamp, m, r[s.reqindex]),
            a(
              s.lstepbuf,
              s.lstep + s.totsamp,
              s.loutbuf,
              s.lout + s.totsamp,
              m,
              _[s.reqindex],
            ),
            a(
              s.rstepbuf,
              s.rstep + s.totsamp,
              s.routbuf,
              s.rout + s.totsamp,
              m,
              _[s.reqindex],
            ),
            (c = s.lout + s.totsamp),
            (p = s.loutbuf),
            (d = s.rout + s.totsamp),
            (v = s.routbuf);
          for (var g = m % 8; 0 != g--; )
            (s.lsum += t(p[c++])), (s.rsum += t(v[d++]));
          for (g = m / 8; 0 != g--; )
            (s.lsum +=
              t(p[c + 0]) +
              t(p[c + 1]) +
              t(p[c + 2]) +
              t(p[c + 3]) +
              t(p[c + 4]) +
              t(p[c + 5]) +
              t(p[c + 6]) +
              t(p[c + 7])),
              (c += 8),
              (s.rsum +=
                t(v[d + 0]) +
                t(v[d + 1]) +
                t(v[d + 2]) +
                t(v[d + 3]) +
                t(v[d + 4]) +
                t(v[d + 5]) +
                t(v[d + 6]) +
                t(v[d + 7])),
              (d += 8);
          if (
            ((u -= m),
            (b += m),
            (s.totsamp += m),
            s.totsamp == s.sampleWindow &&
              ((c =
                10 *
                f.STEPS_per_dB *
                Math.log10(((s.lsum + s.rsum) / s.totsamp) * 0.5 + 1e-37)),
              (c = 0 >= c ? 0 : 0 | c),
              c >= s.A.length && (c = s.A.length - 1),
              s.A[c]++,
              (s.lsum = s.rsum = 0),
              K.arraycopy(s.loutbuf, s.totsamp, s.loutbuf, 0, MAX_ORDER),
              K.arraycopy(s.routbuf, s.totsamp, s.routbuf, 0, MAX_ORDER),
              K.arraycopy(s.lstepbuf, s.totsamp, s.lstepbuf, 0, MAX_ORDER),
              K.arraycopy(s.rstepbuf, s.totsamp, s.rstepbuf, 0, MAX_ORDER),
              (s.totsamp = 0)),
            s.totsamp > s.sampleWindow)
          )
            return GAIN_ANALYSIS_ERROR;
        }
        return (
          h < MAX_ORDER
            ? (K.arraycopy(s.linprebuf, h, s.linprebuf, 0, MAX_ORDER - h),
              K.arraycopy(s.rinprebuf, h, s.rinprebuf, 0, MAX_ORDER - h),
              K.arraycopy(n, i, s.linprebuf, MAX_ORDER - h, h),
              K.arraycopy(o, l, s.rinprebuf, MAX_ORDER - h, h))
            : (K.arraycopy(n, i + h - MAX_ORDER, s.linprebuf, 0, MAX_ORDER),
              K.arraycopy(o, l + h - MAX_ORDER, s.rinprebuf, 0, MAX_ORDER)),
          GAIN_ANALYSIS_OK
        );
      }),
      (this.GetTitleGain = function (e) {
        var a,
          t = e.A,
          s = e.A.length,
          n = 0;
        for (a = 0; a < s; a++) n += t[a];
        if (0 == n) t = GAIN_NOT_ENOUGH_SAMPLES;
        else {
          for (
            n = 0 | Math.ceil(n * (1 - 0.95)), a = s;
            0 < a-- && !(0 >= (n -= t[a]));

          );
          t = 64.82 - a / f.STEPS_per_dB;
        }
        for (s = 0; s < e.A.length; s++) (e.B[s] += e.A[s]), (e.A[s] = 0);
        for (s = 0; s < MAX_ORDER; s++)
          e.linprebuf[s] =
            e.lstepbuf[s] =
            e.loutbuf[s] =
            e.rinprebuf[s] =
            e.rstepbuf[s] =
            e.routbuf[s] =
              0;
        return (e.totsamp = 0), (e.lsum = e.rsum = 0), t;
      });
  }
  function h() {
    function e(e, a, t, s, n, r, _, i, o, l, f, h, c, b, u) {
      (this.vbr_q = e),
        (this.quant_comp = a),
        (this.quant_comp_s = t),
        (this.expY = s),
        (this.st_lrm = n),
        (this.st_s = r),
        (this.masking_adj = _),
        (this.masking_adj_short = i),
        (this.ath_lower = o),
        (this.ath_curve = l),
        (this.ath_sensitivity = f),
        (this.interch = h),
        (this.safejoint = c),
        (this.sfb21mod = b),
        (this.msfix = u);
    }
    function a(e, a, t, s, n, r, _, i, o, l, f, h, c, b) {
      (this.quant_comp = a),
        (this.quant_comp_s = t),
        (this.safejoint = s),
        (this.nsmsfix = n),
        (this.st_lrm = r),
        (this.st_s = _),
        (this.nsbass = i),
        (this.scale = o),
        (this.masking_adj = l),
        (this.ath_lower = f),
        (this.ath_curve = h),
        (this.interch = c),
        (this.sfscale = b);
    }
    function t(e, a, t) {
      var s = e.VBR == i.vbr_rh ? r : _,
        n = e.VBR_q_frac,
        o = s[a];
      (s = s[a + 1]),
        (o.st_lrm += n * (s.st_lrm - o.st_lrm)),
        (o.st_s += n * (s.st_s - o.st_s)),
        (o.masking_adj += n * (s.masking_adj - o.masking_adj)),
        (o.masking_adj_short +=
          n * (s.masking_adj_short - o.masking_adj_short)),
        (o.ath_lower += n * (s.ath_lower - o.ath_lower)),
        (o.ath_curve += n * (s.ath_curve - o.ath_curve)),
        (o.ath_sensitivity += n * (s.ath_sensitivity - o.ath_sensitivity)),
        (o.interch += n * (s.interch - o.interch)),
        (o.msfix += n * (s.msfix - o.msfix)),
        (s = o.vbr_q),
        0 > s && (s = 0),
        9 < s && (s = 9),
        (e.VBR_q = s),
        (e.VBR_q_frac = 0),
        0 != t
          ? (e.quant_comp = o.quant_comp)
          : 0 < Math.abs(e.quant_comp - -1) || (e.quant_comp = o.quant_comp),
        0 != t
          ? (e.quant_comp_short = o.quant_comp_s)
          : 0 < Math.abs(e.quant_comp_short - -1) ||
            (e.quant_comp_short = o.quant_comp_s),
        0 != o.expY && (e.experimentalY = 0 != o.expY),
        0 != t
          ? (e.internal_flags.nsPsy.attackthre = o.st_lrm)
          : 0 < Math.abs(e.internal_flags.nsPsy.attackthre - -1) ||
            (e.internal_flags.nsPsy.attackthre = o.st_lrm),
        0 != t
          ? (e.internal_flags.nsPsy.attackthre_s = o.st_s)
          : 0 < Math.abs(e.internal_flags.nsPsy.attackthre_s - -1) ||
            (e.internal_flags.nsPsy.attackthre_s = o.st_s),
        0 != t
          ? (e.maskingadjust = o.masking_adj)
          : 0 < Math.abs(e.maskingadjust - 0) ||
            (e.maskingadjust = o.masking_adj),
        0 != t
          ? (e.maskingadjust_short = o.masking_adj_short)
          : 0 < Math.abs(e.maskingadjust_short - 0) ||
            (e.maskingadjust_short = o.masking_adj_short),
        0 != t
          ? (e.ATHlower = -o.ath_lower / 10)
          : 0 < Math.abs(10 * -e.ATHlower) || (e.ATHlower = -o.ath_lower / 10),
        0 != t
          ? (e.ATHcurve = o.ath_curve)
          : 0 < Math.abs(e.ATHcurve - -1) || (e.ATHcurve = o.ath_curve),
        0 != t
          ? (e.athaa_sensitivity = o.ath_sensitivity)
          : 0 < Math.abs(e.athaa_sensitivity - -1) ||
            (e.athaa_sensitivity = o.ath_sensitivity),
        0 < o.interch &&
          (0 != t
            ? (e.interChRatio = o.interch)
            : 0 < Math.abs(e.interChRatio - -1) ||
              (e.interChRatio = o.interch)),
        0 < o.safejoint && (e.exp_nspsytune |= o.safejoint),
        0 < o.sfb21mod && (e.exp_nspsytune |= o.sfb21mod << 20),
        0 != t
          ? (e.msfix = o.msfix)
          : 0 < Math.abs(e.msfix - -1) || (e.msfix = o.msfix),
        0 == t && ((e.VBR_q = a), (e.VBR_q_frac = n));
    }
    function s(e, a, t) {
      var s = n.nearestBitrateFullIndex(a);
      if (
        ((e.VBR = i.vbr_abr),
        (e.VBR_mean_bitrate_kbps = a),
        (e.VBR_mean_bitrate_kbps = Math.min(e.VBR_mean_bitrate_kbps, 320)),
        (e.VBR_mean_bitrate_kbps = Math.max(e.VBR_mean_bitrate_kbps, 8)),
        (e.brate = e.VBR_mean_bitrate_kbps),
        320 < e.VBR_mean_bitrate_kbps && (e.disable_reservoir = !0),
        0 < o[s].safejoint && (e.exp_nspsytune |= 2),
        0 < o[s].sfscale && (e.internal_flags.noise_shaping = 2),
        0 < Math.abs(o[s].nsbass))
      ) {
        var r = int(4 * o[s].nsbass);
        0 > r && (r += 64), (e.exp_nspsytune |= r << 2);
      }
      return (
        0 != t
          ? (e.quant_comp = o[s].quant_comp)
          : 0 < Math.abs(e.quant_comp - -1) || (e.quant_comp = o[s].quant_comp),
        0 != t
          ? (e.quant_comp_short = o[s].quant_comp_s)
          : 0 < Math.abs(e.quant_comp_short - -1) ||
            (e.quant_comp_short = o[s].quant_comp_s),
        0 != t
          ? (e.msfix = o[s].nsmsfix)
          : 0 < Math.abs(e.msfix - -1) || (e.msfix = o[s].nsmsfix),
        0 != t
          ? (e.internal_flags.nsPsy.attackthre = o[s].st_lrm)
          : 0 < Math.abs(e.internal_flags.nsPsy.attackthre - -1) ||
            (e.internal_flags.nsPsy.attackthre = o[s].st_lrm),
        0 != t
          ? (e.internal_flags.nsPsy.attackthre_s = o[s].st_s)
          : 0 < Math.abs(e.internal_flags.nsPsy.attackthre_s - -1) ||
            (e.internal_flags.nsPsy.attackthre_s = o[s].st_s),
        0 != t
          ? (e.scale = o[s].scale)
          : 0 < Math.abs(e.scale - -1) || (e.scale = o[s].scale),
        0 != t
          ? (e.maskingadjust = o[s].masking_adj)
          : 0 < Math.abs(e.maskingadjust - 0) ||
            (e.maskingadjust = o[s].masking_adj),
        0 < o[s].masking_adj
          ? 0 != t
            ? (e.maskingadjust_short = 0.9 * o[s].masking_adj)
            : 0 < Math.abs(e.maskingadjust_short - 0) ||
              (e.maskingadjust_short = 0.9 * o[s].masking_adj)
          : 0 != t
          ? (e.maskingadjust_short = 1.1 * o[s].masking_adj)
          : 0 < Math.abs(e.maskingadjust_short - 0) ||
            (e.maskingadjust_short = 1.1 * o[s].masking_adj),
        0 != t
          ? (e.ATHlower = -o[s].ath_lower / 10)
          : 0 < Math.abs(10 * -e.ATHlower) ||
            (e.ATHlower = -o[s].ath_lower / 10),
        0 != t
          ? (e.ATHcurve = o[s].ath_curve)
          : 0 < Math.abs(e.ATHcurve - -1) || (e.ATHcurve = o[s].ath_curve),
        0 != t
          ? (e.interChRatio = o[s].interch)
          : 0 < Math.abs(e.interChRatio - -1) ||
            (e.interChRatio = o[s].interch),
        a
      );
    }
    var n;
    this.setModules = function (e) {
      n = e;
    };
    var r = [
        new e(0, 9, 9, 0, 5.2, 125, -4.2, -6.3, 4.8, 1, 0, 0, 2, 21, 0.97),
        new e(1, 9, 9, 0, 5.3, 125, -3.6, -5.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),
        new e(2, 9, 9, 0, 5.6, 125, -2.2, -3.5, 2.8, 2, 0, 0, 2, 21, 1.49),
        new e(3, 9, 9, 1, 5.8, 130, -1.8, -2.8, 2.6, 3, -4, 0, 2, 20, 1.64),
        new e(4, 9, 9, 1, 6, 135, -0.7, -1.1, 1.1, 3.5, -8, 0, 2, 0, 1.79),
        new e(5, 9, 9, 1, 6.4, 140, 0.5, 0.4, -7.5, 4, -12, 2e-4, 0, 0, 1.95),
        new e(
          6,
          9,
          9,
          1,
          6.6,
          145,
          0.67,
          0.65,
          -14.7,
          6.5,
          -19,
          4e-4,
          0,
          0,
          2.3,
        ),
        new e(7, 9, 9, 1, 6.6, 145, 0.8, 0.75, -19.7, 8, -22, 6e-4, 0, 0, 2.7),
        new e(8, 9, 9, 1, 6.6, 145, 1.2, 1.15, -27.5, 10, -23, 7e-4, 0, 0, 0),
        new e(9, 9, 9, 1, 6.6, 145, 1.6, 1.6, -36, 11, -25, 8e-4, 0, 0, 0),
        new e(10, 9, 9, 1, 6.6, 145, 2, 2, -36, 12, -25, 8e-4, 0, 0, 0),
      ],
      _ = [
        new e(0, 9, 9, 0, 4.2, 25, -7, -4, 7.5, 1, 0, 0, 2, 26, 0.97),
        new e(1, 9, 9, 0, 4.2, 25, -5.6, -3.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),
        new e(2, 9, 9, 0, 4.2, 25, -4.4, -1.8, 2, 2, 0, 0, 2, 18, 1.49),
        new e(3, 9, 9, 1, 4.2, 25, -3.4, -1.25, 1.1, 3, -4, 0, 2, 15, 1.64),
        new e(4, 9, 9, 1, 4.2, 25, -2.2, 0.1, 0, 3.5, -8, 0, 2, 0, 1.79),
        new e(5, 9, 9, 1, 4.2, 25, -1, 1.65, -7.7, 4, -12, 2e-4, 0, 0, 1.95),
        new e(6, 9, 9, 1, 4.2, 25, -0, 2.47, -7.7, 6.5, -19, 4e-4, 0, 0, 2),
        new e(7, 9, 9, 1, 4.2, 25, 0.5, 2, -14.5, 8, -22, 6e-4, 0, 0, 2),
        new e(8, 9, 9, 1, 4.2, 25, 1, 2.4, -22, 10, -23, 7e-4, 0, 0, 2),
        new e(9, 9, 9, 1, 4.2, 25, 1.5, 2.95, -30, 11, -25, 8e-4, 0, 0, 2),
        new e(10, 9, 9, 1, 4.2, 25, 2, 2.95, -36, 12, -30, 8e-4, 0, 0, 2),
      ],
      o = [
        new a(8, 9, 9, 0, 0, 6.6, 145, 0, 0.95, 0, -30, 11, 0.0012, 1),
        new a(16, 9, 9, 0, 0, 6.6, 145, 0, 0.95, 0, -25, 11, 0.001, 1),
        new a(24, 9, 9, 0, 0, 6.6, 145, 0, 0.95, 0, -20, 11, 0.001, 1),
        new a(32, 9, 9, 0, 0, 6.6, 145, 0, 0.95, 0, -15, 11, 0.001, 1),
        new a(40, 9, 9, 0, 0, 6.6, 145, 0, 0.95, 0, -10, 11, 9e-4, 1),
        new a(48, 9, 9, 0, 0, 6.6, 145, 0, 0.95, 0, -10, 11, 9e-4, 1),
        new a(56, 9, 9, 0, 0, 6.6, 145, 0, 0.95, 0, -6, 11, 8e-4, 1),
        new a(64, 9, 9, 0, 0, 6.6, 145, 0, 0.95, 0, -2, 11, 8e-4, 1),
        new a(80, 9, 9, 0, 0, 6.6, 145, 0, 0.95, 0, 0, 8, 7e-4, 1),
        new a(96, 9, 9, 0, 2.5, 6.6, 145, 0, 0.95, 0, 1, 5.5, 6e-4, 1),
        new a(112, 9, 9, 0, 2.25, 6.6, 145, 0, 0.95, 0, 2, 4.5, 5e-4, 1),
        new a(128, 9, 9, 0, 1.95, 6.4, 140, 0, 0.95, 0, 3, 4, 2e-4, 1),
        new a(160, 9, 9, 1, 1.79, 6, 135, 0, 0.95, -2, 5, 3.5, 0, 1),
        new a(192, 9, 9, 1, 1.49, 5.6, 125, 0, 0.97, -4, 7, 3, 0, 0),
        new a(224, 9, 9, 1, 1.25, 5.2, 125, 0, 0.98, -6, 9, 2, 0, 0),
        new a(256, 9, 9, 1, 0.97, 5.2, 125, 0, 1, -8, 10, 1, 0, 0),
        new a(320, 9, 9, 1, 0.9, 5.2, 125, 0, 1, -10, 12, 0, 0, 0),
      ];
    this.apply_preset = function (e, a, n) {
      switch (a) {
        case X.R3MIX:
          (a = X.V3), (e.VBR = i.vbr_mtrh);
          break;
        case X.MEDIUM:
          (a = X.V4), (e.VBR = i.vbr_rh);
          break;
        case X.MEDIUM_FAST:
          (a = X.V4), (e.VBR = i.vbr_mtrh);
          break;
        case X.STANDARD:
          (a = X.V2), (e.VBR = i.vbr_rh);
          break;
        case X.STANDARD_FAST:
          (a = X.V2), (e.VBR = i.vbr_mtrh);
          break;
        case X.EXTREME:
          (a = X.V0), (e.VBR = i.vbr_rh);
          break;
        case X.EXTREME_FAST:
          (a = X.V0), (e.VBR = i.vbr_mtrh);
          break;
        case X.INSANE:
          return (a = 320), (e.preset = a), s(e, a, n), (e.VBR = i.vbr_off), a;
      }
      switch (((e.preset = a), a)) {
        case X.V9:
          return t(e, 9, n), a;
        case X.V8:
          return t(e, 8, n), a;
        case X.V7:
          return t(e, 7, n), a;
        case X.V6:
          return t(e, 6, n), a;
        case X.V5:
          return t(e, 5, n), a;
        case X.V4:
          return t(e, 4, n), a;
        case X.V3:
          return t(e, 3, n), a;
        case X.V2:
          return t(e, 2, n), a;
        case X.V1:
          return t(e, 1, n), a;
        case X.V0:
          return t(e, 0, n), a;
      }
      return 8 <= a && 320 >= a ? s(e, a, n) : ((e.preset = 0), a);
    };
  }
  function c() {
    function a(e) {
      this.bits = 0 | e;
    }
    function t(e, a, t, s, n, r) {
      for (a = 0.5946 / a, e >>= 1; 0 != e--; )
        (n[r++] = a > t[s++] ? 0 : 1), (n[r++] = a > t[s++] ? 0 : 1);
    }
    function s(e, a, t, s, n, r) {
      e >>= 1;
      var i = e % 2;
      for (e >>= 1; 0 != e--; ) {
        var o = t[s++] * a,
          l = t[s++] * a,
          f = 0 | o,
          h = t[s++] * a,
          c = 0 | l,
          b = t[s++] * a,
          u = 0 | h;
        (o += _.adj43[f]),
          (f = 0 | b),
          (l += _.adj43[c]),
          (n[r++] = 0 | o),
          (h += _.adj43[u]),
          (n[r++] = 0 | l),
          (b += _.adj43[f]),
          (n[r++] = 0 | h),
          (n[r++] = 0 | b);
      }
      0 != i &&
        ((o = t[s++] * a),
        (l = t[s++] * a),
        (o += _.adj43[0 | o]),
        (l += _.adj43[0 | l]),
        (n[r++] = 0 | o),
        (n[r++] = 0 | l));
    }
    function n(e, a, t, s) {
      var n,
        r = a,
        _ = (n = 0);
      do {
        var i = e[r++],
          l = e[r++];
        n < i && (n = i), _ < l && (_ = l);
      } while (r < t);
      switch ((n < _ && (n = _), n)) {
        case 0:
          return n;
        case 1:
          (r = a), (a = 0), (n = U.ht[1].hlen);
          do {
            (_ = 2 * e[r + 0] + e[r + 1]), (r += 2), (a += n[_]);
          } while (r < t);
          return (s.bits += a), 1;
        case 2:
        case 3:
          (r = a),
            (a = o[n - 1]),
            (n = 0),
            (_ = U.ht[a].xlen),
            (i = 2 == a ? U.table23 : U.table56);
          do {
            (l = e[r + 0] * _ + e[r + 1]), (r += 2), (n += i[l]);
          } while (r < t);
          return (
            (e = 65535 & n),
            (n >>= 16),
            n > e && ((n = e), a++),
            (s.bits += n),
            a
          );
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
          (r = a), (a = o[n - 1]), (i = _ = n = 0), (l = U.ht[a].xlen);
          var f = U.ht[a].hlen,
            h = U.ht[a + 1].hlen,
            c = U.ht[a + 2].hlen;
          do {
            var b = e[r + 0] * l + e[r + 1];
            (r += 2), (n += f[b]), (_ += h[b]), (i += c[b]);
          } while (r < t);
          return (
            (e = a),
            n > _ && ((n = _), e++),
            n > i && ((n = i), (e = a + 2)),
            (s.bits += n),
            e
          );
        default:
          if (n > w.IXMAX_VAL) return (s.bits = w.LARGE_BITS), -1;
          for (n -= 15, r = 24; 32 > r && !(U.ht[r].linmax >= n); r++);
          for (_ = r - 8; 24 > _ && !(U.ht[_].linmax >= n); _++);
          (n = _), (i = 65536 * U.ht[n].xlen + U.ht[r].xlen), (_ = 0);
          do {
            (l = e[a++]),
              (f = e[a++]),
              0 != l && (14 < l && ((l = 15), (_ += i)), (l *= 16)),
              0 != f && (14 < f && ((f = 15), (_ += i)), (l += f)),
              (_ += U.largetbl[l]);
          } while (a < t);
          return (
            (e = 65535 & _),
            (_ >>= 16),
            _ > e && ((_ = e), (n = r)),
            (s.bits += _),
            n
          );
      }
    }
    function r(e, t, s, r, _, i, o, l) {
      for (var f = t.big_values, h = 2; h < P.SBMAX_l + 1; h++) {
        var c = e.scalefac_band.l[h];
        if (c >= f) break;
        var b = _[h - 2] + t.count1bits;
        if (s.part2_3_length <= b) break;
        (b = new a(b)),
          (c = n(r, c, f, b)),
          (b = b.bits),
          s.part2_3_length <= b ||
            (s.assign(t),
            (s.part2_3_length = b),
            (s.region0_count = i[h - 2]),
            (s.region1_count = h - 2 - i[h - 2]),
            (s.table_select[0] = o[h - 2]),
            (s.table_select[1] = l[h - 2]),
            (s.table_select[2] = c));
      }
    }
    var _ = null;
    (this.qupvt = null),
      (this.setModules = function (e) {
        _ = this.qupvt = e;
      });
    var i = [
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 1],
        [1, 1],
        [1, 1],
        [1, 2],
        [2, 2],
        [2, 3],
        [2, 3],
        [3, 4],
        [3, 4],
        [3, 4],
        [4, 5],
        [4, 5],
        [4, 6],
        [5, 6],
        [5, 6],
        [5, 7],
        [6, 7],
        [6, 7],
      ],
      o = [1, 2, 5, 7, 7, 10, 10, 13, 13, 13, 13, 13, 13, 13, 13];
    (this.noquant_count_bits = function (e, t, s) {
      var r = t.l3_enc,
        _ = Math.min(576, ((t.max_nonzero_coeff + 2) >> 1) << 1);
      for (
        null != s && (s.sfb_count1 = 0);
        1 < _ && 0 == (r[_ - 1] | r[_ - 2]);
        _ -= 2
      );
      t.count1 = _;
      for (
        var i = 0, o = 0;
        3 < _ &&
        !(1 < (2147483647 & (r[_ - 1] | r[_ - 2] | r[_ - 3] | r[_ - 4])));
        _ -= 4
      ) {
        var l = 2 * (2 * (2 * r[_ - 4] + r[_ - 3]) + r[_ - 2]) + r[_ - 1];
        (i += U.t32l[l]), (o += U.t33l[l]);
      }
      if (
        ((l = i),
        (t.count1table_select = 0),
        i > o && ((l = o), (t.count1table_select = 1)),
        (t.count1bits = l),
        (t.big_values = _),
        0 == _)
      )
        return l;
      if (
        (t.block_type == P.SHORT_TYPE
          ? ((i = 3 * e.scalefac_band.s[3]),
            i > t.big_values && (i = t.big_values),
            (o = t.big_values))
          : t.block_type == P.NORM_TYPE
          ? ((i = t.region0_count = e.bv_scf[_ - 2]),
            (o = t.region1_count = e.bv_scf[_ - 1]),
            (o = e.scalefac_band.l[i + o + 2]),
            (i = e.scalefac_band.l[i + 1]),
            o < _ &&
              ((l = new a(l)),
              (t.table_select[2] = n(r, o, _, l)),
              (l = l.bits)))
          : ((t.region0_count = 7),
            (t.region1_count = P.SBMAX_l - 1 - 7 - 1),
            (i = e.scalefac_band.l[8]),
            (o = _),
            i > o && (i = o)),
        (i = Math.min(i, _)),
        (o = Math.min(o, _)),
        0 < i &&
          ((l = new a(l)), (t.table_select[0] = n(r, 0, i, l)), (l = l.bits)),
        i < o &&
          ((l = new a(l)), (t.table_select[1] = n(r, i, o, l)), (l = l.bits)),
        2 == e.use_best_huffman &&
          ((t.part2_3_length = l),
          best_huffman_divide(e, t),
          (l = t.part2_3_length)),
        null != s && t.block_type == P.NORM_TYPE)
      ) {
        for (r = 0; e.scalefac_band.l[r] < t.big_values; ) r++;
        s.sfb_count1 = r;
      }
      return l;
    }),
      (this.count_bits = function (e, a, n, r) {
        var i = n.l3_enc,
          o = w.IXMAX_VAL / _.IPOW20(n.global_gain);
        if (n.xrpow_max > o) return w.LARGE_BITS;
        o = _.IPOW20(n.global_gain);
        var l,
          f = 0,
          h = 0,
          c = 0,
          b = 0,
          u = 0,
          m = i,
          p = 0,
          d = a,
          v = 0,
          g = null != r && n.global_gain == r.global_gain,
          S = n.block_type == P.SHORT_TYPE ? 38 : 21;
        for (l = 0; l <= S; l++) {
          var R = -1;
          if (
            ((g || n.block_type == P.NORM_TYPE) &&
              (R =
                n.global_gain -
                ((n.scalefac[l] + (0 != n.preflag ? _.pretab[l] : 0)) <<
                  (n.scalefac_scale + 1)) -
                8 * n.subblock_gain[n.window[l]]),
            g && r.step[l] == R)
          )
            0 != h && (s(h, o, d, v, m, p), (h = 0)),
              0 != c && (t(c, o, d, v, m, p), (c = 0));
          else {
            var M = n.width[l];
            if (
              (f + n.width[l] > n.max_nonzero_coeff &&
                ((l = n.max_nonzero_coeff - f + 1),
                z.fill(i, n.max_nonzero_coeff, 576, 0),
                (M = l),
                0 > M && (M = 0),
                (l = S + 1)),
              0 == h && 0 == c && ((m = i), (p = u), (d = a), (v = b)),
              null != r &&
              0 < r.sfb_count1 &&
              l >= r.sfb_count1 &&
              0 < r.step[l] &&
              R >= r.step[l]
                ? (0 != h &&
                    (s(h, o, d, v, m, p),
                    (h = 0),
                    (m = i),
                    (p = u),
                    (d = a),
                    (v = b)),
                  (c += M))
                : (0 != c &&
                    (t(c, o, d, v, m, p),
                    (c = 0),
                    (m = i),
                    (p = u),
                    (d = a),
                    (v = b)),
                  (h += M)),
              0 >= M)
            ) {
              0 != c && (t(c, o, d, v, m, p), (c = 0)),
                0 != h && (s(h, o, d, v, m, p), (h = 0));
              break;
            }
          }
          l <= S && ((u += n.width[l]), (b += n.width[l]), (f += n.width[l]));
        }
        if (
          (0 != h && s(h, o, d, v, m, p),
          0 != c && t(c, o, d, v, m, p),
          0 != (2 & e.substep_shaping))
        )
          for (
            o = 0,
              S =
                0.634521682242439 / _.IPOW20(n.global_gain + n.scalefac_scale),
              f = 0;
            f < n.sfbmax;
            f++
          )
            if (((g = n.width[f]), 0 == e.pseudohalf[f])) o += g;
            else for (h = o, o += g; h < o; ++h) i[h] = a[h] >= S ? i[h] : 0;
        return this.noquant_count_bits(e, n, r);
      }),
      (this.best_huffman_divide = function (t, s) {
        var _ = new E(),
          i = s.l3_enc,
          o = e(23),
          l = e(23),
          f = e(23),
          h = e(23);
        if (s.block_type != P.SHORT_TYPE || 1 != t.mode_gr) {
          if ((_.assign(s), s.block_type == P.NORM_TYPE)) {
            for (var c = s.big_values, b = 0; 22 >= b; b++) o[b] = w.LARGE_BITS;
            for (b = 0; 16 > b; b++) {
              var u = t.scalefac_band.l[b + 1];
              if (u >= c) break;
              var m = 0,
                p = new a(m),
                d = n(i, 0, u, p);
              m = p.bits;
              for (var v = 0; 8 > v; v++) {
                var g = t.scalefac_band.l[b + v + 2];
                if (g >= c) break;
                (p = m),
                  (p = new a(p)),
                  (g = n(i, u, g, p)),
                  (p = p.bits),
                  o[b + v] > p &&
                    ((o[b + v] = p),
                    (l[b + v] = b),
                    (f[b + v] = d),
                    (h[b + v] = g));
              }
            }
            r(t, _, s, i, o, l, f, h);
          }
          if (
            ((c = _.big_values),
            !(
              0 == c ||
              1 < (i[c - 2] | i[c - 1]) ||
              ((c = s.count1 + 2), 576 < c)
            ))
          ) {
            for (_.assign(s), _.count1 = c, u = b = 0; c > _.big_values; c -= 4)
              (m = 2 * (2 * (2 * i[c - 4] + i[c - 3]) + i[c - 2]) + i[c - 1]),
                (b += U.t32l[m]),
                (u += U.t33l[m]);
            (_.big_values = c),
              (_.count1table_select = 0),
              b > u && ((b = u), (_.count1table_select = 1)),
              (_.count1bits = b),
              _.block_type == P.NORM_TYPE
                ? r(t, _, s, i, o, l, f, h)
                : ((_.part2_3_length = b),
                  (b = t.scalefac_band.l[8]),
                  b > c && (b = c),
                  0 < b &&
                    ((t = new a(_.part2_3_length)),
                    (_.table_select[0] = n(i, 0, b, t)),
                    (_.part2_3_length = t.bits)),
                  c > b &&
                    ((t = new a(_.part2_3_length)),
                    (_.table_select[1] = n(i, b, c, t)),
                    (_.part2_3_length = t.bits)),
                  s.part2_3_length > _.part2_3_length && s.assign(_));
          }
        }
      });
    var l = [1, 1, 1, 1, 8, 2, 2, 2, 4, 4, 4, 8, 8, 8, 16, 16],
      f = [1, 2, 4, 8, 1, 2, 4, 8, 2, 4, 8, 2, 4, 8, 4, 8],
      h = [0, 0, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4],
      b = [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3];
    (c.slen1_tab = h),
      (c.slen2_tab = b),
      (this.best_scalefac_store = function (e, a, t, s) {
        var n,
          r,
          i = s.tt[a][t],
          o = 0;
        for (n = r = 0; n < i.sfbmax; n++) {
          var c = i.width[n];
          for (r += c, c = -c; 0 > c && 0 == i.l3_enc[c + r]; c++);
          0 == c && (i.scalefac[n] = o = -2);
        }
        if (0 == i.scalefac_scale && 0 == i.preflag) {
          for (n = r = 0; n < i.sfbmax; n++)
            0 < i.scalefac[n] && (r |= i.scalefac[n]);
          if (0 == (1 & r) && 0 != r) {
            for (n = 0; n < i.sfbmax; n++)
              0 < i.scalefac[n] && (i.scalefac[n] >>= 1);
            i.scalefac_scale = o = 1;
          }
        }
        if (0 == i.preflag && i.block_type != P.SHORT_TYPE && 2 == e.mode_gr) {
          for (
            n = 11;
            n < P.SBPSY_l &&
            !(i.scalefac[n] < _.pretab[n] && -2 != i.scalefac[n]);
            n++
          );
          if (n == P.SBPSY_l) {
            for (n = 11; n < P.SBPSY_l; n++)
              0 < i.scalefac[n] && (i.scalefac[n] -= _.pretab[n]);
            i.preflag = o = 1;
          }
        }
        for (n = 0; 4 > n; n++) s.scfsi[t][n] = 0;
        if (
          2 == e.mode_gr &&
          1 == a &&
          s.tt[0][t].block_type != P.SHORT_TYPE &&
          s.tt[1][t].block_type != P.SHORT_TYPE
        ) {
          for (
            a = s.tt[1][t], r = s.tt[0][t], o = 0;
            o < U.scfsi_band.length - 1;
            o++
          ) {
            for (
              n = U.scfsi_band[o];
              n < U.scfsi_band[o + 1] &&
              !(r.scalefac[n] != a.scalefac[n] && 0 <= a.scalefac[n]);
              n++
            );
            if (n == U.scfsi_band[o + 1]) {
              for (n = U.scfsi_band[o]; n < U.scfsi_band[o + 1]; n++)
                a.scalefac[n] = -1;
              s.scfsi[t][o] = 1;
            }
          }
          for (n = s = t = 0; 11 > n; n++)
            -1 != a.scalefac[n] &&
              (s++, t < a.scalefac[n] && (t = a.scalefac[n]));
          for (c = r = 0; n < P.SBPSY_l; n++)
            -1 != a.scalefac[n] &&
              (c++, r < a.scalefac[n] && (r = a.scalefac[n]));
          for (o = 0; 16 > o; o++)
            t < l[o] &&
              r < f[o] &&
              ((n = h[o] * s + b[o] * c),
              a.part2_length > n &&
                ((a.part2_length = n), (a.scalefac_compress = o)));
          o = 0;
        }
        for (n = 0; n < i.sfbmax; n++)
          -2 == i.scalefac[n] && (i.scalefac[n] = 0);
        0 != o &&
          (2 == e.mode_gr
            ? this.scale_bitcount(i)
            : this.scale_bitcount_lsf(e, i));
      });
    var u = [0, 18, 36, 54, 54, 36, 54, 72, 54, 72, 90, 72, 90, 108, 108, 126],
      m = [0, 18, 36, 54, 51, 35, 53, 71, 52, 70, 88, 69, 87, 105, 104, 122],
      p = [0, 10, 20, 30, 33, 21, 31, 41, 32, 42, 52, 43, 53, 63, 64, 74];
    this.scale_bitcount = function (e) {
      var a,
        t = 0,
        s = 0,
        n = e.scalefac;
      if (e.block_type == P.SHORT_TYPE) {
        var r = u;
        0 != e.mixed_block_flag && (r = m);
      } else if (((r = p), 0 == e.preflag)) {
        for (a = 11; a < P.SBPSY_l && !(n[a] < _.pretab[a]); a++);
        if (a == P.SBPSY_l)
          for (e.preflag = 1, a = 11; a < P.SBPSY_l; a++) n[a] -= _.pretab[a];
      }
      for (a = 0; a < e.sfbdivide; a++) t < n[a] && (t = n[a]);
      for (; a < e.sfbmax; a++) s < n[a] && (s = n[a]);
      for (e.part2_length = w.LARGE_BITS, a = 0; 16 > a; a++)
        t < l[a] &&
          s < f[a] &&
          e.part2_length > r[a] &&
          ((e.part2_length = r[a]), (e.scalefac_compress = a));
      return e.part2_length == w.LARGE_BITS;
    };
    var d = [
      [15, 15, 7, 7],
      [15, 15, 7, 0],
      [7, 3, 0, 0],
      [15, 31, 31, 0],
      [7, 7, 7, 0],
      [3, 3, 0, 0],
    ];
    this.scale_bitcount_lsf = function (a, t) {
      var s,
        n,
        r,
        i,
        o = e(4),
        l = t.scalefac;
      for (a = 0 != t.preflag ? 2 : 0, r = 0; 4 > r; r++) o[r] = 0;
      if (t.block_type == P.SHORT_TYPE) {
        var f = 1,
          h = _.nr_of_sfb_block[a][f];
        for (s = i = 0; 4 > s; s++) {
          var c = h[s] / 3;
          for (r = 0; r < c; r++, i++)
            for (n = 0; 3 > n; n++)
              l[3 * i + n] > o[s] && (o[s] = l[3 * i + n]);
        }
      } else
        for (f = 0, h = _.nr_of_sfb_block[a][f], s = i = 0; 4 > s; s++)
          for (c = h[s], r = 0; r < c; r++, i++) l[i] > o[s] && (o[s] = l[i]);
      for (c = !1, s = 0; 4 > s; s++) o[s] > d[a][s] && (c = !0);
      if (!c) {
        for (t.sfb_partition_table = _.nr_of_sfb_block[a][f], s = 0; 4 > s; s++)
          t.slen[s] = v[o[s]];
        switch (
          ((f = t.slen[0]),
          (s = t.slen[1]),
          (o = t.slen[2]),
          (n = t.slen[3]),
          a)
        ) {
          case 0:
            t.scalefac_compress = ((5 * f + s) << 4) + (o << 2) + n;
            break;
          case 1:
            t.scalefac_compress = 400 + ((5 * f + s) << 2) + o;
            break;
          case 2:
            t.scalefac_compress = 500 + 3 * f + s;
            break;
          default:
            K.err.printf('intensity stereo not implemented yet\n');
        }
      }
      if (!c)
        for (s = t.part2_length = 0; 4 > s; s++)
          t.part2_length += t.slen[s] * t.sfb_partition_table[s];
      return c;
    };
    var v = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4];
    this.huffman_init = function (e) {
      for (var a = 2; 576 >= a; a += 2) {
        for (var t, s = 0; e.scalefac_band.l[++s] < a; );
        for (t = i[s][0]; e.scalefac_band.l[t + 1] > a; ) t--;
        for (
          0 > t && (t = i[s][0]), e.bv_scf[a - 2] = t, t = i[s][1];
          e.scalefac_band.l[t + e.bv_scf[a - 2] + 2] > a;

        )
          t--;
        0 > t && (t = i[s][1]), (e.bv_scf[a - 1] = t);
      }
    };
  }
  function b() {
    var e;
    (this.setModules = function (a) {
      e = a;
    }),
      (this.ResvFrameBegin = function (a, t) {
        var s = a.internal_flags,
          n = s.l3_side,
          r = e.getframebits(a);
        t.bits = (r - 8 * s.sideinfo_len) / s.mode_gr;
        var _ = 2048 * s.mode_gr - 8;
        if (320 < a.brate)
          var i =
            8 * int((1e3 * a.brate) / (a.out_samplerate / 1152) / 8 + 0.5);
        else
          (i = 11520),
            a.strict_ISO &&
              (i = 8 * int(32e4 / (a.out_samplerate / 1152) / 8 + 0.5));
        return (
          (s.ResvMax = i - r),
          s.ResvMax > _ && (s.ResvMax = _),
          (0 > s.ResvMax || a.disable_reservoir) && (s.ResvMax = 0),
          (a = t.bits * s.mode_gr + Math.min(s.ResvSize, s.ResvMax)),
          a > i && (a = i),
          (n.resvDrain_pre = 0),
          null != s.pinfo &&
            ((s.pinfo.mean_bits = t.bits / 2), (s.pinfo.resvsize = s.ResvSize)),
          a
        );
      }),
      (this.ResvMaxBits = function (e, a, t, s) {
        var n = e.internal_flags,
          r = n.ResvSize,
          _ = n.ResvMax;
        return (
          0 != s && (r += a),
          0 != (1 & n.substep_shaping) && (_ *= 0.9),
          (t.bits = a),
          10 * r > 9 * _
            ? ((s = r - (9 * _) / 10),
              (t.bits += s),
              (n.substep_shaping |= 128))
            : ((s = 0),
              (n.substep_shaping &= 127),
              e.disable_reservoir ||
                0 != (1 & n.substep_shaping) ||
                (t.bits -= 0.1 * a)),
          (e = r < (6 * n.ResvMax) / 10 ? r : (6 * n.ResvMax) / 10),
          (e -= s),
          0 > e && (e = 0),
          e
        );
      }),
      (this.ResvAdjust = function (e, a) {
        e.ResvSize -= a.part2_3_length + a.part2_length;
      }),
      (this.ResvFrameEnd = function (e, a) {
        var t,
          s = e.l3_side;
        (e.ResvSize += a * e.mode_gr),
          (a = 0),
          (s.resvDrain_post = 0),
          (s.resvDrain_pre = 0),
          0 != (t = e.ResvSize % 8) && (a += t),
          (t = e.ResvSize - a - e.ResvMax),
          0 < t && (a += t),
          (t = Math.min(8 * s.main_data_begin, a) / 8),
          (s.resvDrain_pre += 8 * t),
          (a -= 8 * t),
          (e.ResvSize -= 8 * t),
          (s.main_data_begin -= t),
          (s.resvDrain_post += a),
          (e.ResvSize -= a);
      });
  }
  function u() {
    function a(e, a, t) {
      for (; 0 < t; ) {
        if (0 == M) {
          if (((M = 8), R++, e.header[e.w_ptr].write_timing == S)) {
            var s = e;
            K.arraycopy(s.header[s.w_ptr].buf, 0, g, R, s.sideinfo_len),
              (R += s.sideinfo_len),
              (S += 8 * s.sideinfo_len),
              (s.w_ptr = (s.w_ptr + 1) & (L.MAX_HEADER_BUF - 1));
          }
          g[R] = 0;
        }
        (s = Math.min(t, M)),
          (t -= s),
          (M -= s),
          (g[R] |= (a >> t) << M),
          (S += s);
      }
    }
    function s(e, t) {
      var s,
        n = e.internal_flags;
      if (
        (8 <= t && (a(n, 76, 8), (t -= 8)),
        8 <= t && (a(n, 65, 8), (t -= 8)),
        8 <= t && (a(n, 77, 8), (t -= 8)),
        8 <= t && (a(n, 69, 8), (t -= 8)),
        32 <= t)
      ) {
        var r = d.getLameShortVersion();
        if (32 <= t)
          for (s = 0; s < r.length && 8 <= t; ++s)
            (t -= 8), a(n, r.charAt(s), 8);
      }
      for (; 1 <= t; --t)
        a(n, n.ancillary_flag, 1),
          (n.ancillary_flag ^= e.disable_reservoir ? 0 : 1);
    }
    function n(e, a, t) {
      for (var s = e.header[e.h_ptr].ptr; 0 < t; ) {
        var n = Math.min(t, 8 - (7 & s));
        (t -= n),
          (e.header[e.h_ptr].buf[s >> 3] |= (a >> t) << (8 - (7 & s) - n)),
          (s += n);
      }
      e.header[e.h_ptr].ptr = s;
    }
    function r(e, a) {
      e <<= 8;
      for (var t = 0; 8 > t; t++)
        (e <<= 1), (a <<= 1), 0 != (65536 & (a ^ e)) && (a ^= 32773);
      return a;
    }
    function _(e, t) {
      var s,
        n = U.ht[t.count1table_select + 32],
        r = 0,
        _ = t.big_values,
        i = t.big_values;
      for (s = (t.count1 - t.big_values) / 4; 0 < s; --s) {
        var o = 0,
          l = 0,
          f = t.l3_enc[_ + 0];
        0 != f && ((l += 8), 0 > t.xr[i + 0] && o++),
          (f = t.l3_enc[_ + 1]),
          0 != f && ((l += 4), (o *= 2), 0 > t.xr[i + 1] && o++),
          (f = t.l3_enc[_ + 2]),
          0 != f && ((l += 2), (o *= 2), 0 > t.xr[i + 2] && o++),
          (f = t.l3_enc[_ + 3]),
          0 != f && (l++, (o *= 2), 0 > t.xr[i + 3] && o++),
          (_ += 4),
          (i += 4),
          a(e, o + n.table[l], n.hlen[l]),
          (r += n.hlen[l]);
      }
      return r;
    }
    function i(e, t, s, n, r) {
      var _ = U.ht[t],
        i = 0;
      if (0 == t) return i;
      for (; s < n; s += 2) {
        var o = 0,
          l = 0,
          f = _.xlen,
          h = _.xlen,
          c = 0,
          b = r.l3_enc[s],
          u = r.l3_enc[s + 1];
        0 != b && (0 > r.xr[s] && c++, o--),
          15 < t &&
            (14 < b && ((c |= (b - 15) << 1), (l = f), (b = 15)),
            14 < u && ((h = u - 15), (c <<= f), (c |= h), (l += f), (u = 15)),
            (h = 16)),
          0 != u && ((c <<= 1), 0 > r.xr[s + 1] && c++, o--),
          (b = b * h + u),
          (l -= o),
          (o += _.hlen[b]),
          a(e, _.table[b], o),
          a(e, c, l),
          (i += o + l);
      }
      return i;
    }
    function o(e, a) {
      var t = 3 * e.scalefac_band.s[3];
      t > a.big_values && (t = a.big_values);
      var s = i(e, a.table_select[0], 0, t, a);
      return s + i(e, a.table_select[1], t, a.big_values, a);
    }
    function l(e, a) {
      var t = a.big_values,
        s = a.region0_count + 1,
        n = e.scalefac_band.l[s];
      s += a.region1_count + 1;
      var r = e.scalefac_band.l[s];
      return (
        n > t && (n = t),
        r > t && (r = t),
        (s = i(e, a.table_select[0], 0, n, a)),
        (s += i(e, a.table_select[1], n, r, a)),
        s + i(e, a.table_select[2], r, t, a)
      );
    }
    function h() {
      this.total = 0;
    }
    function b(e, a) {
      var t = e.internal_flags,
        s = t.w_ptr,
        n = t.h_ptr - 1;
      -1 == n && (n = L.MAX_HEADER_BUF - 1);
      var r = t.header[n].write_timing - S;
      if (((a.total = r), 0 <= r)) {
        var _ = 1 + n - s;
        n < s && (_ = 1 + n - s + L.MAX_HEADER_BUF),
          (r -= 8 * _ * t.sideinfo_len);
      }
      return (
        (e = u.getframebits(e)),
        (r += e),
        (a.total += e),
        (a.total = 0 != a.total % 8 ? 1 + a.total / 8 : a.total / 8),
        (a.total += R + 1),
        0 > r && K.err.println('strange error flushing buffer ... \n'),
        r
      );
    }
    var u = this,
      m = null,
      p = null,
      d = null,
      v = null;
    this.setModules = function (e, a, t, s) {
      (m = e), (p = a), (d = t), (v = s);
    };
    var g = null,
      S = 0,
      R = 0,
      M = 0;
    (this.getframebits = function (e) {
      var a = e.internal_flags;
      return (
        8 *
        (0 |
          ((72e3 *
            (e.version + 1) *
            (0 != a.bitrate_index
              ? U.bitrate_table[e.version][a.bitrate_index]
              : e.brate)) /
            e.out_samplerate +
            a.padding))
      );
    }),
      (this.CRC_writeheader = function (e, a) {
        var t = r(255 & a[2], 65535);
        t = r(255 & a[3], t);
        for (var s = 6; s < e.sideinfo_len; s++) t = r(255 & a[s], t);
        (a[4] = byte(t >> 8)), (a[5] = byte(255 & t));
      }),
      (this.flush_bitstream = function (e) {
        var a,
          t = e.internal_flags,
          n = t.l3_side;
        0 > (a = b(e, new h())) ||
          (s(e, a),
          (t.ResvSize = 0),
          (n.main_data_begin = 0),
          t.findReplayGain &&
            ((n = m.GetTitleGain(t.rgdata)),
            (t.RadioGain = 0 | Math.floor(10 * n + 0.5))),
          t.findPeakSample &&
            ((t.noclipGainChange =
              0 | Math.ceil(200 * Math.log10(t.PeakSample / 32767))),
            0 < t.noclipGainChange && (EQ(e.scale, 1) || EQ(e.scale, 0))
              ? (t.noclipScale = Math.floor((32767 / t.PeakSample) * 100) / 100)
              : (t.noclipScale = -1)));
      }),
      (this.add_dummy_byte = function (e, a, t) {
        e = e.internal_flags;
        for (var s; 0 < t--; ) {
          s = a;
          for (var n = 8; 0 < n; ) {
            0 == M && ((M = 8), R++, (g[R] = 0));
            var r = Math.min(n, M);
            (n -= r), (M -= r), (g[R] |= (s >> n) << M), (S += r);
          }
          for (s = 0; s < L.MAX_HEADER_BUF; ++s) e.header[s].write_timing += 8;
        }
      }),
      (this.format_bitstream = function (e) {
        var t = e.internal_flags,
          r = t.l3_side,
          i = this.getframebits(e);
        s(e, r.resvDrain_pre);
        var f,
          u,
          m = e.internal_flags,
          p = m.l3_side;
        if (
          ((m.header[m.h_ptr].ptr = 0),
          z.fill(m.header[m.h_ptr].buf, 0, m.sideinfo_len, 0),
          16e3 > e.out_samplerate ? n(m, 4094, 12) : n(m, 4095, 12),
          n(m, e.version, 1),
          n(m, 1, 2),
          n(m, e.error_protection ? 0 : 1, 1),
          n(m, m.bitrate_index, 4),
          n(m, m.samplerate_index, 2),
          n(m, m.padding, 1),
          n(m, e.extension, 1),
          n(m, e.mode.ordinal(), 2),
          n(m, m.mode_ext, 2),
          n(m, e.copyright, 1),
          n(m, e.original, 1),
          n(m, e.emphasis, 2),
          e.error_protection && n(m, 0, 16),
          1 == e.version)
        ) {
          for (
            n(m, p.main_data_begin, 9),
              2 == m.channels_out
                ? n(m, p.private_bits, 3)
                : n(m, p.private_bits, 5),
              u = 0;
            u < m.channels_out;
            u++
          )
            for (f = 0; 4 > f; f++) n(m, p.scfsi[u][f], 1);
          for (f = 0; 2 > f; f++)
            for (u = 0; u < m.channels_out; u++) {
              var d = p.tt[f][u];
              n(m, d.part2_3_length + d.part2_length, 12),
                n(m, d.big_values / 2, 9),
                n(m, d.global_gain, 8),
                n(m, d.scalefac_compress, 4),
                d.block_type != P.NORM_TYPE
                  ? (n(m, 1, 1),
                    n(m, d.block_type, 2),
                    n(m, d.mixed_block_flag, 1),
                    14 == d.table_select[0] && (d.table_select[0] = 16),
                    n(m, d.table_select[0], 5),
                    14 == d.table_select[1] && (d.table_select[1] = 16),
                    n(m, d.table_select[1], 5),
                    n(m, d.subblock_gain[0], 3),
                    n(m, d.subblock_gain[1], 3),
                    n(m, d.subblock_gain[2], 3))
                  : (n(m, 0, 1),
                    14 == d.table_select[0] && (d.table_select[0] = 16),
                    n(m, d.table_select[0], 5),
                    14 == d.table_select[1] && (d.table_select[1] = 16),
                    n(m, d.table_select[1], 5),
                    14 == d.table_select[2] && (d.table_select[2] = 16),
                    n(m, d.table_select[2], 5),
                    n(m, d.region0_count, 4),
                    n(m, d.region1_count, 3)),
                n(m, d.preflag, 1),
                n(m, d.scalefac_scale, 1),
                n(m, d.count1table_select, 1);
            }
        } else
          for (
            n(m, p.main_data_begin, 8),
              n(m, p.private_bits, m.channels_out),
              u = f = 0;
            u < m.channels_out;
            u++
          )
            (d = p.tt[f][u]),
              n(m, d.part2_3_length + d.part2_length, 12),
              n(m, d.big_values / 2, 9),
              n(m, d.global_gain, 8),
              n(m, d.scalefac_compress, 9),
              d.block_type != P.NORM_TYPE
                ? (n(m, 1, 1),
                  n(m, d.block_type, 2),
                  n(m, d.mixed_block_flag, 1),
                  14 == d.table_select[0] && (d.table_select[0] = 16),
                  n(m, d.table_select[0], 5),
                  14 == d.table_select[1] && (d.table_select[1] = 16),
                  n(m, d.table_select[1], 5),
                  n(m, d.subblock_gain[0], 3),
                  n(m, d.subblock_gain[1], 3),
                  n(m, d.subblock_gain[2], 3))
                : (n(m, 0, 1),
                  14 == d.table_select[0] && (d.table_select[0] = 16),
                  n(m, d.table_select[0], 5),
                  14 == d.table_select[1] && (d.table_select[1] = 16),
                  n(m, d.table_select[1], 5),
                  14 == d.table_select[2] && (d.table_select[2] = 16),
                  n(m, d.table_select[2], 5),
                  n(m, d.region0_count, 4),
                  n(m, d.region1_count, 3)),
              n(m, d.scalefac_scale, 1),
              n(m, d.count1table_select, 1);
        e.error_protection && CRC_writeheader(m, m.header[m.h_ptr].buf),
          (p = m.h_ptr),
          (m.h_ptr = (p + 1) & (L.MAX_HEADER_BUF - 1)),
          (m.header[m.h_ptr].write_timing = m.header[p].write_timing + i),
          m.h_ptr == m.w_ptr &&
            K.err.println('Error: MAX_HEADER_BUF too small in bitstream.c \n'),
          (m = 8 * t.sideinfo_len);
        var v = 0,
          g = e.internal_flags,
          R = g.l3_side;
        if (1 == e.version)
          for (p = 0; 2 > p; p++)
            for (u = 0; u < g.channels_out; u++) {
              var M = R.tt[p][u],
                A = c.slen1_tab[M.scalefac_compress],
                B = c.slen2_tab[M.scalefac_compress];
              for (f = d = 0; f < M.sfbdivide; f++)
                -1 != M.scalefac[f] && (a(g, M.scalefac[f], A), (d += A));
              for (; f < M.sfbmax; f++)
                -1 != M.scalefac[f] && (a(g, M.scalefac[f], B), (d += B));
              (d = M.block_type == P.SHORT_TYPE ? d + o(g, M) : d + l(g, M)),
                (d += _(g, M)),
                (v += d);
            }
        else
          for (u = p = 0; u < g.channels_out; u++) {
            M = R.tt[p][u];
            var w = 0;
            if (((B = f = d = 0), M.block_type == P.SHORT_TYPE)) {
              for (; 4 > B; B++) {
                var T = M.sfb_partition_table[B] / 3,
                  E = M.slen[B];
                for (A = 0; A < T; A++, f++)
                  a(g, Math.max(M.scalefac[3 * f], 0), E),
                    a(g, Math.max(M.scalefac[3 * f + 1], 0), E),
                    a(g, Math.max(M.scalefac[3 * f + 2], 0), E),
                    (w += 3 * E);
              }
              d += o(g, M);
            } else {
              for (; 4 > B; B++)
                for (
                  T = M.sfb_partition_table[B], E = M.slen[B], A = 0;
                  A < T;
                  A++, f++
                )
                  a(g, Math.max(M.scalefac[f], 0), E), (w += E);
              d += l(g, M);
            }
            (d += _(g, M)), (v += w + d);
          }
        if (
          ((m += v),
          s(e, r.resvDrain_post),
          (m += r.resvDrain_post),
          (r.main_data_begin += (i - m) / 8),
          b(e, new h()) != t.ResvSize &&
            K.err.println(
              'Internal buffer inconsistency. flushbits <> ResvSize',
            ),
          8 * r.main_data_begin != t.ResvSize &&
            (K.err.printf(
              'bit reservoir error: \nl3_side.main_data_begin: %d \nResvoir size:             %d \nresv drain (post)         %d \nresv drain (pre)          %d \nheader and sideinfo:      %d \ndata bits:                %d \ntotal bits:               %d (remainder: %d) \nbitsperframe:             %d \n',
              8 * r.main_data_begin,
              t.ResvSize,
              r.resvDrain_post,
              r.resvDrain_pre,
              8 * t.sideinfo_len,
              m - r.resvDrain_post - 8 * t.sideinfo_len,
              m,
              m % 8,
              i,
            ),
            K.err.println(
              'This is a fatal error.  It has several possible causes:',
            ),
            K.err.println(
              '90%%  LAME compiled with buggy version of gcc using advanced optimizations',
            ),
            K.err.println(' 9%%  Your system is overclocked'),
            K.err.println(' 1%%  bug in LAME encoding library'),
            (t.ResvSize = 8 * r.main_data_begin)),
          1e9 < S)
        ) {
          for (e = 0; e < L.MAX_HEADER_BUF; ++e) t.header[e].write_timing -= S;
          S = 0;
        }
        return 0;
      }),
      (this.copy_buffer = function (a, s, n, r, _) {
        var i = R + 1;
        if (0 >= i) return 0;
        if (0 != r && i > r) return -1;
        if (
          (K.arraycopy(g, 0, s, n, i),
          (R = -1),
          (M = 0),
          0 != _ &&
            ((r = e(1)),
            (r[0] = a.nMusicCRC),
            v.updateMusicCRC(r, s, n, i),
            (a.nMusicCRC = r[0]),
            0 < i && (a.VBR_seek_table.nBytesWritten += i),
            a.decode_on_the_fly))
        ) {
          (r = t([2, 1152])), (_ = i);
          for (var o, l = -1; 0 != l; )
            if (
              ((l = p.hip_decode1_unclipped(a.hip, s, n, _, r[0], r[1])),
              (_ = 0),
              -1 == l && (l = 0),
              0 < l)
            ) {
              if (a.findPeakSample) {
                for (o = 0; o < l; o++)
                  r[0][o] > a.PeakSample
                    ? (a.PeakSample = r[0][o])
                    : -r[0][o] > a.PeakSample && (a.PeakSample = -r[0][o]);
                if (1 < a.channels_out)
                  for (o = 0; o < l; o++)
                    r[1][o] > a.PeakSample
                      ? (a.PeakSample = r[1][o])
                      : -r[1][o] > a.PeakSample && (a.PeakSample = -r[1][o]);
              }
              if (
                a.findReplayGain &&
                m.AnalyzeSamples(
                  a.rgdata,
                  r[0],
                  0,
                  r[1],
                  0,
                  l,
                  a.channels_out,
                ) == f.GAIN_ANALYSIS_ERROR
              )
                return -6;
            }
        }
        return i;
      }),
      (this.init_bit_stream_w = function (e) {
        (g = new Int8Array(X.LAME_MAXMP3BUFFER)),
          (e.h_ptr = e.w_ptr = 0),
          (e.header[e.h_ptr].write_timing = 0),
          (R = -1),
          (S = M = 0);
      });
  }
  function m() {
    function e(e, a) {
      var t = 255 & e[a + 0];
      return (
        (t = (t << 8) | (255 & e[a + 1])),
        (t = (t << 8) | (255 & e[a + 2])),
        (t << 8) | (255 & e[a + 3])
      );
    }
    function a(e, a, t) {
      (e[a + 0] = (t >> 24) & 255),
        (e[a + 1] = (t >> 16) & 255),
        (e[a + 2] = (t >> 8) & 255),
        (e[a + 3] = 255 & t);
    }
    function t(e, a, t) {
      (e[a + 0] = (t >> 8) & 255), (e[a + 1] = 255 & t);
    }
    function s(e, a, t) {
      return 255 & ((e << a) | (t & ~(-1 << a)));
    }
    function n(e, a) {
      var t = e.internal_flags;
      (a[0] = s(a[0], 8, 255)),
        (a[1] = s(a[1], 3, 7)),
        (a[1] = s(a[1], 1, 16e3 > e.out_samplerate ? 0 : 1)),
        (a[1] = s(a[1], 1, e.version)),
        (a[1] = s(a[1], 2, 1)),
        (a[1] = s(a[1], 1, e.error_protection ? 0 : 1)),
        (a[2] = s(a[2], 4, t.bitrate_index)),
        (a[2] = s(a[2], 2, t.samplerate_index)),
        (a[2] = s(a[2], 1, 0)),
        (a[2] = s(a[2], 1, e.extension)),
        (a[3] = s(a[3], 2, e.mode.ordinal())),
        (a[3] = s(a[3], 2, t.mode_ext)),
        (a[3] = s(a[3], 1, e.copyright)),
        (a[3] = s(a[3], 1, e.original)),
        (a[3] = s(a[3], 2, e.emphasis)),
        (a[0] = 255),
        (t = 241 & a[1]);
      var n = 1 == e.version ? 128 : 16e3 > e.out_samplerate ? 32 : 64;
      e.VBR == i.vbr_off && (n = e.brate),
        (n = e.free_format
          ? 0
          : 255 & (16 * o.BitrateIndex(n, e.version, e.out_samplerate))),
        (a[1] = 1 == e.version ? 255 & (10 | t) : 255 & (2 | t)),
        (t = 13 & a[2]),
        (a[2] = 255 & (n | t));
    }
    function r(e, a) {
      return (a >> 8) ^ u[255 & (a ^ e)];
    }
    var o, l, f;
    this.setModules = function (e, a, t) {
      (o = e), (l = a), (f = t);
    };
    var h = m.NUMTOCENTRIES,
      c = m.MAXFRAMESIZE,
      b =
        h +
        4 +
        4 +
        4 +
        4 +
        4 +
        9 +
        1 +
        1 +
        8 +
        1 +
        1 +
        3 +
        1 +
        1 +
        2 +
        4 +
        2 +
        2,
      u = [
        0, 49345, 49537, 320, 49921, 960, 640, 49729, 50689, 1728, 1920, 51009,
        1280, 50625, 50305, 1088, 52225, 3264, 3456, 52545, 3840, 53185, 52865,
        3648, 2560, 51905, 52097, 2880, 51457, 2496, 2176, 51265, 55297, 6336,
        6528, 55617, 6912, 56257, 55937, 6720, 7680, 57025, 57217, 8e3, 56577,
        7616, 7296, 56385, 5120, 54465, 54657, 5440, 55041, 6080, 5760, 54849,
        53761, 4800, 4992, 54081, 4352, 53697, 53377, 4160, 61441, 12480, 12672,
        61761, 13056, 62401, 62081, 12864, 13824, 63169, 63361, 14144, 62721,
        13760, 13440, 62529, 15360, 64705, 64897, 15680, 65281, 16320, 16e3,
        65089, 64001, 15040, 15232, 64321, 14592, 63937, 63617, 14400, 10240,
        59585, 59777, 10560, 60161, 11200, 10880, 59969, 60929, 11968, 12160,
        61249, 11520, 60865, 60545, 11328, 58369, 9408, 9600, 58689, 9984,
        59329, 59009, 9792, 8704, 58049, 58241, 9024, 57601, 8640, 8320, 57409,
        40961, 24768, 24960, 41281, 25344, 41921, 41601, 25152, 26112, 42689,
        42881, 26432, 42241, 26048, 25728, 42049, 27648, 44225, 44417, 27968,
        44801, 28608, 28288, 44609, 43521, 27328, 27520, 43841, 26880, 43457,
        43137, 26688, 30720, 47297, 47489, 31040, 47873, 31680, 31360, 47681,
        48641, 32448, 32640, 48961, 32e3, 48577, 48257, 31808, 46081, 29888,
        30080, 46401, 30464, 47041, 46721, 30272, 29184, 45761, 45953, 29504,
        45313, 29120, 28800, 45121, 20480, 37057, 37249, 20800, 37633, 21440,
        21120, 37441, 38401, 22208, 22400, 38721, 21760, 38337, 38017, 21568,
        39937, 23744, 23936, 40257, 24320, 40897, 40577, 24128, 23040, 39617,
        39809, 23360, 39169, 22976, 22656, 38977, 34817, 18624, 18816, 35137,
        19200, 35777, 35457, 19008, 19968, 36545, 36737, 20288, 36097, 19904,
        19584, 35905, 17408, 33985, 34177, 17728, 34561, 18368, 18048, 34369,
        33281, 17088, 17280, 33601, 16640, 33217, 32897, 16448,
      ];
    (this.addVbrFrame = function (e) {
      var a = e.internal_flags,
        t = a.VBR_seek_table;
      if (
        ((e = U.bitrate_table[e.version][a.bitrate_index]),
        t.nVbrNumFrames++,
        (t.sum += e),
        t.seen++,
        !(t.seen < t.want) &&
          (t.pos < t.size && ((t.bag[t.pos] = t.sum), t.pos++, (t.seen = 0)),
          t.pos == t.size))
      ) {
        for (e = 1; e < t.size; e += 2) t.bag[e / 2] = t.bag[e];
        (t.want *= 2), (t.pos /= 2);
      }
    }),
      (this.getVbrTag = function (a) {
        var t = new VBRTagData(),
          s = 0;
        t.flags = 0;
        var n = (a[s + 1] >> 3) & 1,
          r = (a[s + 2] >> 2) & 3,
          _ = (a[s + 3] >> 6) & 3,
          i = (a[s + 2] >> 4) & 15;
        if (
          ((i = U.bitrate_table[n][i]),
          (t.samprate =
            14 == a[s + 1] >> 4
              ? U.samplerate_table[2][r]
              : U.samplerate_table[n][r]),
          (r = s =
            0 != n ? (3 != _ ? s + 36 : s + 21) : 3 != _ ? s + 21 : s + 13),
          !new String(a, r, 4(), null).equals('Xing') &&
            !new String(a, r, 4(), null).equals('Info'))
        )
          return null;
        if (
          ((s += 4),
          (t.hId = n),
          (r = t.flags = e(a, s)),
          (s += 4),
          0 != (1 & r) && ((t.frames = e(a, s)), (s += 4)),
          0 != (2 & r) && ((t.bytes = e(a, s)), (s += 4)),
          0 != (4 & r))
        ) {
          if (null != t.toc) for (_ = 0; _ < h; _++) t.toc[_] = a[s + _];
          s += h;
        }
        return (
          (t.vbrScale = -1),
          0 != (8 & r) && ((t.vbrScale = e(a, s)), (s += 4)),
          (t.headersize = (72e3 * (n + 1) * i) / t.samprate),
          (s += 21),
          (n = a[s + 0] << 4),
          (n += a[s + 1] >> 4),
          (i = (15 & a[s + 1]) << 8),
          (i += 255 & a[s + 2]),
          (0 > n || 3e3 < n) && (n = -1),
          (0 > i || 3e3 < i) && (i = -1),
          (t.encDelay = n),
          (t.encPadding = i),
          t
        );
      }),
      (this.InitVbrTag = function (e) {
        var a = e.internal_flags,
          t = 1 == e.version ? 128 : 16e3 > e.out_samplerate ? 32 : 64;
        e.VBR == i.vbr_off && (t = e.brate),
          (t = (72e3 * (e.version + 1) * t) / e.out_samplerate);
        var s = a.sideinfo_len + b;
        if (((a.VBR_seek_table.TotalFrameSize = t), t < s || t > c))
          e.bWriteVbrTag = !1;
        else
          for (
            a.VBR_seek_table.nVbrNumFrames = 0,
              a.VBR_seek_table.nBytesWritten = 0,
              a.VBR_seek_table.sum = 0,
              a.VBR_seek_table.seen = 0,
              a.VBR_seek_table.want = 1,
              a.VBR_seek_table.pos = 0,
              null == a.VBR_seek_table.bag &&
                ((a.VBR_seek_table.bag = new int[400]()),
                (a.VBR_seek_table.size = 400)),
              t = new Int8Array(c),
              n(e, t),
              a = a.VBR_seek_table.TotalFrameSize,
              s = 0;
            s < a;
            ++s
          )
            l.add_dummy_byte(e, 255 & t[s], 1);
      }),
      (this.updateMusicCRC = function (e, a, t, s) {
        for (var n = 0; n < s; ++n) e[0] = r(a[t + n], e[0]);
      }),
      (this.getLameTagFrame = function (e, s) {
        var i = e.internal_flags;
        if (
          !e.bWriteVbrTag ||
          i.Class_ID != X.LAME_ID ||
          0 >= i.VBR_seek_table.pos
        )
          return 0;
        if (s.length < i.VBR_seek_table.TotalFrameSize)
          return i.VBR_seek_table.TotalFrameSize;
        z.fill(s, 0, i.VBR_seek_table.TotalFrameSize, 0), n(e, s);
        var o = new Int8Array(h);
        if (e.free_format)
          for (var c = 1; c < h; ++c) o[c] = 255 & ((255 * c) / 100);
        else {
          var b = i.VBR_seek_table;
          if (!(0 >= b.pos))
            for (c = 1; c < h; ++c) {
              var u = 0 | Math.floor((c / h) * b.pos);
              u > b.pos - 1 && (u = b.pos - 1),
                (u = 0 | ((256 * b.bag[u]) / b.sum)),
                255 < u && (u = 255),
                (o[c] = 255 & u);
            }
        }
        (u = i.sideinfo_len),
          e.error_protection && (u -= 2),
          (s[u++] = 0),
          (s[u++] = 0),
          (s[u++] = 0),
          (s[u++] = 0),
          a(s, u, 15),
          (u += 4),
          a(s, u, i.VBR_seek_table.nVbrNumFrames),
          (u += 4),
          (b =
            i.VBR_seek_table.nBytesWritten + i.VBR_seek_table.TotalFrameSize),
          a(s, u, 0 | b),
          (u += 4),
          K.arraycopy(o, 0, s, u, o.length),
          (u += o.length),
          e.error_protection && l.CRC_writeheader(i, s);
        var m = 0;
        for (c = 0; c < u; c++) m = r(s[c], m);
        (o = u), (c = m);
        var p = e.internal_flags;
        (u = 0), (m = e.encoder_delay);
        var d,
          v = e.encoder_padding,
          g = 100 - 10 * e.VBR_q - e.quality,
          S = f.getLameVeryShortVersion(),
          R = [1, 5, 3, 2, 4, 0, 3],
          M =
            0 |
            (255 < e.lowpassfreq / 100 + 0.5 ? 255 : e.lowpassfreq / 100 + 0.5),
          A = 0,
          B = 0,
          w = e.internal_flags.noise_shaping,
          T = 0,
          E = 0 != (1 & e.exp_nspsytune),
          k = 0 != (2 & e.exp_nspsytune),
          y = (d = !1),
          x = e.internal_flags.nogap_total,
          P = e.internal_flags.nogap_current,
          I = e.ATHtype;
        switch (e.VBR) {
          case vbr_abr:
            var H = e.VBR_mean_bitrate_kbps;
            break;
          case vbr_off:
            H = e.brate;
            break;
          default:
            H = e.VBR_min_bitrate_kbps;
        }
        switch (
          ((R = 0 + (e.VBR.ordinal() < R.length ? R[e.VBR.ordinal()] : 0)),
          p.findReplayGain &&
            (510 < p.RadioGain && (p.RadioGain = 510),
            -510 > p.RadioGain && (p.RadioGain = -510),
            (B = 11264),
            (B = 0 <= p.RadioGain ? B | p.RadioGain : 512 | B | -p.RadioGain)),
          p.findPeakSample &&
            (A = Math.abs(
              0 | ((p.PeakSample / 32767) * Math.pow(2, 23) + 0.5),
            )),
          -1 != x && (0 < P && (y = !0), P < x - 1 && (d = !0)),
          (E =
            I +
            ((E ? 1 : 0) << 4) +
            ((k ? 1 : 0) << 5) +
            ((d ? 1 : 0) << 6) +
            ((y ? 1 : 0) << 7)),
          0 > g && (g = 0),
          e.mode)
        ) {
          case MONO:
            k = 0;
            break;
          case STEREO:
            k = 1;
            break;
          case DUAL_CHANNEL:
            k = 2;
            break;
          case JOINT_STEREO:
            k = e.force_ms ? 4 : 3;
            break;
          default:
            k = 7;
        }
        for (
          d =
            32e3 >= e.in_samplerate
              ? 0
              : 48e3 == e.in_samplerate
              ? 2
              : 48e3 < e.in_samplerate
              ? 3
              : 1,
            (e.short_blocks == _.short_block_forced ||
              e.short_blocks == _.short_block_dispensed ||
              (-1 == e.lowpassfreq && -1 == e.highpassfreq) ||
              e.scale_left < e.scale_right ||
              e.scale_left > e.scale_right ||
              (e.disable_reservoir && 320 > e.brate) ||
              e.noATH ||
              e.ATHonly ||
              0 == I ||
              32e3 >= e.in_samplerate) &&
              (T = 1),
            w = w + (k << 2) + (T << 5) + (d << 6),
            p = p.nMusicCRC,
            a(s, o + u, g),
            u += 4,
            g = 0;
          9 > g;
          g++
        )
          s[o + u + g] = 255 & S.charAt(g);
        for (
          u += 9,
            s[o + u] = 255 & R,
            u++,
            s[o + u] = 255 & M,
            u++,
            a(s, o + u, A),
            u += 4,
            t(s, o + u, B),
            u += 2,
            t(s, o + u, 0),
            u += 2,
            s[o + u] = 255 & E,
            u++,
            s[o + u] = 255 <= H ? 255 : 255 & H,
            u++,
            s[o + u] = 255 & (m >> 4),
            s[o + u + 1] = 255 & ((m << 4) + (v >> 8)),
            s[o + u + 2] = 255 & v,
            u += 3,
            s[o + u] = 255 & w,
            u++,
            s[o + u++] = 0,
            t(s, o + u, e.preset),
            u += 2,
            a(s, o + u, b),
            u += 4,
            t(s, o + u, p),
            u += 2,
            e = 0;
          e < u;
          e++
        )
          c = r(s[o + e], c);
        return t(s, o + u, c), i.VBR_seek_table.TotalFrameSize;
      }),
      (this.putVbrTag = function (e, a) {
        if (0 >= e.internal_flags.VBR_seek_table.pos) return -1;
        if ((a.seek(a.length()), 0 == a.length())) return -1;
        a.seek(0);
        var t = new Int8Array(10);
        return (
          a.readFully(t),
          (t = new String(t, 'ISO-8859-1').startsWith('ID3')
            ? 0
            : (((127 & t[6]) << 21) |
                ((127 & t[7]) << 14) |
                ((127 & t[8]) << 7) |
                (127 & t[9])) +
              t.length),
          a.seek(t),
          (t = new Int8Array(c)),
          (e = getLameTagFrame(e, t)),
          e > t.length ? -1 : (1 > e || a.write(t, 0, e), 0)
        );
      });
  }
  function p(e, a, t, s) {
    (this.xlen = e), (this.linmax = a), (this.table = t), (this.hlen = s);
  }
  function d(e) {
    this.bits = e;
  }
  function v() {
    this.setModules = function (e, a) {};
  }
  function g() {
    this.bits =
      this.over_SSD =
      this.over_count =
      this.max_noise =
      this.tot_noise =
      this.over_noise =
        0;
  }
  function S() {
    (this.scale_right =
      this.scale_left =
      this.scale =
      this.out_samplerate =
      this.in_samplerate =
      this.num_channels =
      this.num_samples =
      this.class_id =
        0),
      (this.decode_only = this.bWriteVbrTag = this.analysis = !1),
      (this.quality = 0),
      (this.mode = o.STEREO),
      (this.write_id3tag_automatic =
        this.decode_on_the_fly =
        this.findReplayGain =
        this.free_format =
        this.force_ms =
          !1),
      (this.error_protection =
        this.emphasis =
        this.extension =
        this.original =
        this.copyright =
        this.compression_ratio =
        this.brate =
          0),
      (this.disable_reservoir = this.strict_ISO = !1),
      (this.quant_comp_short = this.quant_comp = 0),
      (this.experimentalY = !1),
      (this.preset = this.exp_nspsytune = this.experimentalZ = 0),
      (this.VBR = null),
      (this.maskingadjust_short =
        this.maskingadjust =
        this.highpasswidth =
        this.lowpasswidth =
        this.highpassfreq =
        this.lowpassfreq =
        this.VBR_hard_min =
        this.VBR_max_bitrate_kbps =
        this.VBR_min_bitrate_kbps =
        this.VBR_mean_bitrate_kbps =
        this.VBR_q =
        this.VBR_q_frac =
          0),
      (this.noATH = this.ATHshort = this.ATHonly = !1),
      (this.athaa_sensitivity =
        this.athaa_loudapprox =
        this.athaa_type =
        this.ATHlower =
        this.ATHcurve =
        this.ATHtype =
          0),
      (this.short_blocks = null),
      (this.useTemporal = !1),
      (this.msfix = this.interChRatio = 0),
      (this.tune = !1),
      (this.lame_allocated_gfp =
        this.frameNum =
        this.framesize =
        this.encoder_padding =
        this.encoder_delay =
        this.version =
        this.tune_value_a =
          0),
      (this.internal_flags = null);
  }
  function R() {
    (this.linprebuf = a(2 * f.MAX_ORDER)),
      (this.linpre = 0),
      (this.lstepbuf = a(f.MAX_SAMPLES_PER_WINDOW + f.MAX_ORDER)),
      (this.lstep = 0),
      (this.loutbuf = a(f.MAX_SAMPLES_PER_WINDOW + f.MAX_ORDER)),
      (this.lout = 0),
      (this.rinprebuf = a(2 * f.MAX_ORDER)),
      (this.rinpre = 0),
      (this.rstepbuf = a(f.MAX_SAMPLES_PER_WINDOW + f.MAX_ORDER)),
      (this.rstep = 0),
      (this.routbuf = a(f.MAX_SAMPLES_PER_WINDOW + f.MAX_ORDER)),
      (this.first =
        this.freqindex =
        this.rsum =
        this.lsum =
        this.totsamp =
        this.sampleWindow =
        this.rout =
          0),
      (this.A = e(0 | (f.STEPS_per_dB * f.MAX_dB))),
      (this.B = e(0 | (f.STEPS_per_dB * f.MAX_dB)));
  }
  function M(t) {
    (this.quantize = t),
      (this.iteration_loop = function (t, s, n, r) {
        var _ = t.internal_flags,
          i = a(W.SFBMAX),
          o = a(576),
          l = e(2),
          f = _.l3_side,
          h = new d(0);
        this.quantize.rv.ResvFrameBegin(t, h), (h = h.bits);
        for (var c = 0; c < _.mode_gr; c++) {
          var b = this.quantize.qupvt.on_pe(t, s, l, h, c, c);
          for (
            _.mode_ext == P.MPG_MD_MS_LR &&
              (this.quantize.ms_convert(_.l3_side, c),
              this.quantize.qupvt.reduce_side(l, n[c], h, b)),
              b = 0;
            b < _.channels_out;
            b++
          ) {
            var u = f.tt[c][b];
            if (u.block_type != P.SHORT_TYPE) {
              var m = 0;
              m = _.PSY.mask_adjust - m;
            } else (m = 0), (m = _.PSY.mask_adjust_short - m);
            (_.masking_lower = Math.pow(10, 0.1 * m)),
              this.quantize.init_outer_loop(_, u),
              this.quantize.init_xrpow(_, u, o) &&
                (this.quantize.qupvt.calc_xmin(t, r[c][b], u, i),
                this.quantize.outer_loop(t, u, i, o, b, l[b])),
              this.quantize.iteration_finish_one(_, c, b);
          }
        }
        this.quantize.rv.ResvFrameEnd(_, h);
      });
  }
  function A() {
    (this.floor =
      this.decay =
      this.adjustLimit =
      this.adjust =
      this.aaSensitivityP =
      this.useAdjust =
        0),
      (this.l = a(P.SBMAX_l)),
      (this.s = a(P.SBMAX_s)),
      (this.psfb21 = a(P.PSFB21)),
      (this.psfb12 = a(P.PSFB12)),
      (this.cb_l = a(P.CBANDS)),
      (this.cb_s = a(P.CBANDS)),
      (this.eql_w = a(P.BLKSIZE / 2));
  }
  function B(a, t, s, n) {
    (this.l = e(1 + P.SBMAX_l)),
      (this.s = e(1 + P.SBMAX_s)),
      (this.psfb21 = e(1 + P.PSFB21)),
      (this.psfb12 = e(1 + P.PSFB12));
    var r = this.l,
      _ = this.s;
    4 == arguments.length &&
      ((this.arrL = arguments[0]),
      (this.arrS = arguments[1]),
      (this.arr21 = arguments[2]),
      (this.arr12 = arguments[3]),
      K.arraycopy(
        this.arrL,
        0,
        r,
        0,
        Math.min(this.arrL.length, this.l.length),
      ),
      K.arraycopy(
        this.arrS,
        0,
        _,
        0,
        Math.min(this.arrS.length, this.s.length),
      ),
      K.arraycopy(
        this.arr21,
        0,
        this.psfb21,
        0,
        Math.min(this.arr21.length, this.psfb21.length),
      ),
      K.arraycopy(
        this.arr12,
        0,
        this.psfb12,
        0,
        Math.min(this.arr12.length, this.psfb12.length),
      ));
  }
  function w() {
    function t(e, a) {
      return (
        (a = _.ATHformula(a, e)), Math.pow(10, (a - 100) / 10 + e.ATHlower)
      );
    }
    function s(e) {
      this.s = e;
    }
    var n = null,
      r = null,
      _ = null;
    (this.setModules = function (e, a, t) {
      (n = e), (r = a), (_ = t);
    }),
      (this.IPOW20 = function (e) {
        return b[e];
      });
    var o = w.IXMAX_VAL + 2,
      l = w.Q_MAX,
      f = w.Q_MAX2;
    this.nr_of_sfb_block = [
      [
        [6, 5, 5, 5],
        [9, 9, 9, 9],
        [6, 9, 9, 9],
      ],
      [
        [6, 5, 7, 3],
        [9, 9, 12, 6],
        [6, 9, 12, 6],
      ],
      [
        [11, 10, 0, 0],
        [18, 18, 0, 0],
        [15, 18, 0, 0],
      ],
      [
        [7, 7, 7, 0],
        [12, 12, 12, 0],
        [6, 15, 12, 0],
      ],
      [
        [6, 6, 6, 3],
        [12, 9, 9, 6],
        [6, 12, 9, 6],
      ],
      [
        [8, 8, 5, 0],
        [15, 12, 9, 0],
        [6, 18, 9, 0],
      ],
    ];
    var h = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 3, 2, 0];
    (this.pretab = h),
      (this.sfBandIndex = [
        new B(
          [
            0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200,
            238, 284, 336, 396, 464, 522, 576,
          ],
          [0, 4, 8, 12, 18, 24, 32, 42, 56, 74, 100, 132, 174, 192],
          [0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0],
        ),
        new B(
          [
            0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 114, 136, 162, 194,
            232, 278, 332, 394, 464, 540, 576,
          ],
          [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 136, 180, 192],
          [0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0],
        ),
        new B(
          [
            0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200,
            238, 284, 336, 396, 464, 522, 576,
          ],
          [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192],
          [0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0],
        ),
        new B(
          [
            0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 52, 62, 74, 90, 110, 134, 162,
            196, 238, 288, 342, 418, 576,
          ],
          [0, 4, 8, 12, 16, 22, 30, 40, 52, 66, 84, 106, 136, 192],
          [0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0],
        ),
        new B(
          [
            0, 4, 8, 12, 16, 20, 24, 30, 36, 42, 50, 60, 72, 88, 106, 128, 156,
            190, 230, 276, 330, 384, 576,
          ],
          [0, 4, 8, 12, 16, 22, 28, 38, 50, 64, 80, 100, 126, 192],
          [0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0],
        ),
        new B(
          [
            0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 54, 66, 82, 102, 126, 156, 194,
            240, 296, 364, 448, 550, 576,
          ],
          [0, 4, 8, 12, 16, 22, 30, 42, 58, 78, 104, 138, 180, 192],
          [0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0],
        ),
        new B(
          [
            0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200,
            238, 284, 336, 396, 464, 522, 576,
          ],
          [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192],
          [0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0],
        ),
        new B(
          [
            0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200,
            238, 284, 336, 396, 464, 522, 576,
          ],
          [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192],
          [0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0],
        ),
        new B(
          [
            0, 12, 24, 36, 48, 60, 72, 88, 108, 132, 160, 192, 232, 280, 336,
            400, 476, 566, 568, 570, 572, 574, 576,
          ],
          [0, 8, 16, 24, 36, 52, 72, 96, 124, 160, 162, 164, 166, 192],
          [0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0],
        ),
      ]);
    var c = a(l + f + 1),
      b = a(l),
      m = a(o),
      p = a(o);
    (this.adj43 = p),
      (this.iteration_init = function (e) {
        var a = e.internal_flags,
          s = a.l3_side;
        if (0 == a.iteration_init_init) {
          (a.iteration_init_init = 1),
            (s.main_data_begin = 0),
            (s = e.internal_flags.ATH.l);
          for (
            var r = e.internal_flags.ATH.psfb21,
              _ = e.internal_flags.ATH.s,
              i = e.internal_flags.ATH.psfb12,
              h = e.internal_flags,
              u = e.out_samplerate,
              d = 0;
            d < P.SBMAX_l;
            d++
          ) {
            var v = h.scalefac_band.l[d],
              g = h.scalefac_band.l[d + 1];
            for (s[d] = Q.MAX_VALUE; v < g; v++) {
              var S = (v * u) / 1152;
              (S = t(e, S)), (s[d] = Math.min(s[d], S));
            }
          }
          for (d = 0; d < P.PSFB21; d++)
            for (
              v = h.scalefac_band.psfb21[d],
                g = h.scalefac_band.psfb21[d + 1],
                r[d] = Q.MAX_VALUE;
              v < g;
              v++
            )
              (S = (v * u) / 1152), (S = t(e, S)), (r[d] = Math.min(r[d], S));
          for (d = 0; d < P.SBMAX_s; d++) {
            for (
              v = h.scalefac_band.s[d],
                g = h.scalefac_band.s[d + 1],
                _[d] = Q.MAX_VALUE;
              v < g;
              v++
            )
              (S = (v * u) / 384), (S = t(e, S)), (_[d] = Math.min(_[d], S));
            _[d] *= h.scalefac_band.s[d + 1] - h.scalefac_band.s[d];
          }
          for (d = 0; d < P.PSFB12; d++) {
            for (
              v = h.scalefac_band.psfb12[d],
                g = h.scalefac_band.psfb12[d + 1],
                i[d] = Q.MAX_VALUE;
              v < g;
              v++
            )
              (S = (v * u) / 384), (S = t(e, S)), (i[d] = Math.min(i[d], S));
            i[d] *= h.scalefac_band.s[13] - h.scalefac_band.s[12];
          }
          if (e.noATH) {
            for (d = 0; d < P.SBMAX_l; d++) s[d] = 1e-20;
            for (d = 0; d < P.PSFB21; d++) r[d] = 1e-20;
            for (d = 0; d < P.SBMAX_s; d++) _[d] = 1e-20;
            for (d = 0; d < P.PSFB12; d++) i[d] = 1e-20;
          }
          for (
            h.ATH.floor = 10 * Math.log10(t(e, -1)), m[0] = 0, s = 1;
            s < o;
            s++
          )
            m[s] = Math.pow(s, 4 / 3);
          for (s = 0; s < o - 1; s++)
            p[s] = s + 1 - Math.pow(0.5 * (m[s] + m[s + 1]), 0.75);
          for (p[s] = 0.5, s = 0; s < l; s++)
            b[s] = Math.pow(2, -0.1875 * (s - 210));
          for (s = 0; s <= l + f; s++) c[s] = Math.pow(2, 0.25 * (s - 210 - f));
          for (
            n.huffman_init(a),
              s = (e.exp_nspsytune >> 2) & 63,
              32 <= s && (s -= 64),
              r = Math.pow(10, s / 4 / 10),
              s = (e.exp_nspsytune >> 8) & 63,
              32 <= s && (s -= 64),
              _ = Math.pow(10, s / 4 / 10),
              s = (e.exp_nspsytune >> 14) & 63,
              32 <= s && (s -= 64),
              i = Math.pow(10, s / 4 / 10),
              s = (e.exp_nspsytune >> 20) & 63,
              32 <= s && (s -= 64),
              e = i * Math.pow(10, s / 4 / 10),
              s = 0;
            s < P.SBMAX_l;
            s++
          )
            (h = 6 >= s ? r : 13 >= s ? _ : 20 >= s ? i : e),
              (a.nsPsy.longfact[s] = h);
          for (s = 0; s < P.SBMAX_s; s++)
            (h = 5 >= s ? r : 10 >= s ? _ : 11 >= s ? i : e),
              (a.nsPsy.shortfact[s] = h);
        }
      }),
      (this.on_pe = function (a, t, s, n, _, i) {
        var o,
          l = a.internal_flags,
          f = 0,
          h = e(2);
        (f = new d(f)), (a = r.ResvMaxBits(a, n, f, i)), (f = f.bits);
        var c = f + a;
        for (
          c > L.MAX_BITS_PER_GRANULE && (c = L.MAX_BITS_PER_GRANULE), o = i = 0;
          o < l.channels_out;
          ++o
        )
          (s[o] = Math.min(L.MAX_BITS_PER_CHANNEL, f / l.channels_out)),
            (h[o] = 0 | ((s[o] * t[_][o]) / 700 - s[o])),
            h[o] > (3 * n) / 4 && (h[o] = (3 * n) / 4),
            0 > h[o] && (h[o] = 0),
            h[o] + s[o] > L.MAX_BITS_PER_CHANNEL &&
              (h[o] = Math.max(0, L.MAX_BITS_PER_CHANNEL - s[o])),
            (i += h[o]);
        if (i > a) for (o = 0; o < l.channels_out; ++o) h[o] = (a * h[o]) / i;
        for (o = 0; o < l.channels_out; ++o) (s[o] += h[o]), (a -= h[o]);
        for (o = i = 0; o < l.channels_out; ++o) i += s[o];
        if (i > L.MAX_BITS_PER_GRANULE)
          for (o = 0; o < l.channels_out; ++o)
            (s[o] *= L.MAX_BITS_PER_GRANULE), (s[o] /= i);
        return c;
      }),
      (this.reduce_side = function (e, a, t, s) {
        (a = (0.33 * (0.5 - a)) / 0.5),
          0 > a && (a = 0),
          0.5 < a && (a = 0.5),
          (a = 0 | (0.5 * a * (e[0] + e[1]))),
          a > L.MAX_BITS_PER_CHANNEL - e[0] &&
            (a = L.MAX_BITS_PER_CHANNEL - e[0]),
          0 > a && (a = 0),
          125 <= e[1] &&
            (125 < e[1] - a
              ? (e[0] < t && (e[0] += a), (e[1] -= a))
              : ((e[0] += e[1] - 125), (e[1] = 125))),
          (a = e[0] + e[1]),
          a > s && ((e[0] = (s * e[0]) / a), (e[1] = (s * e[1]) / a));
      }),
      (this.athAdjust = function (e, a, t) {
        (a = Z.FAST_LOG10_X(a, 10)), (e *= e);
        var s = 0;
        return (
          (a -= t),
          1e-20 < e && (s = 1 + Z.FAST_LOG10_X(e, 10 / 90.30873362)),
          0 > s && (s = 0),
          Math.pow(10, 0.1 * (a * s + (t + 90.30873362 - 94.82444863)))
        );
      }),
      (this.calc_xmin = function (e, a, t, s) {
        var n,
          r = 0,
          _ = e.internal_flags,
          o = 0,
          l = 0,
          f = _.ATH,
          h = t.xr,
          c = e.VBR == i.vbr_mtrh ? 1 : 0,
          b = _.masking_lower;
        for (
          (e.VBR != i.vbr_mtrh && e.VBR != i.vbr_mt) || (b = 1), n = 0;
          n < t.psy_lmax;
          n++
        ) {
          var m =
              e.VBR == i.vbr_rh || e.VBR == i.vbr_mtrh
                ? athAdjust(f.adjust, f.l[n], f.floor)
                : f.adjust * f.l[n],
            p = t.width[n],
            d = m / p,
            v = 2220446049250313e-31,
            g = p >> 1,
            S = 0;
          do {
            var R = h[o] * h[o];
            (S += R),
              (v += R < d ? R : d),
              o++,
              (R = h[o] * h[o]),
              (S += R),
              (v += R < d ? R : d),
              o++;
          } while (0 < --g);
          S > m && l++,
            n == P.SBPSY_l && ((d = m * _.nsPsy.longfact[n]), v < d && (v = d)),
            0 != c && (m = v),
            e.ATHonly ||
              ((v = a.en.l[n]),
              0 < v &&
                ((d = (S * a.thm.l[n] * b) / v),
                0 != c && (d *= _.nsPsy.longfact[n]),
                m < d && (m = d))),
            (s[r++] = 0 != c ? m : m * _.nsPsy.longfact[n]);
        }
        if (((S = 575), t.block_type != P.SHORT_TYPE))
          for (m = 576; 0 != m-- && u.EQ(h[m], 0); ) S = m;
        t.max_nonzero_coeff = S;
        for (var M = t.sfb_smin; n < t.psymax; M++, n += 3) {
          var A,
            B =
              e.VBR == i.vbr_rh || e.VBR == i.vbr_mtrh
                ? athAdjust(f.adjust, f.s[M], f.floor)
                : f.adjust * f.s[M];
          for (p = t.width[n], A = 0; 3 > A; A++) {
            (S = 0), (g = p >> 1), (d = B / p), (v = 2220446049250313e-31);
            do {
              (R = h[o] * h[o]),
                (S += R),
                (v += R < d ? R : d),
                o++,
                (R = h[o] * h[o]),
                (S += R),
                (v += R < d ? R : d),
                o++;
            } while (0 < --g);
            S > B && l++,
              M == P.SBPSY_s &&
                ((d = B * _.nsPsy.shortfact[M]), v < d && (v = d)),
              (m = 0 != c ? v : B),
              e.ATHonly ||
                e.ATHshort ||
                ((v = a.en.s[M][A]),
                0 < v &&
                  ((d = (S * a.thm.s[M][A] * b) / v),
                  0 != c && (d *= _.nsPsy.shortfact[M]),
                  m < d && (m = d))),
              (s[r++] = 0 != c ? m : m * _.nsPsy.shortfact[M]);
          }
          e.useTemporal &&
            (s[r - 3] > s[r - 3 + 1] &&
              (s[r - 3 + 1] += (s[r - 3] - s[r - 3 + 1]) * _.decay),
            s[r - 3 + 1] > s[r - 3 + 2] &&
              (s[r - 3 + 2] += (s[r - 3 + 1] - s[r - 3 + 2]) * _.decay));
        }
        return l;
      }),
      (this.calc_noise_core = function (e, t, s, n) {
        var r = 0,
          _ = t.s,
          i = e.l3_enc;
        if (_ > e.count1)
          for (; 0 != s--; ) {
            var o = e.xr[_];
            _++, (r += o * o), (o = e.xr[_]), _++, (r += o * o);
          }
        else if (_ > e.big_values) {
          var l = a(2);
          for (l[0] = 0, l[1] = n; 0 != s--; )
            (o = Math.abs(e.xr[_]) - l[i[_]]),
              _++,
              (r += o * o),
              (o = Math.abs(e.xr[_]) - l[i[_]]),
              _++,
              (r += o * o);
        } else
          for (; 0 != s--; )
            (o = Math.abs(e.xr[_]) - m[i[_]] * n),
              _++,
              (r += o * o),
              (o = Math.abs(e.xr[_]) - m[i[_]] * n),
              _++,
              (r += o * o);
        return (t.s = _), r;
      }),
      (this.calc_noise = function (e, a, t, n, r) {
        var _,
          i = 0,
          o = 0,
          l = 0,
          f = 0,
          b = 0,
          u = -20,
          m = 0,
          p = e.scalefac,
          d = 0;
        for (_ = n.over_SSD = 0; _ < e.psymax; _++) {
          var v =
            e.global_gain -
            ((p[d++] + (0 != e.preflag ? h[_] : 0)) << (e.scalefac_scale + 1)) -
            8 * e.subblock_gain[e.window[_]];
          if (null != r && r.step[_] == v) {
            var g = r.noise[_];
            (m += e.width[_]), (t[i++] = g / a[o++]), (g = r.noise_log[_]);
          } else {
            g = c[v + w.Q_MAX2];
            var S = e.width[_] >> 1;
            m + e.width[_] > e.max_nonzero_coeff &&
              ((S = e.max_nonzero_coeff - m + 1), (S = 0 < S ? S >> 1 : 0)),
              (m = new s(m)),
              (g = this.calc_noise_core(e, m, S, g)),
              (m = m.s),
              null != r && ((r.step[_] = v), (r.noise[_] = g)),
              (g = t[i++] = g / a[o++]),
              (g = Z.FAST_LOG10(Math.max(g, 1e-20))),
              null != r && (r.noise_log[_] = g);
          }
          null != r && (r.global_gain = e.global_gain),
            (b += g),
            0 < g &&
              ((v = Math.max(0 | (10 * g + 0.5), 1)),
              (n.over_SSD += v * v),
              l++,
              (f += g)),
            (u = Math.max(u, g));
        }
        return (
          (n.over_count = l),
          (n.tot_noise = b),
          (n.over_noise = f),
          (n.max_noise = u),
          l
        );
      }),
      (this.set_pinfo = function (e, t, s, n, r) {
        var _,
          i,
          o = e.internal_flags,
          l = 0 == t.scalefac_scale ? 0.5 : 1,
          f = t.scalefac,
          c = a(W.SFBMAX),
          b = a(W.SFBMAX),
          u = new g();
        calc_xmin(e, s, t, c), calc_noise(t, c, b, u, null);
        var m = 0,
          p = t.sfb_lmax;
        for (
          t.block_type != P.SHORT_TYPE && 0 == t.mixed_block_flag && (p = 22),
            _ = 0;
          _ < p;
          _++
        ) {
          var d = o.scalefac_band.l[_],
            v = o.scalefac_band.l[_ + 1],
            S = v - d;
          for (i = 0; m < v; m++) i += t.xr[m] * t.xr[m];
          i /= S;
          var R = 1e15;
          (o.pinfo.en[n][r][_] = R * i),
            (o.pinfo.xfsf[n][r][_] = (R * c[_] * b[_]) / S),
            (i = 0 < s.en.l[_] && !e.ATHonly ? i / s.en.l[_] : 0),
            (o.pinfo.thr[n][r][_] = R * Math.max(i * s.thm.l[_], o.ATH.l[_])),
            (o.pinfo.LAMEsfb[n][r][_] = 0),
            0 != t.preflag && 11 <= _ && (o.pinfo.LAMEsfb[n][r][_] = -l * h[_]),
            _ < P.SBPSY_l && (o.pinfo.LAMEsfb[n][r][_] -= l * f[_]);
        }
        if (t.block_type == P.SHORT_TYPE)
          for (p = _, _ = t.sfb_smin; _ < P.SBMAX_s; _++) {
            (d = o.scalefac_band.s[_]),
              (v = o.scalefac_band.s[_ + 1]),
              (S = v - d);
            for (var M = 0; 3 > M; M++) {
              for (i = 0, R = d; R < v; R++) (i += t.xr[m] * t.xr[m]), m++;
              (i = Math.max(i / S, 1e-20)),
                (R = 1e15),
                (o.pinfo.en_s[n][r][3 * _ + M] = R * i),
                (o.pinfo.xfsf_s[n][r][3 * _ + M] = (R * c[p] * b[p]) / S),
                (i = 0 < s.en.s[_][M] ? i / s.en.s[_][M] : 0),
                (e.ATHonly || e.ATHshort) && (i = 0),
                (o.pinfo.thr_s[n][r][3 * _ + M] =
                  R * Math.max(i * s.thm.s[_][M], o.ATH.s[_])),
                (o.pinfo.LAMEsfb_s[n][r][3 * _ + M] = -2 * t.subblock_gain[M]),
                _ < P.SBPSY_s &&
                  (o.pinfo.LAMEsfb_s[n][r][3 * _ + M] -= l * f[p]),
                p++;
            }
          }
        (o.pinfo.LAMEqss[n][r] = t.global_gain),
          (o.pinfo.LAMEmainbits[n][r] = t.part2_3_length + t.part2_length),
          (o.pinfo.LAMEsfbits[n][r] = t.part2_length),
          (o.pinfo.over[n][r] = u.over_count),
          (o.pinfo.max_noise[n][r] = 10 * u.max_noise),
          (o.pinfo.over_noise[n][r] = 10 * u.over_noise),
          (o.pinfo.tot_noise[n][r] = 10 * u.tot_noise),
          (o.pinfo.over_SSD[n][r] = u.over_SSD);
      });
  }
  function T() {
    (this.sfb_count1 = this.global_gain = 0),
      (this.step = e(39)),
      (this.noise = a(39)),
      (this.noise_log = a(39));
  }
  function E() {
    (this.xr = a(576)),
      (this.l3_enc = e(576)),
      (this.scalefac = e(W.SFBMAX)),
      (this.mixed_block_flag =
        this.block_type =
        this.scalefac_compress =
        this.global_gain =
        this.count1 =
        this.big_values =
        this.part2_3_length =
        this.xrpow_max =
          0),
      (this.table_select = e(3)),
      (this.subblock_gain = e(4)),
      (this.sfbdivide =
        this.psymax =
        this.sfbmax =
        this.psy_lmax =
        this.sfb_smin =
        this.sfb_lmax =
        this.part2_length =
        this.count1table_select =
        this.scalefac_scale =
        this.preflag =
        this.region1_count =
        this.region0_count =
          0),
      (this.width = e(W.SFBMAX)),
      (this.window = e(W.SFBMAX)),
      (this.count1bits = 0),
      (this.sfb_partition_table = null),
      (this.slen = e(4)),
      (this.max_nonzero_coeff = 0);
    var t = this;
    this.assign = function (e) {
      (t.xr = new Float32Array(e.xr)),
        (t.l3_enc = new Int32Array(e.l3_enc)),
        (t.scalefac = new Int32Array(e.scalefac)),
        (t.xrpow_max = e.xrpow_max),
        (t.part2_3_length = e.part2_3_length),
        (t.big_values = e.big_values),
        (t.count1 = e.count1),
        (t.global_gain = e.global_gain),
        (t.scalefac_compress = e.scalefac_compress),
        (t.block_type = e.block_type),
        (t.mixed_block_flag = e.mixed_block_flag),
        (t.table_select = new Int32Array(e.table_select)),
        (t.subblock_gain = new Int32Array(e.subblock_gain)),
        (t.region0_count = e.region0_count),
        (t.region1_count = e.region1_count),
        (t.preflag = e.preflag),
        (t.scalefac_scale = e.scalefac_scale),
        (t.count1table_select = e.count1table_select),
        (t.part2_length = e.part2_length),
        (t.sfb_lmax = e.sfb_lmax),
        (t.sfb_smin = e.sfb_smin),
        (t.psy_lmax = e.psy_lmax),
        (t.sfbmax = e.sfbmax),
        (t.psymax = e.psymax),
        (t.sfbdivide = e.sfbdivide),
        (t.width = new Int32Array(e.width)),
        (t.window = new Int32Array(e.window)),
        (t.count1bits = e.count1bits),
        (t.sfb_partition_table = e.sfb_partition_table.slice(0)),
        (t.slen = new Int32Array(e.slen)),
        (t.max_nonzero_coeff = e.max_nonzero_coeff);
    };
  }
  function k() {
    function e(e) {
      this.ordinal = e;
    }
    function t(e) {
      for (var a = 0; a < e.sfbmax; a++)
        if (0 == e.scalefac[a] + e.subblock_gain[e.window[a]]) return !1;
      return !0;
    }
    var s, n;
    (this.rv = null), (this.qupvt = null);
    var r,
      _,
      o = new v();
    (this.setModules = function (e, a, t, i) {
      (s = e),
        (this.rv = n = a),
        (this.qupvt = r = t),
        (_ = i),
        o.setModules(r, _);
    }),
      (this.ms_convert = function (e, a) {
        for (var t = 0; 576 > t; ++t) {
          var s = e.tt[a][0].xr[t],
            n = e.tt[a][1].xr[t];
          (e.tt[a][0].xr[t] = 0.5 * (s + n) * Z.SQRT2),
            (e.tt[a][1].xr[t] = 0.5 * (s - n) * Z.SQRT2);
        }
      }),
      (this.init_xrpow = function (e, a, t) {
        var s = 0 | a.max_nonzero_coeff;
        (a.xrpow_max = 0), z.fill(t, s, 576, 0);
        for (var n, r = (n = 0); r <= s; ++r) {
          var _ = Math.abs(a.xr[r]);
          (n += _),
            (t[r] = Math.sqrt(_ * Math.sqrt(_))),
            t[r] > a.xrpow_max && (a.xrpow_max = t[r]);
        }
        if (1e-20 < n) {
          for (
            t = 0, 0 != (2 & e.substep_shaping) && (t = 1), s = 0;
            s < a.psymax;
            s++
          )
            e.pseudohalf[s] = t;
          return !0;
        }
        return z.fill(a.l3_enc, 0, 576, 0), !1;
      }),
      (this.init_outer_loop = function (e, t) {
        (t.part2_3_length = 0),
          (t.big_values = 0),
          (t.count1 = 0),
          (t.global_gain = 210),
          (t.scalefac_compress = 0),
          (t.table_select[0] = 0),
          (t.table_select[1] = 0),
          (t.table_select[2] = 0),
          (t.subblock_gain[0] = 0),
          (t.subblock_gain[1] = 0),
          (t.subblock_gain[2] = 0),
          (t.subblock_gain[3] = 0),
          (t.region0_count = 0),
          (t.region1_count = 0),
          (t.preflag = 0),
          (t.scalefac_scale = 0),
          (t.count1table_select = 0),
          (t.part2_length = 0),
          (t.sfb_lmax = P.SBPSY_l),
          (t.sfb_smin = P.SBPSY_s),
          (t.psy_lmax = e.sfb21_extra ? P.SBMAX_l : P.SBPSY_l),
          (t.psymax = t.psy_lmax),
          (t.sfbmax = t.sfb_lmax),
          (t.sfbdivide = 11);
        for (var s = 0; s < P.SBMAX_l; s++)
          (t.width[s] = e.scalefac_band.l[s + 1] - e.scalefac_band.l[s]),
            (t.window[s] = 3);
        if (t.block_type == P.SHORT_TYPE) {
          var n = a(576);
          (t.sfb_smin = 0),
            (t.sfb_lmax = 0),
            0 != t.mixed_block_flag &&
              ((t.sfb_smin = 3), (t.sfb_lmax = 2 * e.mode_gr + 4)),
            (t.psymax =
              t.sfb_lmax +
              3 * ((e.sfb21_extra ? P.SBMAX_s : P.SBPSY_s) - t.sfb_smin)),
            (t.sfbmax = t.sfb_lmax + 3 * (P.SBPSY_s - t.sfb_smin)),
            (t.sfbdivide = t.sfbmax - 18),
            (t.psy_lmax = t.sfb_lmax);
          var _ = e.scalefac_band.l[t.sfb_lmax];
          for (
            K.arraycopy(t.xr, 0, n, 0, 576), s = t.sfb_smin;
            s < P.SBMAX_s;
            s++
          )
            for (
              var i = e.scalefac_band.s[s], o = e.scalefac_band.s[s + 1], l = 0;
              3 > l;
              l++
            )
              for (var f = i; f < o; f++) t.xr[_++] = n[3 * f + l];
          for (n = t.sfb_lmax, s = t.sfb_smin; s < P.SBMAX_s; s++)
            (t.width[n] =
              t.width[n + 1] =
              t.width[n + 2] =
                e.scalefac_band.s[s + 1] - e.scalefac_band.s[s]),
              (t.window[n] = 0),
              (t.window[n + 1] = 1),
              (t.window[n + 2] = 2),
              (n += 3);
        }
        if (
          ((t.count1bits = 0),
          (t.sfb_partition_table = r.nr_of_sfb_block[0][0]),
          (t.slen[0] = 0),
          (t.slen[1] = 0),
          (t.slen[2] = 0),
          (t.slen[3] = 0),
          (t.max_nonzero_coeff = 575),
          z.fill(t.scalefac, 0),
          (s = e.ATH),
          (n = t.xr),
          t.block_type != P.SHORT_TYPE)
        )
          for (t = !1, _ = P.PSFB21 - 1; 0 <= _ && !t; _--)
            for (
              i = e.scalefac_band.psfb21[_],
                o = e.scalefac_band.psfb21[_ + 1],
                l = r.athAdjust(s.adjust, s.psfb21[_], s.floor),
                1e-12 < e.nsPsy.longfact[21] && (l *= e.nsPsy.longfact[21]),
                --o;
              o >= i;
              o--
            ) {
              if (!(Math.abs(n[o]) < l)) {
                t = !0;
                break;
              }
              n[o] = 0;
            }
        else
          for (l = 0; 3 > l; l++)
            for (t = !1, _ = P.PSFB12 - 1; 0 <= _ && !t; _--)
              for (
                i =
                  3 * e.scalefac_band.s[12] +
                  (e.scalefac_band.s[13] - e.scalefac_band.s[12]) * l +
                  (e.scalefac_band.psfb12[_] - e.scalefac_band.psfb12[0]),
                  o =
                    i +
                    (e.scalefac_band.psfb12[_ + 1] - e.scalefac_band.psfb12[_]),
                  f = r.athAdjust(s.adjust, s.psfb12[_], s.floor),
                  1e-12 < e.nsPsy.shortfact[12] && (f *= e.nsPsy.shortfact[12]),
                  --o;
                o >= i;
                o--
              ) {
                if (!(Math.abs(n[o]) < f)) {
                  t = !0;
                  break;
                }
                n[o] = 0;
              }
      }),
      (e.BINSEARCH_NONE = new e(0)),
      (e.BINSEARCH_UP = new e(1)),
      (e.BINSEARCH_DOWN = new e(2)),
      (this.trancate_smallspectrums = function (e, t, s, n) {
        var i = a(W.SFBMAX);
        if (
          (0 != (4 & e.substep_shaping) || t.block_type != P.SHORT_TYPE) &&
          0 == (128 & e.substep_shaping)
        ) {
          r.calc_noise(t, s, i, new g(), null);
          for (var o = 0; 576 > o; o++) {
            var l = 0;
            0 != t.l3_enc[o] && (l = Math.abs(t.xr[o])), (n[o] = l);
          }
          (o = 0), (l = 8), t.block_type == P.SHORT_TYPE && (l = 6);
          do {
            var f,
              h,
              c = t.width[l];
            if (
              ((o += c),
              !(1 <= i[l] || (z.sort(n, o - c, c), u.EQ(n[o - 1], 0))))
            ) {
              var b = (1 - i[l]) * s[l],
                m = (f = 0);
              do {
                for (
                  h = 1;
                  m + h < c && !u.NEQ(n[m + o - c], n[m + o + h - c]);
                  h++
                );
                var p = n[m + o - c] * n[m + o - c] * h;
                if (b < p) {
                  0 != m && (f = n[m + o - c - 1]);
                  break;
                }
                (b -= p), (m += h);
              } while (m < c);
              if (!u.EQ(f, 0))
                do {
                  Math.abs(t.xr[o - c]) <= f && (t.l3_enc[o - c] = 0);
                } while (0 < --c);
            }
          } while (++l < t.psymax);
          t.part2_3_length = _.noquant_count_bits(e, t, null);
        }
      }),
      (this.outer_loop = function (s, n, o, l, f, h) {
        var c,
          b = s.internal_flags,
          m = new E(),
          p = a(576),
          d = a(W.SFBMAX),
          v = new g(),
          S = new T(),
          R = 9999999,
          M = !1,
          A = !1,
          B = 0,
          w = b.CurrentStep[f],
          k = !1,
          y = b.OldValue[f],
          x = e.BINSEARCH_NONE;
        for (n.global_gain = y, c = h - n.part2_length; ; ) {
          var I = _.count_bits(b, l, n, null);
          if (1 == w || I == c) break;
          I > c
            ? (x == e.BINSEARCH_DOWN && (k = !0),
              k && (w /= 2),
              (x = e.BINSEARCH_UP),
              (I = w))
            : (x == e.BINSEARCH_UP && (k = !0),
              k && (w /= 2),
              (x = e.BINSEARCH_DOWN),
              (I = -w)),
            (n.global_gain += I),
            0 > n.global_gain && ((n.global_gain = 0), (k = !0)),
            255 < n.global_gain && ((n.global_gain = 255), (k = !0));
        }
        for (; I > c && 255 > n.global_gain; )
          n.global_gain++, (I = _.count_bits(b, l, n, null));
        if (
          ((b.CurrentStep[f] = 4 <= y - n.global_gain ? 4 : 2),
          (b.OldValue[f] = n.global_gain),
          (n.part2_3_length = I),
          0 == b.noise_shaping)
        )
          return 100;
        for (
          r.calc_noise(n, o, d, v, S),
            v.bits = n.part2_3_length,
            m.assign(n),
            f = 0,
            K.arraycopy(l, 0, p, 0, 576);
          !M;

        ) {
          do {
            if (
              ((c = new g()),
              (k = 255),
              (w = 0 != (2 & b.substep_shaping) ? 20 : 3),
              b.sfb21_extra)
            ) {
              if (1 < d[m.sfbmax]) break;
              if (
                m.block_type == P.SHORT_TYPE &&
                (1 < d[m.sfbmax + 1] || 1 < d[m.sfbmax + 2])
              )
                break;
            }
            (y = m), (I = l), (x = s.internal_flags);
            for (
              var H = y,
                V = d,
                O = I,
                L = s.internal_flags,
                N =
                  0 == H.scalefac_scale
                    ? 1.2968395546510096
                    : 1.6817928305074292,
                D = 0,
                X = 0;
              X < H.sfbmax;
              X++
            )
              D < V[X] && (D = V[X]);
            switch (((X = L.noise_shaping_amp), 3 == X && (X = A ? 2 : 1), X)) {
              case 2:
                break;
              case 1:
                D = 1 < D ? Math.pow(D, 0.5) : 0.95 * D;
                break;
              default:
                D = 1 < D ? 1 : 0.95 * D;
            }
            var q = 0;
            for (X = 0; X < H.sfbmax; X++) {
              var Y = H.width[X];
              if (((q += Y), !(V[X] < D))) {
                if (
                  0 != (2 & L.substep_shaping) &&
                  ((L.pseudohalf[X] = 0 == L.pseudohalf[X] ? 1 : 0),
                  0 == L.pseudohalf[X] && 2 == L.noise_shaping_amp)
                )
                  break;
                for (H.scalefac[X]++, Y = -Y; 0 > Y; Y++)
                  (O[q + Y] *= N),
                    O[q + Y] > H.xrpow_max && (H.xrpow_max = O[q + Y]);
                if (2 == L.noise_shaping_amp) break;
              }
            }
            if ((N = t(y))) y = !1;
            else if (
              (N =
                2 == x.mode_gr
                  ? _.scale_bitcount(y)
                  : _.scale_bitcount_lsf(x, y))
            ) {
              if (1 < x.noise_shaping)
                if ((z.fill(x.pseudohalf, 0), 0 == y.scalefac_scale)) {
                  for (N = y, V = H = 0; V < N.sfbmax; V++) {
                    if (
                      ((L = N.width[V]),
                      (O = N.scalefac[V]),
                      0 != N.preflag && (O += r.pretab[V]),
                      (H += L),
                      0 != (1 & O))
                    )
                      for (O++, L = -L; 0 > L; L++)
                        (I[H + L] *= 1.2968395546510096),
                          I[H + L] > N.xrpow_max && (N.xrpow_max = I[H + L]);
                    N.scalefac[V] = O >> 1;
                  }
                  (N.preflag = 0), (N.scalefac_scale = 1), (N = !1);
                } else if (
                  y.block_type == P.SHORT_TYPE &&
                  0 < x.subblock_gain
                ) {
                  e: {
                    for (
                      N = x, H = y, V = I, O = H.scalefac, I = 0;
                      I < H.sfb_lmax;
                      I++
                    )
                      if (16 <= O[I]) {
                        I = !0;
                        break e;
                      }
                    for (L = 0; 3 > L; L++) {
                      for (
                        X = D = 0, I = H.sfb_lmax + L;
                        I < H.sfbdivide;
                        I += 3
                      )
                        D < O[I] && (D = O[I]);
                      for (; I < H.sfbmax; I += 3) X < O[I] && (X = O[I]);
                      if (!(16 > D && 8 > X)) {
                        if (7 <= H.subblock_gain[L]) {
                          I = !0;
                          break e;
                        }
                        for (
                          H.subblock_gain[L]++,
                            D = N.scalefac_band.l[H.sfb_lmax],
                            I = H.sfb_lmax + L;
                          I < H.sfbmax;
                          I += 3
                        )
                          if (
                            ((X = H.width[I]),
                            (q = O[I]),
                            (q -= 4 >> H.scalefac_scale),
                            0 <= q)
                          )
                            (O[I] = q), (D += 3 * X);
                          else {
                            for (
                              O[I] = 0,
                                q = r.IPOW20(
                                  210 + (q << (H.scalefac_scale + 1)),
                                ),
                                D += X * (L + 1),
                                Y = -X;
                              0 > Y;
                              Y++
                            )
                              (V[D + Y] *= q),
                                V[D + Y] > H.xrpow_max &&
                                  (H.xrpow_max = V[D + Y]);
                            D += X * (3 - L - 1);
                          }
                        for (
                          q = r.IPOW20(202),
                            D += H.width[I] * (L + 1),
                            Y = -H.width[I];
                          0 > Y;
                          Y++
                        )
                          (V[D + Y] *= q),
                            V[D + Y] > H.xrpow_max && (H.xrpow_max = V[D + Y]);
                      }
                    }
                    I = !1;
                  }
                  N = I || t(y);
                }
              N ||
                (N =
                  2 == x.mode_gr
                    ? _.scale_bitcount(y)
                    : _.scale_bitcount_lsf(x, y)),
                (y = !N);
            } else y = !0;
            if (!y) break;
            if (
              (0 != m.scalefac_scale && (k = 254),
              (y = h - m.part2_length),
              0 >= y)
            )
              break;
            for (
              ;
              (m.part2_3_length = _.count_bits(b, l, m, S)) > y &&
              m.global_gain <= k;

            )
              m.global_gain++;
            if (m.global_gain > k) break;
            if (0 == v.over_count) {
              for (
                ;
                (m.part2_3_length = _.count_bits(b, l, m, S)) > R &&
                m.global_gain <= k;

              )
                m.global_gain++;
              if (m.global_gain > k) break;
            }
            switch (
              (r.calc_noise(m, o, d, c, S),
              (c.bits = m.part2_3_length),
              (x =
                n.block_type != P.SHORT_TYPE
                  ? s.quant_comp
                  : s.quant_comp_short),
              (k = v),
              (y = c),
              (N = m),
              (I = d),
              x)
            ) {
              default:
              case 9:
                0 < k.over_count
                  ? ((x = y.over_SSD <= k.over_SSD),
                    y.over_SSD == k.over_SSD && (x = y.bits < k.bits))
                  : (x =
                      0 > y.max_noise &&
                      10 * y.max_noise + y.bits <= 10 * k.max_noise + k.bits);
                break;
              case 0:
                x =
                  y.over_count < k.over_count ||
                  (y.over_count == k.over_count &&
                    y.over_noise < k.over_noise) ||
                  (y.over_count == k.over_count &&
                    u.EQ(y.over_noise, k.over_noise) &&
                    y.tot_noise < k.tot_noise);
                break;
              case 8:
                for (x = y, V = 1e-37, H = 0; H < N.psymax; H++)
                  (O = I[H]),
                    (O = Z.FAST_LOG10(0.368 + 0.632 * O * O * O)),
                    (V += O);
                x.max_noise = Math.max(1e-20, V);
              case 1:
                x = y.max_noise < k.max_noise;
                break;
              case 2:
                x = y.tot_noise < k.tot_noise;
                break;
              case 3:
                x = y.tot_noise < k.tot_noise && y.max_noise < k.max_noise;
                break;
              case 4:
                x =
                  (0 >= y.max_noise && 0.2 < k.max_noise) ||
                  (0 >= y.max_noise &&
                    0 > k.max_noise &&
                    k.max_noise > y.max_noise - 0.2 &&
                    y.tot_noise < k.tot_noise) ||
                  (0 >= y.max_noise &&
                    0 < k.max_noise &&
                    k.max_noise > y.max_noise - 0.2 &&
                    y.tot_noise < k.tot_noise + k.over_noise) ||
                  (0 < y.max_noise &&
                    -0.05 < k.max_noise &&
                    k.max_noise > y.max_noise - 0.1 &&
                    y.tot_noise + y.over_noise < k.tot_noise + k.over_noise) ||
                  (0 < y.max_noise &&
                    -0.1 < k.max_noise &&
                    k.max_noise > y.max_noise - 0.15 &&
                    y.tot_noise + y.over_noise + y.over_noise <
                      k.tot_noise + k.over_noise + k.over_noise);
                break;
              case 5:
                x =
                  y.over_noise < k.over_noise ||
                  (u.EQ(y.over_noise, k.over_noise) &&
                    y.tot_noise < k.tot_noise);
                break;
              case 6:
                x =
                  y.over_noise < k.over_noise ||
                  (u.EQ(y.over_noise, k.over_noise) &&
                    (y.max_noise < k.max_noise ||
                      (u.EQ(y.max_noise, k.max_noise) &&
                        y.tot_noise <= k.tot_noise)));
                break;
              case 7:
                x = y.over_count < k.over_count || y.over_noise < k.over_noise;
            }
            if (
              (0 == k.over_count && (x = x && y.bits < k.bits),
              (x = x ? 1 : 0),
              0 != x)
            )
              (R = n.part2_3_length),
                (v = c),
                n.assign(m),
                (f = 0),
                K.arraycopy(l, 0, p, 0, 576);
            else if (0 == b.full_outer_loop) {
              if (++f > w && 0 == v.over_count) break;
              if (3 == b.noise_shaping_amp && A && 30 < f) break;
              if (3 == b.noise_shaping_amp && A && 15 < m.global_gain - B)
                break;
            }
          } while (255 > m.global_gain + m.scalefac_scale);
          3 == b.noise_shaping_amp
            ? A
              ? (M = !0)
              : (m.assign(n),
                K.arraycopy(p, 0, l, 0, 576),
                (f = 0),
                (B = m.global_gain),
                (A = !0))
            : (M = !0);
        }
        return (
          s.VBR == i.vbr_rh || s.VBR == i.vbr_mtrh
            ? K.arraycopy(p, 0, l, 0, 576)
            : 0 != (1 & b.substep_shaping) &&
              trancate_smallspectrums(b, n, o, l),
          v.over_count
        );
      }),
      (this.iteration_finish_one = function (e, a, t) {
        var s = e.l3_side,
          r = s.tt[a][t];
        _.best_scalefac_store(e, a, t, s),
          1 == e.use_best_huffman && _.best_huffman_divide(e, r),
          n.ResvAdjust(e, r);
      }),
      (this.VBR_encode_granule = function (e, t, s, n, r, _, i) {
        var o = e.internal_flags,
          l = new E(),
          f = a(576),
          h = i,
          c = (i + _) / 2,
          b = 0,
          u = o.sfb21_extra;
        z.fill(l.l3_enc, 0);
        do {
          o.sfb21_extra = !(c > h - 42) && u;
          var m = outer_loop(e, t, s, n, r, c);
          0 >= m
            ? ((b = 1),
              (i = t.part2_3_length),
              l.assign(t),
              K.arraycopy(n, 0, f, 0, 576),
              (i -= 32),
              (m = i - _),
              (c = (i + _) / 2))
            : ((_ = c + 32),
              (m = i - _),
              (c = (i + _) / 2),
              0 != b && ((b = 2), t.assign(l), K.arraycopy(f, 0, n, 0, 576)));
        } while (12 < m);
        (o.sfb21_extra = u),
          2 == b && K.arraycopy(l.l3_enc, 0, t.l3_enc, 0, 576);
      }),
      (this.get_framebits = function (e, a) {
        var t = e.internal_flags;
        (t.bitrate_index = t.VBR_min_bitrate),
          s.getframebits(e),
          (t.bitrate_index = 1);
        for (var r = s.getframebits(e), _ = 1; _ <= t.VBR_max_bitrate; _++)
          (t.bitrate_index = _),
            (r = new d(r)),
            (a[_] = n.ResvFrameBegin(e, r)),
            (r = r.bits);
      }),
      (this.VBR_old_prepare = function (e, a, t, s, _, i, o, l, f) {
        var h = e.internal_flags,
          c = 1,
          b = 0;
        h.bitrate_index = h.VBR_max_bitrate;
        var u = n.ResvFrameBegin(e, new d(0)) / h.mode_gr;
        get_framebits(e, i);
        for (var m = 0; m < h.mode_gr; m++) {
          var p = r.on_pe(e, a, l[m], u, m, 0);
          for (
            h.mode_ext == P.MPG_MD_MS_LR &&
              (ms_convert(h.l3_side, m), r.reduce_side(l[m], t[m], u, p)),
              p = 0;
            p < h.channels_out;
            ++p
          ) {
            var v = h.l3_side.tt[m][p];
            if (v.block_type != P.SHORT_TYPE) {
              var g = 1.28 / (1 + Math.exp(3.5 - a[m][p] / 300)) - 0.05;
              g = h.PSY.mask_adjust - g;
            } else
              (g = 2.56 / (1 + Math.exp(3.5 - a[m][p] / 300)) - 0.14),
                (g = h.PSY.mask_adjust_short - g);
            (h.masking_lower = Math.pow(10, 0.1 * g)),
              init_outer_loop(h, v),
              (f[m][p] = r.calc_xmin(e, s[m][p], v, _[m][p])),
              0 != f[m][p] && (c = 0),
              (o[m][p] = 126),
              (b += l[m][p]);
          }
        }
        for (m = 0; m < h.mode_gr; m++)
          for (p = 0; p < h.channels_out; p++)
            b > i[h.VBR_max_bitrate] &&
              ((l[m][p] *= i[h.VBR_max_bitrate]), (l[m][p] /= b)),
              o[m][p] > l[m][p] && (o[m][p] = l[m][p]);
        return c;
      }),
      (this.bitpressure_strategy = function (e, a, t, s) {
        for (var n = 0; n < e.mode_gr; n++)
          for (var r = 0; r < e.channels_out; r++) {
            for (
              var _ = e.l3_side.tt[n][r], i = a[n][r], o = 0, l = 0;
              l < _.psy_lmax;
              l++
            )
              i[o++] *= 1 + (0.029 * l * l) / P.SBMAX_l / P.SBMAX_l;
            if (_.block_type == P.SHORT_TYPE)
              for (l = _.sfb_smin; l < P.SBMAX_s; l++)
                (i[o++] *= 1 + (0.029 * l * l) / P.SBMAX_s / P.SBMAX_s),
                  (i[o++] *= 1 + (0.029 * l * l) / P.SBMAX_s / P.SBMAX_s),
                  (i[o++] *= 1 + (0.029 * l * l) / P.SBMAX_s / P.SBMAX_s);
            s[n][r] = 0 | Math.max(t[n][r], 0.9 * s[n][r]);
          }
      }),
      (this.VBR_new_prepare = function (e, a, t, s, _, i) {
        var o = e.internal_flags,
          l = 1,
          f = 0,
          h = 0;
        if (e.free_format) {
          (o.bitrate_index = 0), (f = new d(f));
          var c = n.ResvFrameBegin(e, f);
          (f = f.bits), (_[0] = c);
        } else
          (o.bitrate_index = o.VBR_max_bitrate),
            (f = new d(f)),
            n.ResvFrameBegin(e, f),
            (f = f.bits),
            get_framebits(e, _),
            (c = _[o.VBR_max_bitrate]);
        for (_ = 0; _ < o.mode_gr; _++) {
          r.on_pe(e, a, i[_], f, _, 0),
            o.mode_ext == P.MPG_MD_MS_LR && ms_convert(o.l3_side, _);
          for (var b = 0; b < o.channels_out; ++b) {
            var u = o.l3_side.tt[_][b];
            (o.masking_lower = Math.pow(10, 0.1 * o.PSY.mask_adjust)),
              init_outer_loop(o, u),
              0 != r.calc_xmin(e, t[_][b], u, s[_][b]) && (l = 0),
              (h += i[_][b]);
          }
        }
        for (_ = 0; _ < o.mode_gr; _++)
          for (b = 0; b < o.channels_out; b++)
            h > c && ((i[_][b] *= c), (i[_][b] /= h));
        return l;
      }),
      (this.calc_target_bits = function (e, a, t, _, i, o) {
        var l = e.internal_flags,
          f = l.l3_side;
        l.bitrate_index = l.VBR_max_bitrate;
        var h = new d(0);
        (o[0] = n.ResvFrameBegin(e, h)),
          (l.bitrate_index = 1),
          (h = s.getframebits(e) - 8 * l.sideinfo_len),
          (i[0] = h / (l.mode_gr * l.channels_out)),
          (h = e.VBR_mean_bitrate_kbps * e.framesize * 1e3),
          0 != (1 & l.substep_shaping) && (h *= 1.09),
          (h /= e.out_samplerate),
          (h -= 8 * l.sideinfo_len),
          (h /= l.mode_gr * l.channels_out);
        var c = 0.93 + (0.07 * (11 - e.compression_ratio)) / 5.5;
        for (
          0.9 > c && (c = 0.9), 1 < c && (c = 1), e = 0;
          e < l.mode_gr;
          e++
        ) {
          var b = 0;
          for (i = 0; i < l.channels_out; i++) {
            if (((_[e][i] = int(c * h)), 700 < a[e][i])) {
              var u = int((a[e][i] - 700) / 1.4),
                m = f.tt[e][i];
              (_[e][i] = int(c * h)),
                m.block_type == P.SHORT_TYPE && u < h / 2 && (u = h / 2),
                u > (3 * h) / 2 ? (u = (3 * h) / 2) : 0 > u && (u = 0),
                (_[e][i] += u);
            }
            _[e][i] > L.MAX_BITS_PER_CHANNEL &&
              (_[e][i] = L.MAX_BITS_PER_CHANNEL),
              (b += _[e][i]);
          }
          if (b > L.MAX_BITS_PER_GRANULE)
            for (i = 0; i < l.channels_out; ++i)
              (_[e][i] *= L.MAX_BITS_PER_GRANULE), (_[e][i] /= b);
        }
        if (l.mode_ext == P.MPG_MD_MS_LR)
          for (e = 0; e < l.mode_gr; e++)
            r.reduce_side(
              _[e],
              t[e],
              h * l.channels_out,
              L.MAX_BITS_PER_GRANULE,
            );
        for (e = a = 0; e < l.mode_gr; e++)
          for (i = 0; i < l.channels_out; i++)
            _[e][i] > L.MAX_BITS_PER_CHANNEL &&
              (_[e][i] = L.MAX_BITS_PER_CHANNEL),
              (a += _[e][i]);
        if (a > o[0])
          for (e = 0; e < l.mode_gr; e++)
            for (i = 0; i < l.channels_out; i++)
              (_[e][i] *= o[0]), (_[e][i] /= a);
      });
  }
  function y() {
    function e(e, a, s) {
      for (var n = 10, r = a + 238 - 14 - 286, _ = -15; 0 > _; _++) {
        var i = t[n + -10],
          o = e[r + -224] * i,
          l = e[a + 224] * i;
        (i = t[n + -9]),
          (o += e[r + -160] * i),
          (l += e[a + 160] * i),
          (i = t[n + -8]),
          (o += e[r + -96] * i),
          (l += e[a + 96] * i),
          (i = t[n + -7]),
          (o += e[r + -32] * i),
          (l += e[a + 32] * i),
          (i = t[n + -6]),
          (o += e[r + 32] * i),
          (l += e[a + -32] * i),
          (i = t[n + -5]),
          (o += e[r + 96] * i),
          (l += e[a + -96] * i),
          (i = t[n + -4]),
          (o += e[r + 160] * i),
          (l += e[a + -160] * i),
          (i = t[n + -3]),
          (o += e[r + 224] * i),
          (l += e[a + -224] * i),
          (i = t[n + -2]),
          (o += e[a + -256] * i),
          (l -= e[r + 256] * i),
          (i = t[n + -1]),
          (o += e[a + -192] * i),
          (l -= e[r + 192] * i),
          (i = t[n + 0]),
          (o += e[a + -128] * i),
          (l -= e[r + 128] * i),
          (i = t[n + 1]),
          (o += e[a + -64] * i),
          (l -= e[r + 64] * i),
          (i = t[n + 2]),
          (o += e[a + 0] * i),
          (l -= e[r + 0] * i),
          (i = t[n + 3]),
          (o += e[a + 64] * i),
          (l -= e[r + -64] * i),
          (i = t[n + 4]),
          (o += e[a + 128] * i),
          (l -= e[r + -128] * i),
          (i = t[n + 5]),
          (o += e[a + 192] * i),
          (l -= e[r + -192] * i),
          (o *= t[n + 6]),
          (i = l - o),
          (s[30 + 2 * _] = l + o),
          (s[31 + 2 * _] = t[n + 7] * i),
          (n += 18),
          a--,
          r++;
      }
      (l = e[a + -16] * t[n + -10]),
        (o = e[a + -32] * t[n + -2]),
        (l += (e[a + -48] - e[a + 16]) * t[n + -9]),
        (o += e[a + -96] * t[n + -1]),
        (l += (e[a + -80] + e[a + 48]) * t[n + -8]),
        (o += e[a + -160] * t[n + 0]),
        (l += (e[a + -112] - e[a + 80]) * t[n + -7]),
        (o += e[a + -224] * t[n + 1]),
        (l += (e[a + -144] + e[a + 112]) * t[n + -6]),
        (o -= e[a + 32] * t[n + 2]),
        (l += (e[a + -176] - e[a + 144]) * t[n + -5]),
        (o -= e[a + 96] * t[n + 3]),
        (l += (e[a + -208] + e[a + 176]) * t[n + -4]),
        (o -= e[a + 160] * t[n + 4]),
        (l += (e[a + -240] - e[a + 208]) * t[n + -3]),
        (o -= e[a + 224]),
        (e = o - l),
        (a = o + l),
        (l = s[14]),
        (o = s[15] - l),
        (s[31] = a + l),
        (s[30] = e + o),
        (s[15] = e - o),
        (s[14] = a - l),
        (o = s[28] - s[0]),
        (s[0] += s[28]),
        (s[28] = o * t[n + -36 + 7]),
        (o = s[29] - s[1]),
        (s[1] += s[29]),
        (s[29] = o * t[n + -36 + 7]),
        (o = s[26] - s[2]),
        (s[2] += s[26]),
        (s[26] = o * t[n + -72 + 7]),
        (o = s[27] - s[3]),
        (s[3] += s[27]),
        (s[27] = o * t[n + -72 + 7]),
        (o = s[24] - s[4]),
        (s[4] += s[24]),
        (s[24] = o * t[n + -108 + 7]),
        (o = s[25] - s[5]),
        (s[5] += s[25]),
        (s[25] = o * t[n + -108 + 7]),
        (o = s[22] - s[6]),
        (s[6] += s[22]),
        (s[22] = o * Z.SQRT2),
        (o = s[23] - s[7]),
        (s[7] += s[23]),
        (s[23] = o * Z.SQRT2 - s[7]),
        (s[7] -= s[6]),
        (s[22] -= s[7]),
        (s[23] -= s[22]),
        (o = s[6]),
        (s[6] = s[31] - o),
        (s[31] += o),
        (o = s[7]),
        (s[7] = s[30] - o),
        (s[30] += o),
        (o = s[22]),
        (s[22] = s[15] - o),
        (s[15] += o),
        (o = s[23]),
        (s[23] = s[14] - o),
        (s[14] += o),
        (o = s[20] - s[8]),
        (s[8] += s[20]),
        (s[20] = o * t[n + -180 + 7]),
        (o = s[21] - s[9]),
        (s[9] += s[21]),
        (s[21] = o * t[n + -180 + 7]),
        (o = s[18] - s[10]),
        (s[10] += s[18]),
        (s[18] = o * t[n + -216 + 7]),
        (o = s[19] - s[11]),
        (s[11] += s[19]),
        (s[19] = o * t[n + -216 + 7]),
        (o = s[16] - s[12]),
        (s[12] += s[16]),
        (s[16] = o * t[n + -252 + 7]),
        (o = s[17] - s[13]),
        (s[13] += s[17]),
        (s[17] = o * t[n + -252 + 7]),
        (o = -s[20] + s[24]),
        (s[20] += s[24]),
        (s[24] = o * t[n + -216 + 7]),
        (o = -s[21] + s[25]),
        (s[21] += s[25]),
        (s[25] = o * t[n + -216 + 7]),
        (o = s[4] - s[8]),
        (s[4] += s[8]),
        (s[8] = o * t[n + -216 + 7]),
        (o = s[5] - s[9]),
        (s[5] += s[9]),
        (s[9] = o * t[n + -216 + 7]),
        (o = s[0] - s[12]),
        (s[0] += s[12]),
        (s[12] = o * t[n + -72 + 7]),
        (o = s[1] - s[13]),
        (s[1] += s[13]),
        (s[13] = o * t[n + -72 + 7]),
        (o = s[16] - s[28]),
        (s[16] += s[28]),
        (s[28] = o * t[n + -72 + 7]),
        (o = -s[17] + s[29]),
        (s[17] += s[29]),
        (s[29] = o * t[n + -72 + 7]),
        (o = Z.SQRT2 * (s[2] - s[10])),
        (s[2] += s[10]),
        (s[10] = o),
        (o = Z.SQRT2 * (s[3] - s[11])),
        (s[3] += s[11]),
        (s[11] = o),
        (o = Z.SQRT2 * (-s[18] + s[26])),
        (s[18] += s[26]),
        (s[26] = o - s[18]),
        (o = Z.SQRT2 * (-s[19] + s[27])),
        (s[19] += s[27]),
        (s[27] = o - s[19]),
        (o = s[2]),
        (s[19] -= s[3]),
        (s[3] -= o),
        (s[2] = s[31] - o),
        (s[31] += o),
        (o = s[3]),
        (s[11] -= s[19]),
        (s[18] -= o),
        (s[3] = s[30] - o),
        (s[30] += o),
        (o = s[18]),
        (s[27] -= s[11]),
        (s[19] -= o),
        (s[18] = s[15] - o),
        (s[15] += o),
        (o = s[19]),
        (s[10] -= o),
        (s[19] = s[14] - o),
        (s[14] += o),
        (o = s[10]),
        (s[11] -= o),
        (s[10] = s[23] - o),
        (s[23] += o),
        (o = s[11]),
        (s[26] -= o),
        (s[11] = s[22] - o),
        (s[22] += o),
        (o = s[26]),
        (s[27] -= o),
        (s[26] = s[7] - o),
        (s[7] += o),
        (o = s[27]),
        (s[27] = s[6] - o),
        (s[6] += o),
        (o = Z.SQRT2 * (s[0] - s[4])),
        (s[0] += s[4]),
        (s[4] = o),
        (o = Z.SQRT2 * (s[1] - s[5])),
        (s[1] += s[5]),
        (s[5] = o),
        (o = Z.SQRT2 * (s[16] - s[20])),
        (s[16] += s[20]),
        (s[20] = o),
        (o = Z.SQRT2 * (s[17] - s[21])),
        (s[17] += s[21]),
        (s[21] = o),
        (o = -Z.SQRT2 * (s[8] - s[12])),
        (s[8] += s[12]),
        (s[12] = o - s[8]),
        (o = -Z.SQRT2 * (s[9] - s[13])),
        (s[9] += s[13]),
        (s[13] = o - s[9]),
        (o = -Z.SQRT2 * (s[25] - s[29])),
        (s[25] += s[29]),
        (s[29] = o - s[25]),
        (o = -Z.SQRT2 * (s[24] + s[28])),
        (s[24] -= s[28]),
        (s[28] = o - s[24]),
        (o = s[24] - s[16]),
        (s[24] = o),
        (o = s[20] - o),
        (s[20] = o),
        (o = s[28] - o),
        (s[28] = o),
        (o = s[25] - s[17]),
        (s[25] = o),
        (o = s[21] - o),
        (s[21] = o),
        (o = s[29] - o),
        (s[29] = o),
        (o = s[17] - s[1]),
        (s[17] = o),
        (o = s[9] - o),
        (s[9] = o),
        (o = s[25] - o),
        (s[25] = o),
        (o = s[5] - o),
        (s[5] = o),
        (o = s[21] - o),
        (s[21] = o),
        (o = s[13] - o),
        (s[13] = o),
        (o = s[29] - o),
        (s[29] = o),
        (o = s[1] - s[0]),
        (s[1] = o),
        (o = s[16] - o),
        (s[16] = o),
        (o = s[17] - o),
        (s[17] = o),
        (o = s[8] - o),
        (s[8] = o),
        (o = s[9] - o),
        (s[9] = o),
        (o = s[24] - o),
        (s[24] = o),
        (o = s[25] - o),
        (s[25] = o),
        (o = s[4] - o),
        (s[4] = o),
        (o = s[5] - o),
        (s[5] = o),
        (o = s[20] - o),
        (s[20] = o),
        (o = s[21] - o),
        (s[21] = o),
        (o = s[12] - o),
        (s[12] = o),
        (o = s[13] - o),
        (s[13] = o),
        (o = s[28] - o),
        (s[28] = o),
        (o = s[29] - o),
        (s[29] = o),
        (o = s[0]),
        (s[0] += s[31]),
        (s[31] -= o),
        (o = s[1]),
        (s[1] += s[30]),
        (s[30] -= o),
        (o = s[16]),
        (s[16] += s[15]),
        (s[15] -= o),
        (o = s[17]),
        (s[17] += s[14]),
        (s[14] -= o),
        (o = s[8]),
        (s[8] += s[23]),
        (s[23] -= o),
        (o = s[9]),
        (s[9] += s[22]),
        (s[22] -= o),
        (o = s[24]),
        (s[24] += s[7]),
        (s[7] -= o),
        (o = s[25]),
        (s[25] += s[6]),
        (s[6] -= o),
        (o = s[4]),
        (s[4] += s[27]),
        (s[27] -= o),
        (o = s[5]),
        (s[5] += s[26]),
        (s[26] -= o),
        (o = s[20]),
        (s[20] += s[11]),
        (s[11] -= o),
        (o = s[21]),
        (s[21] += s[10]),
        (s[10] -= o),
        (o = s[12]),
        (s[12] += s[19]),
        (s[19] -= o),
        (o = s[13]),
        (s[13] += s[18]),
        (s[18] -= o),
        (o = s[28]),
        (s[28] += s[3]),
        (s[3] -= o),
        (o = s[29]),
        (s[29] += s[2]),
        (s[2] -= o);
    }
    var t = [
        -0.1482523854003001,
        32.308141959636465,
        296.40344946382766,
        883.1344870032432,
        11113.947376231741,
        1057.2713659324597,
        305.7402417275812,
        30.825928907280012,
        3.8533188138216365,
        59.42900443849514,
        709.5899960123345,
        5281.91112291017,
        -5829.66483675846,
        -817.6293103748613,
        -76.91656988279972,
        -4.594269939176596,
        0.9063471690191471,
        0.1960342806591213,
        -0.15466694054279598,
        34.324387823855965,
        301.8067566458425,
        817.599602898885,
        11573.795901679885,
        1181.2520595540152,
        321.59731579894424,
        31.232021761053772,
        3.7107095756221318,
        53.650946155329365,
        684.167428119626,
        5224.56624370173,
        -6366.391851890084,
        -908.9766368219582,
        -89.83068876699639,
        -5.411397422890401,
        0.8206787908286602,
        0.3901806440322567,
        -0.16070888947830023,
        36.147034243915876,
        304.11815768187864,
        732.7429163887613,
        11989.60988270091,
        1300.012278487897,
        335.28490093152146,
        31.48816102859945,
        3.373875931311736,
        47.232241542899175,
        652.7371796173471,
        5132.414255594984,
        -6909.087078780055,
        -1001.9990371107289,
        -103.62185754286375,
        -6.104916304710272,
        0.7416505462720353,
        0.5805693545089249,
        -0.16636367662261495,
        37.751650073343995,
        303.01103387567713,
        627.9747488785183,
        12358.763425278165,
        1412.2779918482834,
        346.7496836825721,
        31.598286663170416,
        3.1598635433980946,
        40.57878626349686,
        616.1671130880391,
        5007.833007176154,
        -7454.040671756168,
        -1095.7960341867115,
        -118.24411666465777,
        -6.818469345853504,
        0.6681786379192989,
        0.7653668647301797,
        -0.1716176790982088,
        39.11551877123304,
        298.3413246578966,
        503.5259106886539,
        12679.589408408976,
        1516.5821921214542,
        355.9850766329023,
        31.395241710249053,
        2.9164211881972335,
        33.79716964664243,
        574.8943997801362,
        4853.234992253242,
        -7997.57021486075,
        -1189.7624067269965,
        -133.6444792601766,
        -7.7202770609839915,
        0.5993769336819237,
        0.9427934736519954,
        -0.17645823955292173,
        40.21879108166477,
        289.9982036694474,
        359.3226160751053,
        12950.259102786438,
        1612.1013903507662,
        362.85067106591504,
        31.045922092242872,
        2.822222032597987,
        26.988862316190684,
        529.8996541764288,
        4671.371946949588,
        -8535.899136645805,
        -1282.5898586244496,
        -149.58553632943463,
        -8.643494270763135,
        0.5345111359507916,
        1.111140466039205,
        -0.36174739330527045,
        41.04429910497807,
        277.5463268268618,
        195.6386023135583,
        13169.43812144731,
        1697.6433561479398,
        367.40983966190305,
        30.557037410382826,
        2.531473372857427,
        20.070154905927314,
        481.50208566532336,
        4464.970341588308,
        -9065.36882077239,
        -1373.62841526722,
        -166.1660487028118,
        -9.58289321133207,
        0.4729647758913199,
        1.268786568327291,
        -0.36970682634889585,
        41.393213350082036,
        261.2935935556502,
        12.935476055240873,
        13336.131683328815,
        1772.508612059496,
        369.76534388639965,
        29.751323653701338,
        2.4023193045459172,
        13.304795348228817,
        430.5615775526625,
        4237.0568611071185,
        -9581.931701634761,
        -1461.6913552409758,
        -183.12733958476446,
        -10.718010163869403,
        0.41421356237309503,
        1.414213562373095,
        -0.37677560326535325,
        41.619486213528496,
        241.05423794991074,
        -187.94665032361226,
        13450.063605744153,
        1836.153896465782,
        369.4908799925761,
        29.001847876923147,
        2.0714759319987186,
        6.779591200894186,
        377.7767837205709,
        3990.386575512536,
        -10081.709459700915,
        -1545.947424837898,
        -200.3762958015653,
        -11.864482073055006,
        0.3578057213145241,
        1.546020906725474,
        -0.3829366947518991,
        41.1516456456653,
        216.47684307105183,
        -406.1569483347166,
        13511.136535077321,
        1887.8076599260432,
        367.3025214564151,
        28.136213436723654,
        1.913880671464418,
        0.3829366947518991,
        323.85365704338597,
        3728.1472257487526,
        -10561.233882199509,
        -1625.2025997821418,
        -217.62525175416,
        -13.015432208941645,
        0.3033466836073424,
        1.66293922460509,
        -0.5822628872992417,
        40.35639251440489,
        188.20071124269245,
        -640.2706748618148,
        13519.21490106562,
        1927.6022433578062,
        362.8197642637487,
        26.968821921868447,
        1.7463817695935329,
        -5.62650678237171,
        269.3016715297017,
        3453.386536448852,
        -11016.145278780888,
        -1698.6569643425091,
        -234.7658734267683,
        -14.16351421663124,
        0.2504869601913055,
        1.76384252869671,
        -0.5887180101749253,
        39.23429103868072,
        155.76096234403798,
        -889.2492977967378,
        13475.470561874661,
        1955.0535223723712,
        356.4450994756727,
        25.894952980042156,
        1.5695032905781554,
        -11.181939564328772,
        214.80884394039484,
        3169.1640829158237,
        -11443.321309975563,
        -1765.1588461316153,
        -251.68908574481912,
        -15.49755935939164,
        0.198912367379658,
        1.847759065022573,
        -0.7912582233652842,
        37.39369355329111,
        119.699486012458,
        -1151.0956593239027,
        13380.446257078214,
        1970.3952110853447,
        348.01959814116185,
        24.731487364283044,
        1.3850130831637748,
        -16.421408865300393,
        161.05030052864092,
        2878.3322807850063,
        -11838.991423510031,
        -1823.985884688674,
        -268.2854986386903,
        -16.81724543849939,
        0.1483359875383474,
        1.913880671464418,
        -0.7960642926861912,
        35.2322109610459,
        80.01928065061526,
        -1424.0212633405113,
        13235.794061869668,
        1973.804052543835,
        337.9908651258184,
        23.289159354463873,
        1.3934255946442087,
        -21.099669467133474,
        108.48348407242611,
        2583.700758091299,
        -12199.726194855148,
        -1874.2780658979746,
        -284.2467154529415,
        -18.11369784385905,
        0.09849140335716425,
        1.961570560806461,
        -0.998795456205172,
        32.56307803611191,
        36.958364584370486,
        -1706.075448829146,
        13043.287458812016,
        1965.3831106103316,
        326.43182772364605,
        22.175018750622293,
        1.198638339011324,
        -25.371248002043963,
        57.53505923036915,
        2288.41886619975,
        -12522.674544337233,
        -1914.8400385312243,
        -299.26241273417224,
        -19.37805630698734,
        0.04912684976946725,
        1.990369453344394,
        (0.0178904535 * Z.SQRT2) / 2384e-9,
        (0.008938074 * Z.SQRT2) / 2384e-9,
        (0.0015673635 * Z.SQRT2) / 2384e-9,
        (0.001228571 * Z.SQRT2) / 2384e-9,
        (0.0004856585 * Z.SQRT2) / 2384e-9,
        (109434e-9 * Z.SQRT2) / 2384e-9,
        (50783e-9 * Z.SQRT2) / 2384e-9,
        (6914e-9 * Z.SQRT2) / 2384e-9,
        12804.797818791945,
        1945.5515939597317,
        313.4244966442953,
        20.801593959731544,
        1995.1556208053692,
        9.000838926174497,
        -29.20218120805369,
      ],
      s = [
        [
          2382191739347913e-28, 6423305872147834e-28, 9400849094049688e-28,
          1122435026096556e-27, 1183840321267481e-27, 1122435026096556e-27,
          940084909404969e-27, 6423305872147839e-28, 2382191739347918e-28,
          5456116108943412e-27, 4878985199565852e-27, 4240448995017367e-27,
          3559909094758252e-27, 2858043359288075e-27, 2156177623817898e-27,
          1475637723558783e-27, 8371015190102974e-28, 2599706096327376e-28,
          -5456116108943412e-27, -4878985199565852e-27, -4240448995017367e-27,
          -3559909094758252e-27, -2858043359288076e-27, -2156177623817898e-27,
          -1475637723558783e-27, -8371015190102975e-28, -2599706096327376e-28,
          -2382191739347923e-28, -6423305872147843e-28, -9400849094049696e-28,
          -1122435026096556e-27, -1183840321267481e-27, -1122435026096556e-27,
          -9400849094049694e-28, -642330587214784e-27, -2382191739347918e-28,
        ],
        [
          2382191739347913e-28, 6423305872147834e-28, 9400849094049688e-28,
          1122435026096556e-27, 1183840321267481e-27, 1122435026096556e-27,
          9400849094049688e-28, 6423305872147841e-28, 2382191739347918e-28,
          5456116108943413e-27, 4878985199565852e-27, 4240448995017367e-27,
          3559909094758253e-27, 2858043359288075e-27, 2156177623817898e-27,
          1475637723558782e-27, 8371015190102975e-28, 2599706096327376e-28,
          -5461314069809755e-27, -4921085770524055e-27, -4343405037091838e-27,
          -3732668368707687e-27, -3093523840190885e-27, -2430835727329465e-27,
          -1734679010007751e-27, -974825365660928e-27, -2797435120168326e-28, 0,
          0, 0, 0, 0, 0, -2283748241799531e-28, -4037858874020686e-28,
          -2146547464825323e-28,
        ],
        [
          0.1316524975873958, 0.414213562373095, 0.7673269879789602,
          1.091308501069271, 1.303225372841206, 1.56968557711749,
          1.920982126971166, 2.414213562373094, 3.171594802363212,
          4.510708503662055, 7.595754112725146, 22.90376554843115,
          0.984807753012208, 0.6427876096865394, 0.3420201433256688,
          0.9396926207859084, -0.1736481776669303, -0.7660444431189779,
          0.8660254037844387, 0.5, -0.5144957554275265, -0.4717319685649723,
          -0.3133774542039019, -0.1819131996109812, -0.09457419252642064,
          -0.04096558288530405, -0.01419856857247115, -0.003699974673760037,
          0.8574929257125442, 0.8817419973177052, 0.9496286491027329,
          0.9833145924917901, 0.9955178160675857, 0.9991605581781475,
          0.999899195244447, 0.9999931550702802,
        ],
        [
          0, 0, 0, 0, 0, 0, 2283748241799531e-28, 4037858874020686e-28,
          2146547464825323e-28, 5461314069809755e-27, 4921085770524055e-27,
          4343405037091838e-27, 3732668368707687e-27, 3093523840190885e-27,
          2430835727329466e-27, 1734679010007751e-27, 974825365660928e-27,
          2797435120168326e-28, -5456116108943413e-27, -4878985199565852e-27,
          -4240448995017367e-27, -3559909094758253e-27, -2858043359288075e-27,
          -2156177623817898e-27, -1475637723558782e-27, -8371015190102975e-28,
          -2599706096327376e-28, -2382191739347913e-28, -6423305872147834e-28,
          -9400849094049688e-28, -1122435026096556e-27, -1183840321267481e-27,
          -1122435026096556e-27, -9400849094049688e-28, -6423305872147841e-28,
          -2382191739347918e-28,
        ],
      ],
      n = s[P.SHORT_TYPE],
      r = s[P.SHORT_TYPE],
      _ = s[P.SHORT_TYPE],
      i = s[P.SHORT_TYPE],
      o = [
        0, 1, 16, 17, 8, 9, 24, 25, 4, 5, 20, 21, 12, 13, 28, 29, 2, 3, 18, 19,
        10, 11, 26, 27, 6, 7, 22, 23, 14, 15, 30, 31,
      ];
    this.mdct_sub48 = function (t, l, f) {
      for (var h = 286, c = 0; c < t.channels_out; c++) {
        for (var b = 0; b < t.mode_gr; b++) {
          for (
            var u,
              m = t.l3_side.tt[b][c],
              p = m.xr,
              d = 0,
              v = t.sb_sample[c][1 - b],
              g = 0,
              S = 0;
            9 > S;
            S++
          )
            for (
              e(l, h, v[g]), e(l, h + 32, v[g + 1]), g += 2, h += 64, u = 1;
              32 > u;
              u += 2
            )
              v[g - 1][u] *= -1;
          for (u = 0; 32 > u; u++, d += 18) {
            (v = m.block_type), (g = t.sb_sample[c][b]);
            var R = t.sb_sample[c][1 - b];
            if (
              (0 != m.mixed_block_flag && 2 > u && (v = 0),
              1e-12 > t.amp_filter[u])
            )
              z.fill(p, d + 0, d + 18, 0);
            else {
              if (1 > t.amp_filter[u])
                for (S = 0; 18 > S; S++) R[S][o[u]] *= t.amp_filter[u];
              if (v == P.SHORT_TYPE) {
                for (S = -3; 0 > S; S++) {
                  var M = s[P.SHORT_TYPE][S + 3];
                  (p[d + 3 * S + 9] = g[9 + S][o[u]] * M - g[8 - S][o[u]]),
                    (p[d + 3 * S + 18] = g[14 - S][o[u]] * M + g[15 + S][o[u]]),
                    (p[d + 3 * S + 10] = g[15 + S][o[u]] * M - g[14 - S][o[u]]),
                    (p[d + 3 * S + 19] = R[2 - S][o[u]] * M + R[3 + S][o[u]]),
                    (p[d + 3 * S + 11] = R[3 + S][o[u]] * M - R[2 - S][o[u]]),
                    (p[d + 3 * S + 20] = R[8 - S][o[u]] * M + R[9 + S][o[u]]);
                }
                for (S = p, g = d, M = 0; 3 > M; M++) {
                  var A = S[g + 6] * s[P.SHORT_TYPE][0] - S[g + 15];
                  R = S[g + 0] * s[P.SHORT_TYPE][2] - S[g + 9];
                  var B = A + R,
                    w = A - R;
                  (A = S[g + 15] * s[P.SHORT_TYPE][0] + S[g + 6]),
                    (R = S[g + 9] * s[P.SHORT_TYPE][2] + S[g + 0]);
                  var T = A + R,
                    E = -A + R;
                  (R =
                    2069978111953089e-26 *
                    (S[g + 3] * s[P.SHORT_TYPE][1] - S[g + 12])),
                    (A =
                      2069978111953089e-26 *
                      (S[g + 12] * s[P.SHORT_TYPE][1] + S[g + 3])),
                    (S[g + 0] = 190752519173728e-25 * B + R),
                    (S[g + 15] = 190752519173728e-25 * -T + A),
                    (w *= 16519652744032674e-27),
                    (T = 9537625958686404e-27 * T + A),
                    (S[g + 3] = w - T),
                    (S[g + 6] = w + T),
                    (B = 9537625958686404e-27 * B - R),
                    (E *= 16519652744032674e-27),
                    (S[g + 9] = B + E),
                    (S[g + 12] = B - E),
                    g++;
                }
              } else {
                for (M = a(18), S = -9; 0 > S; S++)
                  (B =
                    s[v][S + 27] * R[S + 9][o[u]] +
                    s[v][S + 36] * R[8 - S][o[u]]),
                    (w =
                      s[v][S + 9] * g[S + 9][o[u]] -
                      s[v][S + 18] * g[8 - S][o[u]]),
                    (M[S + 9] = B - w * n[3 + S + 9]),
                    (M[S + 18] = B * n[3 + S + 9] + w);
                (S = p), (g = d), (B = M);
                var k = B[17] - B[9],
                  y = B[15] - B[11],
                  x = B[14] - B[12];
                (E = B[0] + B[8]),
                  (T = B[1] + B[7]),
                  (A = B[2] + B[6]),
                  (w = B[3] + B[5]),
                  (S[g + 17] = E + A - w - (T - B[4])),
                  (M = (E + A - w) * r[19] + (T - B[4])),
                  (R = (k - y - x) * r[18]),
                  (S[g + 5] = R + M),
                  (S[g + 6] = R - M);
                var I = (B[16] - B[10]) * r[18];
                (T = T * r[19] + B[4]),
                  (R = k * r[12] + I + y * r[13] + x * r[14]),
                  (M = -E * r[16] + T - A * r[17] + w * r[15]),
                  (S[g + 1] = R + M),
                  (S[g + 2] = R - M),
                  (R = k * r[13] - I - y * r[14] + x * r[12]),
                  (M = -E * r[17] + T - A * r[15] + w * r[16]),
                  (S[g + 9] = R + M),
                  (S[g + 10] = R - M),
                  (R = k * r[14] - I + y * r[12] - x * r[13]),
                  (M = E * r[15] - T + A * r[16] - w * r[17]),
                  (S[g + 13] = R + M),
                  (S[g + 14] = R - M),
                  (k = B[8] - B[0]),
                  (y = B[6] - B[2]),
                  (x = B[5] - B[3]),
                  (E = B[17] + B[9]),
                  (T = B[16] + B[10]),
                  (A = B[15] + B[11]),
                  (w = B[14] + B[12]),
                  (S[g + 0] = E + A + w + (T + B[13])),
                  (R = (E + A + w) * r[19] - (T + B[13])),
                  (M = (k - y + x) * r[18]),
                  (S[g + 11] = R + M),
                  (S[g + 12] = R - M),
                  (I = (B[7] - B[1]) * r[18]),
                  (T = B[13] - T * r[19]),
                  (R = E * r[15] - T + A * r[16] + w * r[17]),
                  (M = k * r[14] + I + y * r[12] + x * r[13]),
                  (S[g + 3] = R + M),
                  (S[g + 4] = R - M),
                  (R = -E * r[17] + T - A * r[15] - w * r[16]),
                  (M = k * r[13] + I - y * r[14] - x * r[12]),
                  (S[g + 7] = R + M),
                  (S[g + 8] = R - M),
                  (R = -E * r[16] + T - A * r[17] - w * r[15]),
                  (M = k * r[12] - I + y * r[13] - x * r[14]),
                  (S[g + 15] = R + M),
                  (S[g + 16] = R - M);
              }
            }
            if (v != P.SHORT_TYPE && 0 != u)
              for (S = 7; 0 <= S; --S)
                (v = p[d + S] * _[20 + S] + p[d + -1 - S] * i[28 + S]),
                  (g = p[d + S] * i[28 + S] - p[d + -1 - S] * _[20 + S]),
                  (p[d + -1 - S] = v),
                  (p[d + S] = g);
          }
        }
        if (((l = f), (h = 286), 1 == t.mode_gr))
          for (b = 0; 18 > b; b++)
            K.arraycopy(t.sb_sample[c][1][b], 0, t.sb_sample[c][0][b], 0, 32);
      }
    };
  }
  function x() {
    (this.thm = new O()), (this.en = new O());
  }
  function P() {
    var s = P.FFTOFFSET,
      n = P.MPG_MD_MS_LR,
      _ = null,
      l = (this.psy = null),
      f = null,
      h = null;
    this.setModules = function (e, a, t, s) {
      (_ = e), (l = this.psy = a), (f = s), (h = t);
    };
    var c = new y();
    this.lame_encode_mp3_frame = function (b, u, m, p, d, v) {
      var g = r([2, 2]);
      (g[0][0] = new x()),
        (g[0][1] = new x()),
        (g[1][0] = new x()),
        (g[1][1] = new x());
      var S = r([2, 2]);
      (S[0][0] = new x()),
        (S[0][1] = new x()),
        (S[1][0] = new x()),
        (S[1][1] = new x());
      var R,
        M,
        A = [null, null],
        B = b.internal_flags,
        w = t([2, 4]),
        T = [0.5, 0.5],
        E = [
          [0, 0],
          [0, 0],
        ],
        k = [
          [0, 0],
          [0, 0],
        ];
      if (
        ((A[0] = u), (A[1] = m), 0 == B.lame_encode_frame_init) &&
        ((u = b.internal_flags), 0 == u.lame_encode_frame_init)
      ) {
        m = a(2014);
        var y = a(2014);
        for (
          u.lame_encode_frame_init = 1, M = R = 0;
          R < 286 + 576 * (1 + u.mode_gr);
          ++R
        )
          R < 576 * u.mode_gr
            ? ((m[R] = 0), 2 == u.channels_out && (y[R] = 0))
            : ((m[R] = A[0][M]), 2 == u.channels_out && (y[R] = A[1][M]), ++M);
        for (M = 0; M < u.mode_gr; M++)
          for (R = 0; R < u.channels_out; R++)
            u.l3_side.tt[M][R].block_type = P.SHORT_TYPE;
        c.mdct_sub48(u, m, y);
      }
      if (
        ((B.padding = 0),
        0 > (B.slot_lag -= B.frac_SpF) &&
          ((B.slot_lag += b.out_samplerate), (B.padding = 1)),
        0 != B.psymodel)
      )
        for (y = [null, null], R = 0, M = e(2), m = 0; m < B.mode_gr; m++) {
          for (u = 0; u < B.channels_out; u++)
            (y[u] = A[u]), (R = 576 + 576 * m - P.FFTOFFSET);
          if (
            ((u =
              b.VBR == i.vbr_mtrh || b.VBR == i.vbr_mt
                ? l.L3psycho_anal_vbr(b, y, R, m, g, S, E[m], k[m], w[m], M)
                : l.L3psycho_anal_ns(b, y, R, m, g, S, E[m], k[m], w[m], M)),
            0 != u)
          )
            return -4;
          for (
            b.mode == o.JOINT_STEREO &&
              ((T[m] = w[m][2] + w[m][3]), 0 < T[m] && (T[m] = w[m][3] / T[m])),
              u = 0;
            u < B.channels_out;
            u++
          ) {
            var I = B.l3_side.tt[m][u];
            (I.block_type = M[u]), (I.mixed_block_flag = 0);
          }
        }
      else
        for (m = 0; m < B.mode_gr; m++)
          for (u = 0; u < B.channels_out; u++)
            (B.l3_side.tt[m][u].block_type = P.NORM_TYPE),
              (B.l3_side.tt[m][u].mixed_block_flag = 0),
              (k[m][u] = E[m][u] = 700);
      if (
        (0 == B.ATH.useAdjust
          ? (B.ATH.adjust = 1)
          : ((u = B.loudness_sq[0][0]),
            (w = B.loudness_sq[1][0]),
            2 == B.channels_out
              ? ((u += B.loudness_sq[0][1]), (w += B.loudness_sq[1][1]))
              : ((u += u), (w += w)),
            2 == B.mode_gr && (u = Math.max(u, w)),
            (u = 0.5 * u * B.ATH.aaSensitivityP),
            0.03125 < u
              ? (1 <= B.ATH.adjust
                  ? (B.ATH.adjust = 1)
                  : B.ATH.adjust < B.ATH.adjustLimit &&
                    (B.ATH.adjust = B.ATH.adjustLimit),
                (B.ATH.adjustLimit = 1))
              : ((w = 31.98 * u + 625e-6),
                B.ATH.adjust >= w
                  ? ((B.ATH.adjust *= 0.075 * w + 0.925),
                    B.ATH.adjust < w && (B.ATH.adjust = w))
                  : B.ATH.adjustLimit >= w
                  ? (B.ATH.adjust = w)
                  : B.ATH.adjust < B.ATH.adjustLimit &&
                    (B.ATH.adjust = B.ATH.adjustLimit),
                (B.ATH.adjustLimit = w))),
        c.mdct_sub48(B, A[0], A[1]),
        (B.mode_ext = P.MPG_MD_LR_LR),
        b.force_ms)
      )
        B.mode_ext = P.MPG_MD_MS_LR;
      else if (b.mode == o.JOINT_STEREO) {
        for (m = y = w = 0; m < B.mode_gr; m++)
          for (u = 0; u < B.channels_out; u++) (w += k[m][u]), (y += E[m][u]);
        w <= 1 * y &&
          ((w = B.l3_side.tt[0]),
          (u = B.l3_side.tt[B.mode_gr - 1]),
          w[0].block_type == w[1].block_type &&
            u[0].block_type == u[1].block_type &&
            (B.mode_ext = P.MPG_MD_MS_LR));
      }
      if (
        (B.mode_ext == n && ((g = S), (E = k)), b.analysis && null != B.pinfo)
      )
        for (m = 0; m < B.mode_gr; m++)
          for (u = 0; u < B.channels_out; u++)
            (B.pinfo.ms_ratio[m] = B.ms_ratio[m]),
              (B.pinfo.ms_ener_ratio[m] = T[m]),
              (B.pinfo.blocktype[m][u] = B.l3_side.tt[m][u].block_type),
              (B.pinfo.pe[m][u] = E[m][u]),
              K.arraycopy(B.l3_side.tt[m][u].xr, 0, B.pinfo.xr[m][u], 0, 576),
              B.mode_ext == n &&
                ((B.pinfo.ers[m][u] = B.pinfo.ers[m][u + 2]),
                K.arraycopy(
                  B.pinfo.energy[m][u + 2],
                  0,
                  B.pinfo.energy[m][u],
                  0,
                  B.pinfo.energy[m][u].length,
                ));
      if (b.VBR == i.vbr_off || b.VBR == i.vbr_abr) {
        for (S = 0; 18 > S; S++) B.nsPsy.pefirbuf[S] = B.nsPsy.pefirbuf[S + 1];
        for (m = k = 0; m < B.mode_gr; m++)
          for (u = 0; u < B.channels_out; u++) k += E[m][u];
        for (
          B.nsPsy.pefirbuf[18] = k, k = B.nsPsy.pefirbuf[9], S = 0;
          9 > S;
          S++
        )
          k += (B.nsPsy.pefirbuf[S] + B.nsPsy.pefirbuf[18 - S]) * P.fircoef[S];
        for (
          k = (3350 * B.mode_gr * B.channels_out) / k, m = 0;
          m < B.mode_gr;
          m++
        )
          for (u = 0; u < B.channels_out; u++) E[m][u] *= k;
      }
      if (
        (B.iteration_loop.iteration_loop(b, E, T, g),
        _.format_bitstream(b),
        (p = _.copy_buffer(B, p, d, v, 1)),
        b.bWriteVbrTag && f.addVbrFrame(b),
        b.analysis && null != B.pinfo)
      ) {
        for (u = 0; u < B.channels_out; u++) {
          for (d = 0; d < s; d++)
            B.pinfo.pcmdata[u][d] = B.pinfo.pcmdata[u][d + b.framesize];
          for (d = s; 1600 > d; d++) B.pinfo.pcmdata[u][d] = A[u][d - s];
        }
        h.set_frame_pinfo(b, g);
      }
      for (
        B.bitrate_stereoMode_Hist[B.bitrate_index][4]++,
          B.bitrate_stereoMode_Hist[15][4]++,
          2 == B.channels_out &&
            (B.bitrate_stereoMode_Hist[B.bitrate_index][B.mode_ext]++,
            B.bitrate_stereoMode_Hist[15][B.mode_ext]++),
          b = 0;
        b < B.mode_gr;
        ++b
      )
        for (A = 0; A < B.channels_out; ++A)
          (d = 0 | B.l3_side.tt[b][A].block_type),
            0 != B.l3_side.tt[b][A].mixed_block_flag && (d = 4),
            B.bitrate_blockType_Hist[B.bitrate_index][d]++,
            B.bitrate_blockType_Hist[B.bitrate_index][5]++,
            B.bitrate_blockType_Hist[15][d]++,
            B.bitrate_blockType_Hist[15][5]++;
      return p;
    };
  }
  function I() {
    (this.size = this.pos = this.want = this.seen = this.sum = 0),
      (this.bag = null),
      (this.TotalFrameSize = this.nBytesWritten = this.nVbrNumFrames = 0);
  }
  function H() {
    (this.tt = [
      [null, null],
      [null, null],
    ]),
      (this.resvDrain_post =
        this.resvDrain_pre =
        this.private_bits =
        this.main_data_begin =
          0),
      (this.scfsi = [e(4), e(4)]);
    for (var a = 0; 2 > a; a++)
      for (var t = 0; 2 > t; t++) this.tt[a][t] = new E();
  }
  function V() {
    (this.last_en_subshort = t([4, 9])),
      (this.lastAttacks = e(4)),
      (this.pefirbuf = a(19)),
      (this.longfact = a(P.SBMAX_l)),
      (this.shortfact = a(P.SBMAX_s)),
      (this.attackthre_s = this.attackthre = 0);
  }
  function O() {
    (this.l = a(P.SBMAX_l)), (this.s = t([P.SBMAX_s, 3]));
    var e = this;
    this.assign = function (a) {
      K.arraycopy(a.l, 0, e.l, 0, P.SBMAX_l);
      for (var t = 0; t < P.SBMAX_s; t++)
        for (var s = 0; 3 > s; s++) e.s[t][s] = a.s[t][s];
    };
  }
  function L() {
    function n() {
      (this.ptr = this.write_timing = 0), (this.buf = new Int8Array(40));
    }
    (this.fill_buffer_resample_init =
      this.iteration_init_init =
      this.lame_encode_frame_init =
      this.Class_ID =
        0),
      (this.mfbuf = t([2, L.MFSIZE])),
      (this.full_outer_loop =
        this.use_best_huffman =
        this.subblock_gain =
        this.noise_shaping_stop =
        this.psymodel =
        this.substep_shaping =
        this.noise_shaping_amp =
        this.noise_shaping =
        this.highpass2 =
        this.highpass1 =
        this.lowpass2 =
        this.lowpass1 =
        this.mode_ext =
        this.samplerate_index =
        this.bitrate_index =
        this.VBR_max_bitrate =
        this.VBR_min_bitrate =
        this.mf_size =
        this.mf_samples_to_encode =
        this.resample_ratio =
        this.channels_out =
        this.channels_in =
        this.mode_gr =
          0),
      (this.l3_side = new H()),
      (this.ms_ratio = a(2)),
      (this.slot_lag = this.frac_SpF = this.padding = 0),
      (this.tag_spec = null),
      (this.nMusicCRC = 0),
      (this.OldValue = e(2)),
      (this.CurrentStep = e(2)),
      (this.masking_lower = 0),
      (this.bv_scf = e(576)),
      (this.pseudohalf = e(W.SFBMAX)),
      (this.sfb21_extra = !1),
      (this.inbuf_old = Array(2)),
      (this.blackfilt = Array(2 * L.BPC + 1)),
      (this.itime = new Float64Array(2)),
      (this.sideinfo_len = 0),
      (this.sb_sample = t([2, 2, 18, P.SBLIMIT])),
      (this.amp_filter = a(32)),
      (this.header = Array(L.MAX_HEADER_BUF)),
      (this.ResvMax =
        this.ResvSize =
        this.ancillary_flag =
        this.w_ptr =
        this.h_ptr =
          0),
      (this.scalefac_band = new B()),
      (this.minval_l = a(P.CBANDS)),
      (this.minval_s = a(P.CBANDS)),
      (this.nb_1 = t([4, P.CBANDS])),
      (this.nb_2 = t([4, P.CBANDS])),
      (this.nb_s1 = t([4, P.CBANDS])),
      (this.nb_s2 = t([4, P.CBANDS])),
      (this.s3_ll = this.s3_ss = null),
      (this.decay = 0),
      (this.thm = Array(4)),
      (this.en = Array(4)),
      (this.tot_ener = a(4)),
      (this.loudness_sq = t([2, 2])),
      (this.loudness_sq_save = a(2)),
      (this.mld_l = a(P.SBMAX_l)),
      (this.mld_s = a(P.SBMAX_s)),
      (this.bm_l = e(P.SBMAX_l)),
      (this.bo_l = e(P.SBMAX_l)),
      (this.bm_s = e(P.SBMAX_s)),
      (this.bo_s = e(P.SBMAX_s)),
      (this.npart_s = this.npart_l = 0),
      (this.s3ind = s([P.CBANDS, 2])),
      (this.s3ind_s = s([P.CBANDS, 2])),
      (this.numlines_s = e(P.CBANDS)),
      (this.numlines_l = e(P.CBANDS)),
      (this.rnumlines_l = a(P.CBANDS)),
      (this.mld_cb_l = a(P.CBANDS)),
      (this.mld_cb_s = a(P.CBANDS)),
      (this.numlines_l_num1 = this.numlines_s_num1 = 0),
      (this.pe = a(4)),
      (this.ms_ener_ratio_old = this.ms_ratio_l_old = this.ms_ratio_s_old = 0),
      (this.blocktype_old = e(2)),
      (this.nsPsy = new V()),
      (this.VBR_seek_table = new I()),
      (this.PSY = this.ATH = null),
      (this.nogap_current = this.nogap_total = 0),
      (this.findPeakSample = this.findReplayGain = this.decode_on_the_fly = !0),
      (this.AudiophileGain = this.RadioGain = this.PeakSample = 0),
      (this.rgdata = null),
      (this.noclipScale = this.noclipGainChange = 0),
      (this.bitrate_stereoMode_Hist = s([16, 5])),
      (this.bitrate_blockType_Hist = s([16, 6])),
      (this.hip = this.pinfo = null),
      (this.in_buffer_nsamples = 0),
      (this.iteration_loop = this.in_buffer_1 = this.in_buffer_0 = null);
    for (var r = 0; r < this.en.length; r++) this.en[r] = new O();
    for (r = 0; r < this.thm.length; r++) this.thm[r] = new O();
    for (r = 0; r < this.header.length; r++) this.header[r] = new n();
  }
  function N() {
    function e(e, a, t) {
      var s = 0;
      t <<= 1;
      var r = a + t,
        _ = 4;
      do {
        var i,
          o = _ >> 1,
          l = _,
          f = _ << 1,
          h = f + l;
        _ = f << 1;
        var c = a,
          b = c + o;
        do {
          var u = e[c + 0] - e[c + l],
            m = e[c + 0] + e[c + l],
            p = e[c + f] - e[c + h],
            d = e[c + f] + e[c + h];
          (e[c + f] = m - d),
            (e[c + 0] = m + d),
            (e[c + h] = u - p),
            (e[c + l] = u + p),
            (u = e[b + 0] - e[b + l]),
            (m = e[b + 0] + e[b + l]),
            (p = Z.SQRT2 * e[b + h]),
            (d = Z.SQRT2 * e[b + f]),
            (e[b + f] = m - d),
            (e[b + 0] = m + d),
            (e[b + h] = u - p),
            (e[b + l] = u + p),
            (b += _),
            (c += _);
        } while (c < r);
        var v = n[s + 0],
          g = n[s + 1];
        for (i = 1; i < o; i++) {
          var S = 1 - 2 * g * g,
            R = 2 * g * v;
          (c = a + i), (b = a + l - i);
          do {
            var M = R * e[c + l] - S * e[b + l];
            (d = S * e[c + l] + R * e[b + l]),
              (u = e[c + 0] - d),
              (m = e[c + 0] + d);
            var A = e[b + 0] - M,
              B = e[b + 0] + M;
            (M = R * e[c + h] - S * e[b + h]),
              (d = S * e[c + h] + R * e[b + h]),
              (p = e[c + f] - d),
              (d = e[c + f] + d);
            var w = e[b + f] - M,
              T = e[b + f] + M;
            (M = g * d - v * w),
              (d = v * d + g * w),
              (e[c + f] = m - d),
              (e[c + 0] = m + d),
              (e[b + h] = A - M),
              (e[b + l] = A + M),
              (M = v * T - g * p),
              (d = g * T + v * p),
              (e[b + f] = B - d),
              (e[b + 0] = B + d),
              (e[c + h] = u - M),
              (e[c + l] = u + M),
              (b += _),
              (c += _);
          } while (c < r);
          (S = v),
            (v = S * n[s + 0] - g * n[s + 1]),
            (g = S * n[s + 1] + g * n[s + 0]);
        }
        s += 2;
      } while (_ < t);
    }
    var t = a(P.BLKSIZE),
      s = a(P.BLKSIZE_s / 2),
      n = [
        0.9238795325112867, 0.3826834323650898, 0.9951847266721969,
        0.0980171403295606, 0.9996988186962042, 0.02454122852291229,
        0.9999811752826011, 0.006135884649154475,
      ],
      r = [
        0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240,
        8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248,
        4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244,
        12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124,
        252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114,
        242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186,
        122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182,
        118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62,
        190, 126, 254,
      ];
    (this.fft_short = function (a, t, n, _, i) {
      for (a = 0; 3 > a; a++) {
        var o = P.BLKSIZE_s / 2,
          l = 65535 & (192 * (a + 1)),
          f = P.BLKSIZE_s / 8 - 1;
        do {
          var h = 255 & r[f << 2],
            c = s[h] * _[n][i + h + l],
            b = s[127 - h] * _[n][i + h + l + 128],
            u = c - b;
          c += b;
          var m = s[h + 64] * _[n][i + h + l + 64];
          b = s[63 - h] * _[n][i + h + l + 192];
          var p = m - b;
          (m += b),
            (o -= 4),
            (t[a][o + 0] = c + m),
            (t[a][o + 2] = c - m),
            (t[a][o + 1] = u + p),
            (t[a][o + 3] = u - p),
            (c = s[h + 1] * _[n][i + h + l + 1]),
            (b = s[126 - h] * _[n][i + h + l + 129]),
            (u = c - b),
            (c += b),
            (m = s[h + 65] * _[n][i + h + l + 65]),
            (b = s[62 - h] * _[n][i + h + l + 193]),
            (p = m - b),
            (m += b),
            (t[a][o + P.BLKSIZE_s / 2 + 0] = c + m),
            (t[a][o + P.BLKSIZE_s / 2 + 2] = c - m),
            (t[a][o + P.BLKSIZE_s / 2 + 1] = u + p),
            (t[a][o + P.BLKSIZE_s / 2 + 3] = u - p);
        } while (0 <= --f);
        e(t[a], o, P.BLKSIZE_s / 2);
      }
    }),
      (this.fft_long = function (a, s, n, _, i) {
        a = P.BLKSIZE / 8 - 1;
        var o = P.BLKSIZE / 2;
        do {
          var l = 255 & r[a],
            f = t[l] * _[n][i + l],
            h = t[l + 512] * _[n][i + l + 512],
            c = f - h;
          f += h;
          var b = t[l + 256] * _[n][i + l + 256];
          h = t[l + 768] * _[n][i + l + 768];
          var u = b - h;
          (b += h),
            (o -= 4),
            (s[o + 0] = f + b),
            (s[o + 2] = f - b),
            (s[o + 1] = c + u),
            (s[o + 3] = c - u),
            (f = t[l + 1] * _[n][i + l + 1]),
            (h = t[l + 513] * _[n][i + l + 513]),
            (c = f - h),
            (f += h),
            (b = t[l + 257] * _[n][i + l + 257]),
            (h = t[l + 769] * _[n][i + l + 769]),
            (u = b - h),
            (b += h),
            (s[o + P.BLKSIZE / 2 + 0] = f + b),
            (s[o + P.BLKSIZE / 2 + 2] = f - b),
            (s[o + P.BLKSIZE / 2 + 1] = c + u),
            (s[o + P.BLKSIZE / 2 + 3] = c - u);
        } while (0 <= --a);
        e(s, o, P.BLKSIZE / 2);
      }),
      (this.init_fft = function (e) {
        for (e = 0; e < P.BLKSIZE; e++)
          t[e] =
            0.42 -
            0.5 * Math.cos((2 * Math.PI * (e + 0.5)) / P.BLKSIZE) +
            0.08 * Math.cos((4 * Math.PI * (e + 0.5)) / P.BLKSIZE);
        for (e = 0; e < P.BLKSIZE_s / 2; e++)
          s[e] = 0.5 * (1 - Math.cos((2 * Math.PI * (e + 0.5)) / P.BLKSIZE_s));
      });
  }
  function D() {
    function s(e, a) {
      for (var t = 0, s = 0; s < P.BLKSIZE / 2; ++s) t += e[s] * a.ATH.eql_w[s];
      return t * E;
    }
    function n(e, a, t, s, n, r) {
      if (a > e) {
        if (!(a < e * B)) return e + a;
        var _ = a / e;
      } else {
        if (e >= a * B) return e + a;
        _ = e / a;
      }
      return (
        (e += a),
        6 >= s + 3
          ? _ >= A
            ? e
            : ((s = 0 | Z.FAST_LOG10_X(_, 16)), e * x[s])
          : ((s = 0 | Z.FAST_LOG10_X(_, 16)),
            (a =
              0 != r
                ? n.ATH.cb_s[t] * n.ATH.adjust
                : n.ATH.cb_l[t] * n.ATH.adjust),
            e < w * a
              ? e > a
                ? ((t = 1),
                  13 >= s && (t = I[s]),
                  (a = Z.FAST_LOG10_X(e / a, 10 / 15)),
                  e * ((y[s] - t) * a + t))
                : 13 < s
                ? e
                : e * I[s]
              : e * y[s])
      );
    }
    function r(e, a, t) {
      if ((0 > e && (e = 0), 0 > a && (a = 0), 0 >= e)) return a;
      if (0 >= a) return e;
      var s = a > e ? a / e : e / a;
      return -2 <= t && 2 >= t
        ? s >= A
          ? e + a
          : ((t = 0 | Z.FAST_LOG10_X(s, 16)), (e + a) * H[t])
        : s < B
        ? e + a
        : (e < a && (e = a), e);
    }
    function l(e, a, t, s, n) {
      var r,
        _,
        i = 0,
        o = 0;
      for (r = _ = 0; r < P.SBMAX_s; ++_, ++r) {
        var l = e.bo_s[r],
          f = e.npart_s;
        for (l = l < f ? l : f; _ < l; ) (i += a[_]), (o += t[_]), _++;
        if (((e.en[s].s[r][n] = i), (e.thm[s].s[r][n] = o), _ >= f)) {
          ++r;
          break;
        }
        (o = e.PSY.bo_s_weight[r]),
          (f = 1 - o),
          (i = o * a[_]),
          (o *= t[_]),
          (e.en[s].s[r][n] += i),
          (e.thm[s].s[r][n] += o),
          (i = f * a[_]),
          (o = f * t[_]);
      }
      for (; r < P.SBMAX_s; ++r) (e.en[s].s[r][n] = 0), (e.thm[s].s[r][n] = 0);
    }
    function f(e, a, t, s) {
      var n,
        r,
        _ = 0,
        i = 0;
      for (n = r = 0; n < P.SBMAX_l; ++r, ++n) {
        var o = e.bo_l[n],
          l = e.npart_l;
        for (o = o < l ? o : l; r < o; ) (_ += a[r]), (i += t[r]), r++;
        if (((e.en[s].l[n] = _), (e.thm[s].l[n] = i), r >= l)) {
          ++n;
          break;
        }
        (i = e.PSY.bo_l_weight[n]),
          (l = 1 - i),
          (_ = i * a[r]),
          (i *= t[r]),
          (e.en[s].l[n] += _),
          (e.thm[s].l[n] += i),
          (_ = l * a[r]),
          (i = l * t[r]);
      }
      for (; n < P.SBMAX_l; ++n) (e.en[s].l[n] = 0), (e.thm[s].l[n] = 0);
    }
    function h(e, a, t) {
      return 1 <= t ? e : 0 >= t ? a : 0 < a ? Math.pow(e / a, t) * a : 0;
    }
    function c(e, a) {
      for (var t = 309.07, s = 0; s < P.SBMAX_s - 1; s++)
        for (var n = 0; 3 > n; n++) {
          var r = e.thm.s[s][n];
          if (0 < r) {
            r *= a;
            var _ = e.en.s[s][n];
            _ > r &&
              (t =
                _ > 1e10 * r
                  ? t + 23.02585092994046 * V[s]
                  : t + V[s] * Z.FAST_LOG10(_ / r));
          }
        }
      return t;
    }
    function b(e, a) {
      for (var t = 281.0575, s = 0; s < P.SBMAX_l - 1; s++) {
        var n = e.thm.l[s];
        if (0 < n) {
          n *= a;
          var r = e.en.l[s];
          r > n &&
            (t =
              r > 1e10 * n
                ? t + 23.02585092994046 * O[s]
                : t + O[s] * Z.FAST_LOG10(r / n));
        }
      }
      return t;
    }
    function u(e, a, t, s, n) {
      var r, _;
      for (r = _ = 0; r < e.npart_l; ++r) {
        var i,
          o = 0,
          l = 0;
        for (i = 0; i < e.numlines_l[r]; ++i, ++_) {
          var f = a[_];
          (o += f), l < f && (l = f);
        }
        (t[r] = o), (s[r] = l), (n[r] = o * e.rnumlines_l[r]);
      }
    }
    function m(e, a, t, s) {
      var n = k.length - 1,
        r = 0,
        _ = t[r] + t[r + 1];
      if (0 < _) {
        var i = a[r];
        i < a[r + 1] && (i = a[r + 1]),
          (_ =
            (20 * (2 * i - _)) /
            (_ * (e.numlines_l[r] + e.numlines_l[r + 1] - 1))),
          (_ |= 0),
          _ > n && (_ = n),
          (s[r] = _);
      } else s[r] = 0;
      for (r = 1; r < e.npart_l - 1; r++)
        (_ = t[r - 1] + t[r] + t[r + 1]),
          0 < _
            ? ((i = a[r - 1]),
              i < a[r] && (i = a[r]),
              i < a[r + 1] && (i = a[r + 1]),
              (_ =
                (20 * (3 * i - _)) /
                (_ *
                  (e.numlines_l[r - 1] +
                    e.numlines_l[r] +
                    e.numlines_l[r + 1] -
                    1))),
              (_ |= 0),
              _ > n && (_ = n),
              (s[r] = _))
            : (s[r] = 0);
      (_ = t[r - 1] + t[r]),
        0 < _
          ? ((i = a[r - 1]),
            i < a[r] && (i = a[r]),
            (_ =
              (20 * (2 * i - _)) /
              (_ * (e.numlines_l[r - 1] + e.numlines_l[r] - 1))),
            (_ |= 0),
            _ > n && (_ = n),
            (s[r] = _))
          : (s[r] = 0);
    }
    function p(e, a, t, s, n, r, _) {
      var i = 2 * r;
      n = 0 < r ? Math.pow(10, n) : 1;
      for (var o, l, f = 0; f < _; ++f) {
        var h = e[2][f],
          c = e[3][f],
          b = a[0][f],
          u = a[1][f],
          m = a[2][f],
          p = a[3][f];
        b <= 1.58 * u && u <= 1.58 * b
          ? ((o = t[f] * h),
            (l = Math.max(m, Math.min(p, t[f] * c))),
            (o = Math.max(p, Math.min(m, o))))
          : ((l = m), (o = p)),
          0 < r &&
            ((p = s[f] * n),
            (b = Math.min(Math.max(b, p), Math.max(u, p))),
            (m = Math.max(l, p)),
            (p = Math.max(o, p)),
            (u = m + p),
            0 < u && b * i < u && ((b = (b * i) / u), (m *= b), (p *= b)),
            (l = Math.min(m, l)),
            (o = Math.min(p, o))),
          l > h && (l = h),
          o > c && (o = c),
          (a[2][f] = l),
          (a[3][f] = o);
      }
    }
    function d(e, a) {
      return (
        (e = 0 <= e ? 27 * -e : e * a),
        -72 >= e ? 0 : Math.exp(0.2302585093 * e)
      );
    }
    function v(e) {
      return (
        0 > e && (e = 0),
        (e *= 0.001),
        13 * Math.atan(0.76 * e) + 3.5 * Math.atan((e * e) / 56.25)
      );
    }
    function g(t, s, n, r, _, i, o, l, f, h, c, b) {
      var u,
        m = a(P.CBANDS + 1),
        p = l / (15 < b ? 1152 : 384),
        d = e(P.HBLKSIZE);
      l /= f;
      var g = 0,
        S = 0;
      for (u = 0; u < P.CBANDS; u++) {
        var R,
          M = v(l * g);
        for (m[u] = l * g, R = g; 0.34 > v(l * R) - M && R <= f / 2; R++);
        for (t[u] = R - g, S = u + 1; g < R; ) d[g++] = u;
        if (g > f / 2) {
          (g = f / 2), ++u;
          break;
        }
      }
      for (m[u] = l * g, g = 0; g < b; g++)
        (u = h[g]),
          (M = h[g + 1]),
          (u = 0 | Math.floor(0.5 + c * (u - 0.5))),
          0 > u && (u = 0),
          (R = 0 | Math.floor(0.5 + c * (M - 0.5))),
          R > f / 2 && (R = f / 2),
          (n[g] = (d[u] + d[R]) / 2),
          (s[g] = d[R]),
          (o[g] = (p * M - m[s[g]]) / (m[s[g] + 1] - m[s[g]])),
          0 > o[g] ? (o[g] = 0) : 1 < o[g] && (o[g] = 1),
          (M = v(l * h[g] * c)),
          (M = Math.min(M, 15.5) / 15.5),
          (i[g] = Math.pow(10, 1.25 * (1 - Math.cos(Math.PI * M)) - 2.5));
      for (s = g = 0; s < S; s++)
        (n = t[s]),
          (M = v(l * g)),
          (i = v(l * (g + n - 1))),
          (r[s] = 0.5 * (M + i)),
          (M = v(l * (g - 0.5))),
          (i = v(l * (g + n - 0.5))),
          (_[s] = i - M),
          (g += n);
      return S;
    }
    function S(e, s, n, r, _, i) {
      var o = t([P.CBANDS, P.CBANDS]),
        l = 0;
      if (i)
        for (var f = 0; f < s; f++)
          for (i = 0; i < s; i++) {
            var h = n[f] - n[i];
            if (((h = 0 <= h ? 3 * h : 1.5 * h), 0.5 <= h && 2.5 >= h)) {
              var c = h - 0.5;
              c = 8 * (c * c - 2 * c);
            } else c = 0;
            (h += 0.474),
              (h = 15.811389 + 7.5 * h - 17.5 * Math.sqrt(1 + h * h)),
              -60 >= h
                ? (c = 0)
                : ((h = Math.exp(0.2302585093 * (c + h))), (c = h / 0.6609193)),
              (h = c * r[i]),
              (o[f][i] = h * _[f]);
          }
      else
        for (i = 0; i < s; i++) {
          var b, u;
          for (
            c = 15 + Math.min(21 / n[i], 12), f = c, b = 0;
            1e-20 < d(b, f);
            --b
          );
          var m = b;
          for (u = 0; 1e-12 < Math.abs(u - m); )
            (b = (u + m) / 2), 0 < d(b, f) ? (u = b) : (m = b);
          for (h = m, b = 0; 1e-20 < d(b, f); b += 1);
          for (m = 0, u = b; 1e-12 < Math.abs(u - m); )
            (b = (u + m) / 2), 0 < d(b, f) ? (m = b) : (u = b);
          m = u;
          var p = 0;
          for (u = 0; 1e3 >= u; ++u)
            (b = h + (u * (m - h)) / 1e3), (b = d(b, f)), (p += b);
          for (b = 1001 / (p * (m - h)), f = 0; f < s; f++)
            (h = b * d(n[f] - n[i], c) * r[i]), (o[f][i] = h * _[f]);
        }
      for (f = 0; f < s; f++) {
        for (i = 0; i < s && !(0 < o[f][i]); i++);
        for (e[f][0] = i, i = s - 1; 0 < i && !(0 < o[f][i]); i--);
        (e[f][1] = i), (l += e[f][1] - e[f][0] + 1);
      }
      for (n = a(l), f = r = 0; f < s; f++)
        for (i = e[f][0]; i <= e[f][1]; i++) n[r++] = o[f][i];
      return n;
    }
    function R(e) {
      return (
        (e = v(e)),
        (e = Math.min(e, 15.5) / 15.5),
        Math.pow(10, 1.25 * (1 - Math.cos(Math.PI * e)) - 2.5)
      );
    }
    function M(e, a) {
      return (
        -0.3 > e && (e = 3410),
        (e = Math.max(0.1, e / 1e3)),
        3.64 * Math.pow(e, -0.8) -
          6.8 * Math.exp(-0.6 * Math.pow(e - 3.4, 2)) +
          6 * Math.exp(-0.15 * Math.pow(e - 8.7, 2)) +
          0.001 * (0.6 + 0.04 * a) * Math.pow(e, 4)
      );
    }
    var A,
      B,
      w,
      T = new N(),
      E = 1 / 217621504 / (P.BLKSIZE / 2),
      k = [
        1, 0.79433, 0.63096, 0.63096, 0.63096, 0.63096, 0.63096, 0.25119,
        0.11749,
      ],
      y = [
        3.3246 * 3.3246,
        3.23837 * 3.23837,
        9.9500500969,
        9.0247369744,
        8.1854926609,
        7.0440875649,
        2.46209 * 2.46209,
        2.284 * 2.284,
        4.4892710641,
        1.96552 * 1.96552,
        1.82335 * 1.82335,
        1.69146 * 1.69146,
        2.4621061921,
        2.1508568964,
        1.37074 * 1.37074,
        1.31036 * 1.31036,
        1.5691069696,
        1.4555939904,
        1.16203 * 1.16203,
        1.2715945225,
        1.09428 * 1.09428,
        1.0659 * 1.0659,
        1.0779838276,
        1.0382591025,
        1,
      ],
      x = [
        1.7782755904,
        1.35879 * 1.35879,
        1.38454 * 1.38454,
        1.39497 * 1.39497,
        1.40548 * 1.40548,
        1.3537 * 1.3537,
        1.6999465924,
        1.22321 * 1.22321,
        1.3169398564,
        1,
      ],
      I = [
        5.5396212496,
        2.29259 * 2.29259,
        4.9868695969,
        2.12675 * 2.12675,
        2.02545 * 2.02545,
        1.87894 * 1.87894,
        1.74303 * 1.74303,
        1.61695 * 1.61695,
        2.2499700001,
        1.39148 * 1.39148,
        1.29083 * 1.29083,
        1.19746 * 1.19746,
        1.2339655056,
        1.0779838276,
      ],
      H = [
        1.7782755904,
        1.35879 * 1.35879,
        1.38454 * 1.38454,
        1.39497 * 1.39497,
        1.40548 * 1.40548,
        1.3537 * 1.3537,
        1.6999465924,
        1.22321 * 1.22321,
        1.3169398564,
        1,
      ],
      V = [11.8, 13.6, 17.2, 32, 46.5, 51.3, 57.5, 67.1, 71.5, 84.6, 97.6, 130],
      O = [
        6.8, 5.8, 5.8, 6.4, 6.5, 9.9, 12.1, 14.4, 15, 18.9, 21.6, 26.9, 34.2,
        40.2, 46.8, 56.5, 60.7, 73.9, 85.7, 93.4, 126.1,
      ],
      L = [
        -1730326e-23, -0.01703172, -1349528e-23, 0.0418072, -673278e-22,
        -0.0876324, -30835e-21, 0.1863476, -1104424e-22, -0.627638,
      ];
    this.L3psycho_anal_ns = function (r, p, d, v, g, S, R, M, A, B) {
      var w,
        E,
        y,
        x,
        I,
        H,
        V,
        O = r.internal_flags,
        N = t([2, P.BLKSIZE]),
        D = t([2, 3, P.BLKSIZE_s]),
        X = a(P.CBANDS + 1),
        q = a(P.CBANDS + 1),
        Y = a(P.CBANDS + 2),
        C = e(2),
        F = e(2),
        j = t([2, 576]),
        G = e(P.CBANDS + 2),
        K = e(P.CBANDS + 2);
      z.fill(K, 0);
      var Q = O.channels_out;
      r.mode == o.JOINT_STEREO && (Q = 4);
      var U =
        r.VBR == i.vbr_off
          ? 0 == O.ResvMax
            ? 0
            : (O.ResvSize / O.ResvMax) * 0.5
          : r.VBR == i.vbr_rh || r.VBR == i.vbr_mtrh || r.VBR == i.vbr_mt
          ? 0.6
          : 1;
      for (w = 0; w < O.channels_out; w++) {
        var W = p[w],
          J = d + 576 - 350 - 21 + 192;
        for (y = 0; 576 > y; y++) {
          var $,
            ee = W[J + y + 10];
          for (x = $ = 0; 9 > x; x += 2)
            (ee += L[x] * (W[J + y + x] + W[J + y + 21 - x])),
              ($ += L[x + 1] * (W[J + y + x + 1] + W[J + y + 21 - x - 1]));
          j[w][y] = ee + $;
        }
        g[v][w].en.assign(O.en[w]),
          g[v][w].thm.assign(O.thm[w]),
          2 < Q &&
            (S[v][w].en.assign(O.en[w + 2]), S[v][w].thm.assign(O.thm[w + 2]));
      }
      for (w = 0; w < Q; w++) {
        var ae = a(12),
          te = [0, 0, 0, 0],
          se = a(12),
          ne = 1,
          re = a(P.CBANDS),
          _e = a(P.CBANDS),
          ie = [0, 0, 0, 0],
          oe = a(P.HBLKSIZE),
          le = t([3, P.HBLKSIZE_s]);
        for (y = 0; 3 > y; y++)
          (ae[y] = O.nsPsy.last_en_subshort[w][y + 6]),
            (se[y] = ae[y] / O.nsPsy.last_en_subshort[w][y + 4]),
            (te[0] += ae[y]);
        if (2 == w)
          for (y = 0; 576 > y; y++) {
            var fe = j[0][y],
              he = j[1][y];
            (j[0][y] = fe + he), (j[1][y] = fe - he);
          }
        var ce = j[1 & w],
          be = 0;
        for (y = 0; 9 > y; y++) {
          for (var ue = be + 64, me = 1; be < ue; be++)
            me < Math.abs(ce[be]) && (me = Math.abs(ce[be]));
          (O.nsPsy.last_en_subshort[w][y] = ae[y + 3] = me),
            (te[1 + y / 3] += me),
            (me =
              me > ae[y + 3 - 2]
                ? me / ae[y + 3 - 2]
                : ae[y + 3 - 2] > 10 * me
                ? ae[y + 3 - 2] / (10 * me)
                : 0),
            (se[y + 3] = me);
        }
        if (r.analysis) {
          var pe = se[0];
          for (y = 1; 12 > y; y++) pe < se[y] && (pe = se[y]);
          (O.pinfo.ers[v][w] = O.pinfo.ers_save[w]), (O.pinfo.ers_save[w] = pe);
        }
        var de = 3 == w ? O.nsPsy.attackthre_s : O.nsPsy.attackthre;
        for (y = 0; 12 > y; y++)
          0 == ie[y / 3] && se[y] > de && (ie[y / 3] = (y % 3) + 1);
        for (y = 1; 4 > y; y++)
          1.7 > (te[y - 1] > te[y] ? te[y - 1] / te[y] : te[y] / te[y - 1]) &&
            ((ie[y] = 0), 1 == y && (ie[0] = 0));
        0 != ie[0] && 0 != O.nsPsy.lastAttacks[w] && (ie[0] = 0),
          (3 != O.nsPsy.lastAttacks[w] && 0 == ie[0] + ie[1] + ie[2] + ie[3]) ||
            ((ne = 0),
            0 != ie[1] && 0 != ie[0] && (ie[1] = 0),
            0 != ie[2] && 0 != ie[1] && (ie[2] = 0),
            0 != ie[3] && 0 != ie[2] && (ie[3] = 0)),
          2 > w ? (F[w] = ne) : 0 == ne && (F[0] = F[1] = 0),
          (A[w] = O.tot_ener[w]);
        var ve = r,
          ge = oe,
          Se = le,
          Re = N,
          Me = 1 & w,
          Ae = D,
          Be = 1 & w,
          we = v,
          Te = w,
          Ee = p,
          ke = d,
          ye = ve.internal_flags;
        if (2 > Te)
          T.fft_long(ye, Re[Me], Te, Ee, ke),
            T.fft_short(ye, Ae[Be], Te, Ee, ke);
        else if (2 == Te) {
          for (var xe = P.BLKSIZE - 1; 0 <= xe; --xe) {
            var Pe = Re[Me + 0][xe],
              Ie = Re[Me + 1][xe];
            (Re[Me + 0][xe] = (Pe + Ie) * Z.SQRT2 * 0.5),
              (Re[Me + 1][xe] = (Pe - Ie) * Z.SQRT2 * 0.5);
          }
          for (var He = 2; 0 <= He; --He)
            for (xe = P.BLKSIZE_s - 1; 0 <= xe; --xe)
              (Pe = Ae[Be + 0][He][xe]),
                (Ie = Ae[Be + 1][He][xe]),
                (Ae[Be + 0][He][xe] = (Pe + Ie) * Z.SQRT2 * 0.5),
                (Ae[Be + 1][He][xe] = (Pe - Ie) * Z.SQRT2 * 0.5);
        }
        for (
          ge[0] = Re[Me + 0][0], ge[0] *= ge[0], xe = P.BLKSIZE / 2 - 1;
          0 <= xe;
          --xe
        ) {
          var Ve = Re[Me + 0][P.BLKSIZE / 2 - xe],
            Oe = Re[Me + 0][P.BLKSIZE / 2 + xe];
          ge[P.BLKSIZE / 2 - xe] = 0.5 * (Ve * Ve + Oe * Oe);
        }
        for (He = 2; 0 <= He; --He)
          for (
            Se[He][0] = Ae[Be + 0][He][0],
              Se[He][0] *= Se[He][0],
              xe = P.BLKSIZE_s / 2 - 1;
            0 <= xe;
            --xe
          )
            (Ve = Ae[Be + 0][He][P.BLKSIZE_s / 2 - xe]),
              (Oe = Ae[Be + 0][He][P.BLKSIZE_s / 2 + xe]),
              (Se[He][P.BLKSIZE_s / 2 - xe] = 0.5 * (Ve * Ve + Oe * Oe));
        var Le = 0;
        for (xe = 11; xe < P.HBLKSIZE; xe++) Le += ge[xe];
        if (((ye.tot_ener[Te] = Le), ve.analysis)) {
          for (xe = 0; xe < P.HBLKSIZE; xe++)
            (ye.pinfo.energy[we][Te][xe] = ye.pinfo.energy_save[Te][xe]),
              (ye.pinfo.energy_save[Te][xe] = ge[xe]);
          ye.pinfo.pe[we][Te] = ye.pe[Te];
        }
        for (
          2 == ve.athaa_loudapprox &&
            2 > Te &&
            ((ye.loudness_sq[we][Te] = ye.loudness_sq_save[Te]),
            (ye.loudness_sq_save[Te] = s(ge, ye))),
            u(O, oe, X, re, _e),
            m(O, re, _e, G),
            V = 0;
          3 > V;
          V++
        ) {
          var Ne = void 0,
            De = void 0,
            Xe = le,
            qe = q,
            Ye = Y,
            Ce = w,
            Fe = V,
            je = r.internal_flags;
          for (Ne = De = 0; Ne < je.npart_s; ++Ne) {
            for (
              var Ge = 0, ze = 0, Ke = je.numlines_s[Ne], Ze = 0;
              Ze < Ke;
              ++Ze, ++De
            ) {
              var Qe = Xe[Fe][De];
              (Ge += Qe), ze < Qe && (ze = Qe);
            }
            qe[Ne] = Ge;
          }
          for (De = Ne = 0; Ne < je.npart_s; Ne++) {
            var Ue = je.s3ind_s[Ne][0],
              We = je.s3_ss[De++] * qe[Ue];
            for (++Ue; Ue <= je.s3ind_s[Ne][1]; )
              (We += je.s3_ss[De] * qe[Ue]), ++De, ++Ue;
            var Je = 2 * je.nb_s1[Ce][Ne];
            (Ye[Ne] = Math.min(We, Je)),
              je.blocktype_old[1 & Ce] == P.SHORT_TYPE &&
                ((Je = 16 * je.nb_s2[Ce][Ne]), (Ye[Ne] = Math.min(Je, Ye[Ne]))),
              (je.nb_s2[Ce][Ne] = je.nb_s1[Ce][Ne]),
              (je.nb_s1[Ce][Ne] = We);
          }
          for (; Ne <= P.CBANDS; ++Ne) (qe[Ne] = 0), (Ye[Ne] = 0);
          for (l(O, q, Y, w, V), H = 0; H < P.SBMAX_s; H++) {
            var $e = O.thm[w].s[H][V];
            if ((($e *= 0.8), 2 <= ie[V] || 1 == ie[V + 1])) {
              var ea = 0 != V ? V - 1 : 2;
              (me = h(O.thm[w].s[H][ea], $e, 0.6 * U)), ($e = Math.min($e, me));
            }
            1 == ie[V]
              ? ((ea = 0 != V ? V - 1 : 2),
                (me = h(O.thm[w].s[H][ea], $e, 0.3 * U)),
                ($e = Math.min($e, me)))
              : ((0 != V && 3 == ie[V - 1]) ||
                  (0 == V && 3 == O.nsPsy.lastAttacks[w])) &&
                ((ea = 2 != V ? V + 1 : 0),
                (me = h(O.thm[w].s[H][ea], $e, 0.3 * U)),
                ($e = Math.min($e, me)));
            var aa = ae[3 * V + 3] + ae[3 * V + 4] + ae[3 * V + 5];
            6 * ae[3 * V + 5] < aa &&
              (($e *= 0.5), 6 * ae[3 * V + 4] < aa && ($e *= 0.5)),
              (O.thm[w].s[H][V] = $e);
          }
        }
        for (O.nsPsy.lastAttacks[w] = ie[2], E = I = 0; E < O.npart_l; E++) {
          for (
            var ta = O.s3ind[E][0],
              sa = X[ta] * k[G[ta]],
              na = O.s3_ll[I++] * sa;
            ++ta <= O.s3ind[E][1];

          )
            (sa = X[ta] * k[G[ta]]),
              (na = n(na, O.s3_ll[I++] * sa, ta, ta - E, O, 0));
          (na *= 0.158489319246111),
            (Y[E] =
              O.blocktype_old[1 & w] == P.SHORT_TYPE
                ? na
                : h(
                    Math.min(na, Math.min(2 * O.nb_1[w][E], 16 * O.nb_2[w][E])),
                    na,
                    U,
                  )),
            (O.nb_2[w][E] = O.nb_1[w][E]),
            (O.nb_1[w][E] = na);
        }
        for (; E <= P.CBANDS; ++E) (X[E] = 0), (Y[E] = 0);
        f(O, X, Y, w);
      }
      if (
        (r.mode == o.STEREO || r.mode == o.JOINT_STEREO) &&
        0 < r.interChRatio
      ) {
        var ra = r.interChRatio,
          _a = r.internal_flags;
        if (1 < _a.channels_out) {
          for (var ia = 0; ia < P.SBMAX_l; ia++) {
            var oa = _a.thm[0].l[ia],
              la = _a.thm[1].l[ia];
            (_a.thm[0].l[ia] += la * ra), (_a.thm[1].l[ia] += oa * ra);
          }
          for (ia = 0; ia < P.SBMAX_s; ia++)
            for (var fa = 0; 3 > fa; fa++)
              (oa = _a.thm[0].s[ia][fa]),
                (la = _a.thm[1].s[ia][fa]),
                (_a.thm[0].s[ia][fa] += la * ra),
                (_a.thm[1].s[ia][fa] += oa * ra);
        }
      }
      if (r.mode == o.JOINT_STEREO) {
        for (var ha, ca = 0; ca < P.SBMAX_l; ca++)
          if (
            !(
              O.thm[0].l[ca] > 1.58 * O.thm[1].l[ca] ||
              O.thm[1].l[ca] > 1.58 * O.thm[0].l[ca]
            )
          ) {
            var ba = O.mld_l[ca] * O.en[3].l[ca],
              ua = Math.max(O.thm[2].l[ca], Math.min(O.thm[3].l[ca], ba));
            ba = O.mld_l[ca] * O.en[2].l[ca];
            var ma = Math.max(O.thm[3].l[ca], Math.min(O.thm[2].l[ca], ba));
            (O.thm[2].l[ca] = ua), (O.thm[3].l[ca] = ma);
          }
        for (ca = 0; ca < P.SBMAX_s; ca++)
          for (var pa = 0; 3 > pa; pa++)
            O.thm[0].s[ca][pa] > 1.58 * O.thm[1].s[ca][pa] ||
              O.thm[1].s[ca][pa] > 1.58 * O.thm[0].s[ca][pa] ||
              ((ba = O.mld_s[ca] * O.en[3].s[ca][pa]),
              (ua = Math.max(
                O.thm[2].s[ca][pa],
                Math.min(O.thm[3].s[ca][pa], ba),
              )),
              (ba = O.mld_s[ca] * O.en[2].s[ca][pa]),
              (ma = Math.max(
                O.thm[3].s[ca][pa],
                Math.min(O.thm[2].s[ca][pa], ba),
              )),
              (O.thm[2].s[ca][pa] = ua),
              (O.thm[3].s[ca][pa] = ma));
        if (((ha = r.msfix), 0 < Math.abs(ha))) {
          var da = ha,
            va = da,
            ga = Math.pow(10, r.ATHlower * O.ATH.adjust);
          (da *= 2), (va *= 2);
          for (var Sa = 0; Sa < P.SBMAX_l; Sa++) {
            var Ra = O.ATH.cb_l[O.bm_l[Sa]] * ga,
              Ma = Math.min(
                Math.max(O.thm[0].l[Sa], Ra),
                Math.max(O.thm[1].l[Sa], Ra),
              ),
              Aa = Math.max(O.thm[2].l[Sa], Ra),
              Ba = Math.max(O.thm[3].l[Sa], Ra);
            if (Ma * da < Aa + Ba) {
              var wa = (Ma * va) / (Aa + Ba);
              (Aa *= wa), (Ba *= wa);
            }
            (O.thm[2].l[Sa] = Math.min(Aa, O.thm[2].l[Sa])),
              (O.thm[3].l[Sa] = Math.min(Ba, O.thm[3].l[Sa]));
          }
          for (ga *= P.BLKSIZE_s / P.BLKSIZE, Sa = 0; Sa < P.SBMAX_s; Sa++)
            for (var Ta = 0; 3 > Ta; Ta++)
              (Ra = O.ATH.cb_s[O.bm_s[Sa]] * ga),
                (Ma = Math.min(
                  Math.max(O.thm[0].s[Sa][Ta], Ra),
                  Math.max(O.thm[1].s[Sa][Ta], Ra),
                )),
                (Aa = Math.max(O.thm[2].s[Sa][Ta], Ra)),
                (Ba = Math.max(O.thm[3].s[Sa][Ta], Ra)),
                Ma * da < Aa + Ba &&
                  ((wa = (Ma * da) / (Aa + Ba)), (Aa *= wa), (Ba *= wa)),
                (O.thm[2].s[Sa][Ta] = Math.min(O.thm[2].s[Sa][Ta], Aa)),
                (O.thm[3].s[Sa][Ta] = Math.min(O.thm[3].s[Sa][Ta], Ba));
        }
      }
      var Ea = r.internal_flags;
      r.short_blocks != _.short_block_coupled ||
        (0 != F[0] && 0 != F[1]) ||
        (F[0] = F[1] = 0);
      for (var ka = 0; ka < Ea.channels_out; ka++)
        (C[ka] = P.NORM_TYPE),
          r.short_blocks == _.short_block_dispensed && (F[ka] = 1),
          r.short_blocks == _.short_block_forced && (F[ka] = 0),
          0 != F[ka]
            ? Ea.blocktype_old[ka] == P.SHORT_TYPE && (C[ka] = P.STOP_TYPE)
            : ((C[ka] = P.SHORT_TYPE),
              Ea.blocktype_old[ka] == P.NORM_TYPE &&
                (Ea.blocktype_old[ka] = P.START_TYPE),
              Ea.blocktype_old[ka] == P.STOP_TYPE &&
                (Ea.blocktype_old[ka] = P.SHORT_TYPE)),
          (B[ka] = Ea.blocktype_old[ka]),
          (Ea.blocktype_old[ka] = C[ka]);
      for (w = 0; w < Q; w++) {
        var ya = 0;
        if (1 < w) {
          var xa = M;
          ya = -2;
          var Pa = P.NORM_TYPE;
          (B[0] != P.SHORT_TYPE && B[1] != P.SHORT_TYPE) || (Pa = P.SHORT_TYPE);
          var Ia = S[v][w - 2];
        } else (xa = R), (ya = 0), (Pa = B[w]), (Ia = g[v][w]);
        (xa[ya + w] =
          Pa == P.SHORT_TYPE ? c(Ia, O.masking_lower) : b(Ia, O.masking_lower)),
          r.analysis && (O.pinfo.pe[v][w] = xa[ya + w]);
      }
      return 0;
    };
    var D = [
      -1730326e-23, -0.01703172, -1349528e-23, 0.0418072, -673278e-22,
      -0.0876324, -30835e-21, 0.1863476, -1104424e-22, -0.627638,
    ];
    (this.L3psycho_anal_vbr = function (n, i, d, v, g, S, R, M, A, B) {
      for (
        var w,
          E,
          y = n.internal_flags,
          x = a(P.HBLKSIZE),
          I = t([3, P.HBLKSIZE_s]),
          H = t([2, P.BLKSIZE]),
          V = t([2, 3, P.BLKSIZE_s]),
          O = t([4, P.CBANDS]),
          L = t([4, P.CBANDS]),
          N = t([4, 3]),
          X = [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
          ],
          q = e(2),
          Y = n.mode == o.JOINT_STEREO ? 4 : y.channels_out,
          C = t([2, 576]),
          F = n.internal_flags,
          j = F.channels_out,
          G = n.mode == o.JOINT_STEREO ? 4 : j,
          z = 0;
        z < j;
        z++
      ) {
        firbuf = i[z];
        for (var K = d + 576 - 350 - 21 + 192, Q = 0; 576 > Q; Q++) {
          for (var U, W = firbuf[K + Q + 10], J = (U = 0); 9 > J; J += 2)
            (W += D[J] * (firbuf[K + Q + J] + firbuf[K + Q + 21 - J])),
              (U +=
                D[J + 1] *
                (firbuf[K + Q + J + 1] + firbuf[K + Q + 21 - J - 1]));
          C[z][Q] = W + U;
        }
        g[v][z].en.assign(F.en[z]),
          g[v][z].thm.assign(F.thm[z]),
          2 < G &&
            (S[v][z].en.assign(F.en[z + 2]), S[v][z].thm.assign(F.thm[z + 2]));
      }
      for (z = 0; z < G; z++) {
        var $ = a(12),
          ee = a(12),
          ae = [0, 0, 0, 0],
          te = C[1 & z],
          se = 0,
          ne = 3 == z ? F.nsPsy.attackthre_s : F.nsPsy.attackthre,
          re = 1;
        if (2 == z)
          for (Q = 0, J = 576; 0 < J; ++Q, --J) {
            var _e = C[0][Q],
              ie = C[1][Q];
            (C[0][Q] = _e + ie), (C[1][Q] = _e - ie);
          }
        for (Q = 0; 3 > Q; Q++)
          (ee[Q] = F.nsPsy.last_en_subshort[z][Q + 6]),
            ($[Q] = ee[Q] / F.nsPsy.last_en_subshort[z][Q + 4]),
            (ae[0] += ee[Q]);
        for (Q = 0; 9 > Q; Q++) {
          for (var oe = se + 64, le = 1; se < oe; se++)
            le < Math.abs(te[se]) && (le = Math.abs(te[se]));
          (F.nsPsy.last_en_subshort[z][Q] = ee[Q + 3] = le),
            (ae[1 + Q / 3] += le),
            (le =
              le > ee[Q + 3 - 2]
                ? le / ee[Q + 3 - 2]
                : ee[Q + 3 - 2] > 10 * le
                ? ee[Q + 3 - 2] / (10 * le)
                : 0),
            ($[Q + 3] = le);
        }
        for (Q = 0; 3 > Q; ++Q) {
          var fe = ee[3 * Q + 3] + ee[3 * Q + 4] + ee[3 * Q + 5],
            he = 1;
          6 * ee[3 * Q + 5] < fe &&
            ((he *= 0.5), 6 * ee[3 * Q + 4] < fe && (he *= 0.5)),
            (N[z][Q] = he);
        }
        if (n.analysis) {
          var ce = $[0];
          for (Q = 1; 12 > Q; Q++) ce < $[Q] && (ce = $[Q]);
          (F.pinfo.ers[v][z] = F.pinfo.ers_save[z]), (F.pinfo.ers_save[z] = ce);
        }
        for (Q = 0; 12 > Q; Q++)
          0 == X[z][Q / 3] && $[Q] > ne && (X[z][Q / 3] = (Q % 3) + 1);
        for (Q = 1; 4 > Q; Q++) {
          var be = ae[Q - 1],
            ue = ae[Q];
          4e4 > Math.max(be, ue) &&
            be < 1.7 * ue &&
            ue < 1.7 * be &&
            (1 == Q && X[z][0] <= X[z][Q] && (X[z][0] = 0), (X[z][Q] = 0));
        }
        X[z][0] <= F.nsPsy.lastAttacks[z] && (X[z][0] = 0),
          (3 != F.nsPsy.lastAttacks[z] &&
            0 == X[z][0] + X[z][1] + X[z][2] + X[z][3]) ||
            ((re = 0),
            0 != X[z][1] && 0 != X[z][0] && (X[z][1] = 0),
            0 != X[z][2] && 0 != X[z][1] && (X[z][2] = 0),
            0 != X[z][3] && 0 != X[z][2] && (X[z][3] = 0)),
          2 > z ? (q[z] = re) : 0 == re && (q[0] = q[1] = 0),
          (A[z] = F.tot_ener[z]);
      }
      var me = n.internal_flags;
      n.short_blocks != _.short_block_coupled ||
        (0 != q[0] && 0 != q[1]) ||
        (q[0] = q[1] = 0);
      for (var pe = 0; pe < me.channels_out; pe++)
        n.short_blocks == _.short_block_dispensed && (q[pe] = 1),
          n.short_blocks == _.short_block_forced && (q[pe] = 0);
      for (var de = 0; de < Y; de++) {
        var ve = 1 & de;
        w = H;
        var ge = n,
          Se = de,
          Re = v,
          Me = x,
          Ae = w,
          Be = ve,
          we = ge.internal_flags;
        if (2 > Se) T.fft_long(we, Ae[Be], Se, i, d);
        else if (2 == Se)
          for (var Te = P.BLKSIZE - 1; 0 <= Te; --Te) {
            var Ee = Ae[Be + 0][Te],
              ke = Ae[Be + 1][Te];
            (Ae[Be + 0][Te] = (Ee + ke) * Z.SQRT2 * 0.5),
              (Ae[Be + 1][Te] = (Ee - ke) * Z.SQRT2 * 0.5);
          }
        for (
          Me[0] = Ae[Be + 0][0], Me[0] *= Me[0], Te = P.BLKSIZE / 2 - 1;
          0 <= Te;
          --Te
        ) {
          var ye = Ae[Be + 0][P.BLKSIZE / 2 - Te],
            xe = Ae[Be + 0][P.BLKSIZE / 2 + Te];
          Me[P.BLKSIZE / 2 - Te] = 0.5 * (ye * ye + xe * xe);
        }
        var Pe = 0;
        for (Te = 11; Te < P.HBLKSIZE; Te++) Pe += Me[Te];
        if (((we.tot_ener[Se] = Pe), ge.analysis)) {
          for (Te = 0; Te < P.HBLKSIZE; Te++)
            (we.pinfo.energy[Re][Se][Te] = we.pinfo.energy_save[Se][Te]),
              (we.pinfo.energy_save[Se][Te] = Me[Te]);
          we.pinfo.pe[Re][Se] = we.pe[Se];
        }
        var Ie = de,
          He = x,
          Ve = n.internal_flags;
        if (
          (2 == n.athaa_loudapprox &&
            2 > Ie &&
            ((Ve.loudness_sq[v][Ie] = Ve.loudness_sq_save[Ie]),
            (Ve.loudness_sq_save[Ie] = s(He, Ve))),
          0 != q[ve])
        ) {
          var Oe = void 0,
            Le = y,
            Ne = x,
            De = O[de],
            Xe = L[de],
            qe = de,
            Ye = a(P.CBANDS),
            Ce = a(P.CBANDS),
            Fe = e(P.CBANDS + 2);
          u(Le, Ne, De, Ye, Ce), m(Le, Ye, Ce, Fe);
          var je = 0;
          for (Oe = 0; Oe < Le.npart_l; Oe++) {
            var Ge = Le.s3ind[Oe][0],
              ze = Le.s3ind[Oe][1],
              Ke = 0,
              Ze = 0;
            (Ke = Fe[Ge]), (Ze += 1);
            var Qe = Le.s3_ll[je] * De[Ge] * k[Fe[Ge]];
            for (++je, ++Ge; Ge <= ze; ) {
              (Ke += Fe[Ge]), (Ze += 1);
              var Ue = Le.s3_ll[je] * De[Ge] * k[Fe[Ge]];
              (Qe = r(Qe, Ue, Ge - Oe)), ++je, ++Ge;
            }
            Ke = (1 + 2 * Ke) / (2 * Ze);
            var We = 0.5 * k[Ke];
            if (((Qe *= We), Le.blocktype_old[1 & qe] == P.SHORT_TYPE)) {
              var Je = 2 * Le.nb_1[qe][Oe];
              Xe[Oe] = 0 < Je ? Math.min(Qe, Je) : Math.min(Qe, 0.3 * De[Oe]);
            } else {
              var $e = 16 * Le.nb_2[qe][Oe],
                ea = 2 * Le.nb_1[qe][Oe];
              0 >= $e && ($e = Qe),
                0 >= ea && (ea = Qe),
                (Je =
                  Le.blocktype_old[1 & qe] == P.NORM_TYPE
                    ? Math.min(ea, $e)
                    : ea),
                (Xe[Oe] = Math.min(Qe, Je));
            }
            (Le.nb_2[qe][Oe] = Le.nb_1[qe][Oe]),
              (Le.nb_1[qe][Oe] = Qe),
              (Ue = Ye[Oe]),
              (Ue *= Le.minval_l[Oe]),
              (Ue *= We),
              Xe[Oe] > Ue && (Xe[Oe] = Ue),
              1 < Le.masking_lower && (Xe[Oe] *= Le.masking_lower),
              Xe[Oe] > De[Oe] && (Xe[Oe] = De[Oe]),
              1 > Le.masking_lower && (Xe[Oe] *= Le.masking_lower);
          }
          for (; Oe < P.CBANDS; ++Oe) (De[Oe] = 0), (Xe[Oe] = 0);
        } else
          for (var aa = y, ta = de, sa = 0; sa < aa.npart_l; sa++)
            (aa.nb_2[ta][sa] = aa.nb_1[ta][sa]), (aa.nb_1[ta][sa] = 0);
      }
      for (
        2 == q[0] + q[1] &&
          n.mode == o.JOINT_STEREO &&
          p(
            O,
            L,
            y.mld_cb_l,
            y.ATH.cb_l,
            n.ATHlower * y.ATH.adjust,
            n.msfix,
            y.npart_l,
          ),
          de = 0;
        de < Y;
        de++
      )
        (ve = 1 & de), 0 != q[ve] && f(y, O[de], L[de], de);
      for (var na = 0; 3 > na; na++) {
        for (de = 0; de < Y; ++de)
          if (((ve = 1 & de), 0 != q[ve])) {
            var ra = y,
              _a = de;
            if (0 == na)
              for (var ia = 0; ia < ra.npart_s; ia++)
                (ra.nb_s2[_a][ia] = ra.nb_s1[_a][ia]), (ra.nb_s1[_a][ia] = 0);
          } else {
            E = V;
            var oa = de,
              la = na,
              fa = I,
              ha = E,
              ca = ve,
              ba = n.internal_flags;
            if (
              (0 == la && 2 > oa && T.fft_short(ba, ha[ca], oa, i, d), 2 == oa)
            )
              for (var ua = P.BLKSIZE_s - 1; 0 <= ua; --ua) {
                var ma = ha[ca + 0][la][ua],
                  pa = ha[ca + 1][la][ua];
                (ha[ca + 0][la][ua] = (ma + pa) * Z.SQRT2 * 0.5),
                  (ha[ca + 1][la][ua] = (ma - pa) * Z.SQRT2 * 0.5);
              }
            for (
              fa[la][0] = ha[ca + 0][la][0],
                fa[la][0] *= fa[la][0],
                ua = P.BLKSIZE_s / 2 - 1;
              0 <= ua;
              --ua
            ) {
              var da = ha[ca + 0][la][P.BLKSIZE_s / 2 - ua],
                va = ha[ca + 0][la][P.BLKSIZE_s / 2 + ua];
              fa[la][P.BLKSIZE_s / 2 - ua] = 0.5 * (da * da + va * va);
            }
            var ga = void 0,
              Sa = void 0,
              Ra = void 0,
              Ma = I,
              Aa = O[de],
              Ba = L[de],
              wa = de,
              Ta = na,
              Ea = n.internal_flags,
              ka = new float[P.CBANDS](),
              ya = a(P.CBANDS),
              xa = new int[P.CBANDS]();
            for (ga = Sa = 0; ga < Ea.npart_s; ++ga) {
              var Pa = 0,
                Ia = 0,
                Ha = Ea.numlines_s[ga];
              for (Ra = 0; Ra < Ha; ++Ra, ++Sa) {
                var Va = Ma[Ta][Sa];
                (Pa += Va), Ia < Va && (Ia = Va);
              }
              (Aa[ga] = Pa), (ka[ga] = Ia), (ya[ga] = Pa / Ha);
            }
            for (; ga < P.CBANDS; ++ga) (ka[ga] = 0), (ya[ga] = 0);
            var Oa = Ea,
              La = ka,
              Na = ya,
              Da = xa,
              Xa = k.length - 1,
              qa = 0,
              Ya = Na[qa] + Na[qa + 1];
            if (0 < Ya) {
              var Ca = La[qa];
              Ca < La[qa + 1] && (Ca = La[qa + 1]),
                (Ya =
                  (20 * (2 * Ca - Ya)) /
                  (Ya * (Oa.numlines_s[qa] + Oa.numlines_s[qa + 1] - 1)));
              var Fa = 0 | Ya;
              Fa > Xa && (Fa = Xa), (Da[qa] = Fa);
            } else Da[qa] = 0;
            for (qa = 1; qa < Oa.npart_s - 1; qa++)
              (Ya = Na[qa - 1] + Na[qa] + Na[qa + 1]),
                0 < Ya
                  ? ((Ca = La[qa - 1]),
                    Ca < La[qa] && (Ca = La[qa]),
                    Ca < La[qa + 1] && (Ca = La[qa + 1]),
                    (Ya =
                      (20 * (3 * Ca - Ya)) /
                      (Ya *
                        (Oa.numlines_s[qa - 1] +
                          Oa.numlines_s[qa] +
                          Oa.numlines_s[qa + 1] -
                          1))),
                    (Fa = 0 | Ya),
                    Fa > Xa && (Fa = Xa),
                    (Da[qa] = Fa))
                  : (Da[qa] = 0);
            for (
              Ya = Na[qa - 1] + Na[qa],
                0 < Ya
                  ? ((Ca = La[qa - 1]),
                    Ca < La[qa] && (Ca = La[qa]),
                    (Ya =
                      (20 * (2 * Ca - Ya)) /
                      (Ya * (Oa.numlines_s[qa - 1] + Oa.numlines_s[qa] - 1))),
                    (Fa = 0 | Ya),
                    Fa > Xa && (Fa = Xa),
                    (Da[qa] = Fa))
                  : (Da[qa] = 0),
                Sa = ga = 0;
              ga < Ea.npart_s;
              ga++
            ) {
              var ja = Ea.s3ind_s[ga][0],
                Ga = Ea.s3ind_s[ga][1],
                za = xa[ja],
                Ka = 1,
                Za = Ea.s3_ss[Sa] * Aa[ja] * k[xa[ja]];
              for (++Sa, ++ja; ja <= Ga; ) {
                (za += xa[ja]), (Ka += 1);
                var Qa = Ea.s3_ss[Sa] * Aa[ja] * k[xa[ja]];
                (Za = r(Za, Qa, ja - ga)), ++Sa, ++ja;
              }
              za = (1 + 2 * za) / (2 * Ka);
              var Ua = 0.5 * k[za];
              (Za *= Ua),
                (Ba[ga] = Za),
                (Ea.nb_s2[wa][ga] = Ea.nb_s1[wa][ga]),
                (Ea.nb_s1[wa][ga] = Za),
                (Qa = ka[ga]),
                (Qa *= Ea.minval_s[ga]),
                (Qa *= Ua),
                Ba[ga] > Qa && (Ba[ga] = Qa),
                1 < Ea.masking_lower && (Ba[ga] *= Ea.masking_lower),
                Ba[ga] > Aa[ga] && (Ba[ga] = Aa[ga]),
                1 > Ea.masking_lower && (Ba[ga] *= Ea.masking_lower);
            }
            for (; ga < P.CBANDS; ++ga) (Aa[ga] = 0), (Ba[ga] = 0);
          }
        for (
          0 == q[0] + q[1] &&
            n.mode == o.JOINT_STEREO &&
            p(
              O,
              L,
              y.mld_cb_s,
              y.ATH.cb_s,
              n.ATHlower * y.ATH.adjust,
              n.msfix,
              y.npart_s,
            ),
            de = 0;
          de < Y;
          ++de
        )
          (ve = 1 & de), 0 == q[ve] && l(y, O[de], L[de], de, na);
      }
      for (de = 0; de < Y; de++)
        if (((ve = 1 & de), 0 == q[ve]))
          for (var Wa = 0; Wa < P.SBMAX_s; Wa++) {
            var Ja = a(3);
            for (na = 0; 3 > na; na++) {
              var $a = y.thm[de].s[Wa][na];
              if ((($a *= 0.8), 2 <= X[de][na] || 1 == X[de][na + 1])) {
                var et = 0 != na ? na - 1 : 2,
                  at = h(y.thm[de].s[Wa][et], $a, 0.36);
                $a = Math.min($a, at);
              } else
                1 == X[de][na]
                  ? ((et = 0 != na ? na - 1 : 2),
                    (at = h(y.thm[de].s[Wa][et], $a, 0.18)),
                    ($a = Math.min($a, at)))
                  : ((0 != na && 3 == X[de][na - 1]) ||
                      (0 == na && 3 == y.nsPsy.lastAttacks[de])) &&
                    ((et = 2 != na ? na + 1 : 0),
                    (at = h(y.thm[de].s[Wa][et], $a, 0.18)),
                    ($a = Math.min($a, at)));
              ($a *= N[de][na]), (Ja[na] = $a);
            }
            for (na = 0; 3 > na; na++) y.thm[de].s[Wa][na] = Ja[na];
          }
      for (de = 0; de < Y; de++) y.nsPsy.lastAttacks[de] = X[de][2];
      for (var tt = n.internal_flags, st = 0; st < tt.channels_out; st++) {
        var nt = P.NORM_TYPE;
        0 != q[st]
          ? tt.blocktype_old[st] == P.SHORT_TYPE && (nt = P.STOP_TYPE)
          : ((nt = P.SHORT_TYPE),
            tt.blocktype_old[st] == P.NORM_TYPE &&
              (tt.blocktype_old[st] = P.START_TYPE),
            tt.blocktype_old[st] == P.STOP_TYPE &&
              (tt.blocktype_old[st] = P.SHORT_TYPE)),
          (B[st] = tt.blocktype_old[st]),
          (tt.blocktype_old[st] = nt);
      }
      for (de = 0; de < Y; de++) {
        if (1 < de) {
          var rt = M,
            _t = -2,
            it = P.NORM_TYPE;
          (B[0] != P.SHORT_TYPE && B[1] != P.SHORT_TYPE) || (it = P.SHORT_TYPE);
          var ot = S[v][de - 2];
        } else (rt = R), (_t = 0), (it = B[de]), (ot = g[v][de]);
        (rt[_t + de] =
          it == P.SHORT_TYPE ? c(ot, y.masking_lower) : b(ot, y.masking_lower)),
          n.analysis && (y.pinfo.pe[v][de] = rt[_t + de]);
      }
      return 0;
    }),
      (this.psymodel_init = function (e) {
        var t,
          s = e.internal_flags,
          n = !0,
          r = 13,
          _ = 0,
          o = 0,
          l = -8.25,
          f = -4.5,
          h = a(P.CBANDS),
          c = a(P.CBANDS),
          b = a(P.CBANDS),
          u = e.out_samplerate;
        switch (e.experimentalZ) {
          default:
          case 0:
            n = !0;
            break;
          case 1:
            n = e.VBR != i.vbr_mtrh && e.VBR != i.vbr_mt;
            break;
          case 2:
            n = !1;
            break;
          case 3:
            (r = 8), (_ = -1.75), (o = -0.0125), (l = -8.25), (f = -2.25);
        }
        for (
          s.ms_ener_ratio_old = 0.25,
            s.blocktype_old[0] = s.blocktype_old[1] = P.NORM_TYPE,
            t = 0;
          4 > t;
          ++t
        ) {
          for (var m = 0; m < P.CBANDS; ++m)
            (s.nb_1[t][m] = 1e20),
              (s.nb_2[t][m] = 1e20),
              (s.nb_s1[t][m] = s.nb_s2[t][m] = 1);
          for (var p = 0; p < P.SBMAX_l; p++)
            (s.en[t].l[p] = 1e20), (s.thm[t].l[p] = 1e20);
          for (m = 0; 3 > m; ++m) {
            for (p = 0; p < P.SBMAX_s; p++)
              (s.en[t].s[p][m] = 1e20), (s.thm[t].s[p][m] = 1e20);
            s.nsPsy.lastAttacks[t] = 0;
          }
          for (m = 0; 9 > m; m++) s.nsPsy.last_en_subshort[t][m] = 10;
        }
        for (
          s.loudness_sq_save[0] = s.loudness_sq_save[1] = 0,
            s.npart_l = g(
              s.numlines_l,
              s.bo_l,
              s.bm_l,
              h,
              c,
              s.mld_l,
              s.PSY.bo_l_weight,
              u,
              P.BLKSIZE,
              s.scalefac_band.l,
              P.BLKSIZE / 1152,
              P.SBMAX_l,
            ),
            t = 0;
          t < s.npart_l;
          t++
        )
          (p = _),
            h[t] >= r &&
              (p = (o * (h[t] - r)) / (24 - r) + (_ * (24 - h[t])) / (24 - r)),
            (b[t] = Math.pow(10, p / 10)),
            (s.rnumlines_l[t] = 0 < s.numlines_l[t] ? 1 / s.numlines_l[t] : 0);
        for (
          s.s3_ll = S(s.s3ind, s.npart_l, h, c, b, n), t = m = 0;
          t < s.npart_l;
          t++
        ) {
          for (o = Q.MAX_VALUE, p = 0; p < s.numlines_l[t]; p++, m++)
            (_ = (u * m) / (1e3 * P.BLKSIZE)),
              (_ = this.ATHformula(1e3 * _, e) - 20),
              (_ = Math.pow(10, 0.1 * _)),
              (_ *= s.numlines_l[t]),
              o > _ && (o = _);
          (s.ATH.cb_l[t] = o),
            (o = (20 * h[t]) / 10 - 20),
            6 < o && (o = 100),
            -15 > o && (o = -15),
            (o -= 8),
            (s.minval_l[t] = Math.pow(10, o / 10) * s.numlines_l[t]);
        }
        for (
          s.npart_s = g(
            s.numlines_s,
            s.bo_s,
            s.bm_s,
            h,
            c,
            s.mld_s,
            s.PSY.bo_s_weight,
            u,
            P.BLKSIZE_s,
            s.scalefac_band.s,
            P.BLKSIZE_s / 384,
            P.SBMAX_s,
          ),
            t = m = 0;
          t < s.npart_s;
          t++
        ) {
          for (
            p = l,
              h[t] >= r &&
                (p =
                  (f * (h[t] - r)) / (24 - r) + (l * (24 - h[t])) / (24 - r)),
              b[t] = Math.pow(10, p / 10),
              o = Q.MAX_VALUE,
              p = 0;
            p < s.numlines_s[t];
            p++, m++
          )
            (_ = (u * m) / (1e3 * P.BLKSIZE_s)),
              (_ = this.ATHformula(1e3 * _, e) - 20),
              (_ = Math.pow(10, 0.1 * _)),
              (_ *= s.numlines_s[t]),
              o > _ && (o = _);
          (s.ATH.cb_s[t] = o),
            (o = (7 * h[t]) / 12 - 7),
            12 < h[t] && (o *= 1 + 3.1 * Math.log(1 + o)),
            12 > h[t] && (o *= 1 + 2.3 * Math.log(1 - o)),
            -15 > o && (o = -15),
            (o -= 8),
            (s.minval_s[t] = Math.pow(10, o / 10) * s.numlines_s[t]);
        }
        for (
          s.s3_ss = S(s.s3ind_s, s.npart_s, h, c, b, n),
            A = Math.pow(10, 0.5625),
            B = Math.pow(10, 1.5),
            w = Math.pow(10, 1.5),
            T.init_fft(s),
            s.decay = Math.exp(-2.302585092994046 / ((0.01 * u) / 192)),
            t = 3.5,
            0 != (2 & e.exp_nspsytune) && (t = 1),
            0 < Math.abs(e.msfix) && (t = e.msfix),
            e.msfix = t,
            n = 0;
          n < s.npart_l;
          n++
        )
          s.s3ind[n][1] > s.npart_l - 1 && (s.s3ind[n][1] = s.npart_l - 1);
        if (
          ((s.ATH.decay = Math.pow(10, ((576 * s.mode_gr) / u) * -1.2)),
          (s.ATH.adjust = 0.01),
          (s.ATH.adjustLimit = 1),
          -1 != e.ATHtype)
        ) {
          for (
            m = e.out_samplerate / P.BLKSIZE, t = _ = n = 0;
            t < P.BLKSIZE / 2;
            ++t
          )
            (_ += m),
              (s.ATH.eql_w[t] = 1 / Math.pow(10, this.ATHformula(_, e) / 10)),
              (n += s.ATH.eql_w[t]);
          for (n = 1 / n, t = P.BLKSIZE / 2; 0 <= --t; ) s.ATH.eql_w[t] *= n;
        }
        for (n = m = 0; n < s.npart_s; ++n)
          for (t = 0; t < s.numlines_s[n]; ++t) ++m;
        for (n = m = 0; n < s.npart_l; ++n)
          for (t = 0; t < s.numlines_l[n]; ++t) ++m;
        for (t = m = 0; t < s.npart_l; t++)
          (_ = (u * (m + s.numlines_l[t] / 2)) / (1 * P.BLKSIZE)),
            (s.mld_cb_l[t] = R(_)),
            (m += s.numlines_l[t]);
        for (; t < P.CBANDS; ++t) s.mld_cb_l[t] = 1;
        for (t = m = 0; t < s.npart_s; t++)
          (_ = (u * (m + s.numlines_s[t] / 2)) / (1 * P.BLKSIZE_s)),
            (s.mld_cb_s[t] = R(_)),
            (m += s.numlines_s[t]);
        for (; t < P.CBANDS; ++t) s.mld_cb_s[t] = 1;
        return 0;
      }),
      (this.ATHformula = function (e, a) {
        switch (a.ATHtype) {
          case 0:
            e = M(e, 9);
            break;
          case 1:
            e = M(e, -1);
            break;
          case 2:
            e = M(e, 0);
            break;
          case 3:
            e = M(e, 1) + 6;
            break;
          case 4:
            e = M(e, a.ATHcurve);
            break;
          default:
            e = M(e, 0);
        }
        return e;
      });
  }
  function X() {
    function e() {
      (this.mask_adjust_short = this.mask_adjust = 0),
        (this.bo_l_weight = a(P.SBMAX_l)),
        (this.bo_s_weight = a(P.SBMAX_s));
    }
    function t() {
      this.lowerlimit = 0;
    }
    function r(e, a) {
      this.lowpass = a;
    }
    function l(e) {
      return 1 < e ? 0 : 0 >= e ? 1 : Math.cos((Math.PI / 2) * e);
    }
    function h(e, a) {
      switch (e) {
        case 44100:
          return (a.version = 1), 0;
        case 48e3:
          return (a.version = 1);
        case 32e3:
          return (a.version = 1), 2;
        case 22050:
          return (a.version = 0);
        case 24e3:
          return (a.version = 0), 1;
        case 16e3:
          return (a.version = 0), 2;
        case 11025:
          return (a.version = 0);
        case 12e3:
          return (a.version = 0), 1;
        case 8e3:
          return (a.version = 0), 2;
        default:
          return (a.version = 0), -1;
      }
    }
    function c(e, a, t) {
      16e3 > t && (a = 2), (t = U.bitrate_table[a][1]);
      for (var s = 2; 14 >= s; s++)
        0 < U.bitrate_table[a][s] &&
          Math.abs(U.bitrate_table[a][s] - e) < Math.abs(t - e) &&
          (t = U.bitrate_table[a][s]);
      return t;
    }
    function b(e, a, t) {
      for (16e3 > t && (a = 2), t = 0; 14 >= t; t++)
        if (0 < U.bitrate_table[a][t] && U.bitrate_table[a][t] == e) return t;
      return -1;
    }
    function m(e, a) {
      var t = [
        new r(8, 2e3),
        new r(16, 3700),
        new r(24, 3900),
        new r(32, 5500),
        new r(40, 7e3),
        new r(48, 7500),
        new r(56, 1e4),
        new r(64, 11e3),
        new r(80, 13500),
        new r(96, 15100),
        new r(112, 15600),
        new r(128, 17e3),
        new r(160, 17500),
        new r(192, 18600),
        new r(224, 19400),
        new r(256, 19700),
        new r(320, 20500),
      ];
      (a = w.nearestBitrateFullIndex(a)), (e.lowerlimit = t[a].lowpass);
    }
    function p(e) {
      var a = P.BLKSIZE + e.framesize - P.FFTOFFSET;
      return Math.max(a, 512 + e.framesize - 32);
    }
    function d(e, t, s, n, r, _, i) {
      var o = e.internal_flags,
        l = 0,
        h = [null, null],
        c = [null, null];
      if (4294479419 != o.Class_ID) return -3;
      if (0 == n) return 0;
      var b = E.copy_buffer(o, r, _, i, 0);
      if (0 > b) return b;
      if (
        ((_ += b),
        (l += b),
        (c[0] = t),
        (c[1] = s),
        u.NEQ(e.scale, 0) && u.NEQ(e.scale, 1))
      )
        for (b = 0; b < n; ++b)
          (c[0][b] *= e.scale), 2 == o.channels_out && (c[1][b] *= e.scale);
      if (u.NEQ(e.scale_left, 0) && u.NEQ(e.scale_left, 1))
        for (b = 0; b < n; ++b) c[0][b] *= e.scale_left;
      if (u.NEQ(e.scale_right, 0) && u.NEQ(e.scale_right, 1))
        for (b = 0; b < n; ++b) c[1][b] *= e.scale_right;
      if (2 == e.num_channels && 1 == o.channels_out)
        for (b = 0; b < n; ++b)
          (c[0][b] = 0.5 * (c[0][b] + c[1][b])), (c[1][b] = 0);
      for (t = p(e), h[0] = o.mfbuf[0], h[1] = o.mfbuf[1], s = 0; 0 < n; ) {
        var m = [null, null];
        (m[0] = c[0]), (m[1] = c[1]), (b = new v());
        var d = e,
          S = h,
          R = s,
          M = n,
          A = b,
          k = d.internal_flags;
        if (0.9999 > k.resample_ratio || 1.0001 < k.resample_ratio)
          for (var y = 0; y < k.channels_out; y++) {
            var x,
              I = new g(),
              H = A,
              V = S[y],
              O = k.mf_size,
              N = d.framesize,
              D = m[y],
              X = R,
              q = M,
              Y = I,
              C = y,
              F = d.internal_flags,
              j = 0,
              G = d.out_samplerate / B(d.out_samplerate, d.in_samplerate);
            G > L.BPC && (G = L.BPC);
            var z =
                1e-4 >
                Math.abs(F.resample_ratio - Math.floor(0.5 + F.resample_ratio))
                  ? 1
                  : 0,
              K = 1 / F.resample_ratio;
            1 < K && (K = 1);
            var Z = 31;
            if (
              (0 == Z % 2 && --Z,
              (Z += z),
              (z = Z + 1),
              0 == F.fill_buffer_resample_init)
            ) {
              for (
                F.inbuf_old[0] = a(z), F.inbuf_old[1] = a(z), x = 0;
                x <= 2 * G;
                ++x
              )
                F.blackfilt[x] = a(z);
              for (F.itime[0] = 0, j = F.itime[1] = 0; j <= 2 * G; j++) {
                var Q = 0,
                  U = (j - G) / (2 * G);
                for (x = 0; x <= Z; x++) {
                  var W = F.blackfilt[j],
                    J = x,
                    $ = x - U,
                    ee = Math.PI * K;
                  ($ /= Z), 0 > $ && ($ = 0), 1 < $ && ($ = 1);
                  var ae = $ - 0.5;
                  ($ =
                    0.42 -
                    0.5 * Math.cos(2 * $ * Math.PI) +
                    0.08 * Math.cos(4 * $ * Math.PI)),
                    (Q += W[J] =
                      1e-9 > Math.abs(ae)
                        ? ee / Math.PI
                        : ($ * Math.sin(Z * ee * ae)) / (Math.PI * Z * ae));
                }
                for (x = 0; x <= Z; x++) F.blackfilt[j][x] /= Q;
              }
              F.fill_buffer_resample_init = 1;
            }
            for (Q = F.inbuf_old[C], K = 0; K < N; K++) {
              if (
                ((x = K * F.resample_ratio),
                (j = 0 | Math.floor(x - F.itime[C])),
                Z + j - Z / 2 >= q)
              )
                break;
              for (
                U = x - F.itime[C] - (j + (Z % 2) * 0.5),
                  U = 0 | Math.floor(2 * U * G + G + 0.5),
                  x = W = 0;
                x <= Z;
                ++x
              )
                (J = 0 | (x + j - Z / 2)),
                  (W += (0 > J ? Q[z + J] : D[X + J]) * F.blackfilt[U][x]);
              V[O + K] = W;
            }
            if (
              ((Y.num_used = Math.min(q, Z + j - Z / 2)),
              (F.itime[C] += Y.num_used - K * F.resample_ratio),
              Y.num_used >= z)
            )
              for (x = 0; x < z; x++) Q[x] = D[X + Y.num_used + x - z];
            else {
              for (V = z - Y.num_used, x = 0; x < V; ++x)
                Q[x] = Q[x + Y.num_used];
              for (j = 0; x < z; ++x, ++j) Q[x] = D[X + j];
            }
            (H.n_out = K), (A.n_in = I.num_used);
          }
        else
          for (
            A.n_out = Math.min(d.framesize, M), A.n_in = A.n_out, d = 0;
            d < A.n_out;
            ++d
          )
            (S[0][k.mf_size + d] = m[0][R + d]),
              2 == k.channels_out && (S[1][k.mf_size + d] = m[1][R + d]);
        if (
          ((S = b.n_in),
          (b = b.n_out),
          o.findReplayGain &&
            !o.decode_on_the_fly &&
            T.AnalyzeSamples(
              o.rgdata,
              h[0],
              o.mf_size,
              h[1],
              o.mf_size,
              b,
              o.channels_out,
            ) == f.GAIN_ANALYSIS_ERROR)
        )
          return -6;
        if (
          ((n -= S),
          (s += S),
          (o.mf_size += b),
          1 > o.mf_samples_to_encode &&
            (o.mf_samples_to_encode = P.ENCDELAY + P.POSTDELAY),
          (o.mf_samples_to_encode += b),
          o.mf_size >= t)
        ) {
          if (
            ((S = i - l),
            0 == i && (S = 0),
            (b = e),
            (S = w.enc.lame_encode_mp3_frame(b, h[0], h[1], r, _, S)),
            b.frameNum++,
            (b = S),
            0 > b)
          )
            return b;
          for (
            _ += b,
              l += b,
              o.mf_size -= e.framesize,
              o.mf_samples_to_encode -= e.framesize,
              S = 0;
            S < o.channels_out;
            S++
          )
            for (b = 0; b < o.mf_size; b++) h[S][b] = h[S][b + e.framesize];
        }
      }
      return l;
    }
    function v() {
      this.n_out = this.n_in = 0;
    }
    function g() {
      this.num_used = 0;
    }
    function B(e, a) {
      return 0 != a ? B(a, e % a) : e;
    }
    var w = this;
    (X.V9 = 410),
      (X.V8 = 420),
      (X.V7 = 430),
      (X.V6 = 440),
      (X.V5 = 450),
      (X.V4 = 460),
      (X.V3 = 470),
      (X.V2 = 480),
      (X.V1 = 490),
      (X.V0 = 500),
      (X.R3MIX = 1e3),
      (X.STANDARD = 1001),
      (X.EXTREME = 1002),
      (X.INSANE = 1003),
      (X.STANDARD_FAST = 1004),
      (X.EXTREME_FAST = 1005),
      (X.MEDIUM = 1006),
      (X.MEDIUM_FAST = 1007),
      (X.LAME_MAXMP3BUFFER = 147456);
    var T,
      E,
      k,
      y,
      x,
      I,
      H,
      V,
      O = new D();
    (this.enc = new P()),
      (this.setModules = function (e, a, t, s, n, r, _, i, o) {
        (T = e),
          (E = a),
          (k = t),
          (y = s),
          (x = n),
          (I = r),
          (H = i),
          (V = o),
          this.enc.setModules(E, O, y, I);
      }),
      (this.lame_init = function () {
        var e = new S();
        e.class_id = 4294479419;
        var a = (e.internal_flags = new L());
        return (
          (e.mode = o.NOT_SET),
          (e.original = 1),
          (e.in_samplerate = 44100),
          (e.num_channels = 2),
          (e.num_samples = -1),
          (e.bWriteVbrTag = !0),
          (e.quality = -1),
          (e.short_blocks = null),
          (a.subblock_gain = -1),
          (e.lowpassfreq = 0),
          (e.highpassfreq = 0),
          (e.lowpasswidth = -1),
          (e.highpasswidth = -1),
          (e.VBR = i.vbr_off),
          (e.VBR_q = 4),
          (e.ATHcurve = -1),
          (e.VBR_mean_bitrate_kbps = 128),
          (e.VBR_min_bitrate_kbps = 0),
          (e.VBR_max_bitrate_kbps = 0),
          (e.VBR_hard_min = 0),
          (a.VBR_min_bitrate = 1),
          (a.VBR_max_bitrate = 13),
          (e.quant_comp = -1),
          (e.quant_comp_short = -1),
          (e.msfix = -1),
          (a.resample_ratio = 1),
          (a.OldValue[0] = 180),
          (a.OldValue[1] = 180),
          (a.CurrentStep[0] = 4),
          (a.CurrentStep[1] = 4),
          (a.masking_lower = 1),
          (a.nsPsy.attackthre = -1),
          (a.nsPsy.attackthre_s = -1),
          (e.scale = -1),
          (e.athaa_type = -1),
          (e.ATHtype = -1),
          (e.athaa_loudapprox = -1),
          (e.athaa_sensitivity = 0),
          (e.useTemporal = null),
          (e.interChRatio = -1),
          (a.mf_samples_to_encode = P.ENCDELAY + P.POSTDELAY),
          (e.encoder_padding = 0),
          (a.mf_size = P.ENCDELAY - P.MDCTDELAY),
          (e.findReplayGain = !1),
          (e.decode_on_the_fly = !1),
          (a.decode_on_the_fly = !1),
          (a.findReplayGain = !1),
          (a.findPeakSample = !1),
          (a.RadioGain = 0),
          (a.AudiophileGain = 0),
          (a.noclipGainChange = 0),
          (a.noclipScale = -1),
          (e.preset = 0),
          (e.write_id3tag_automatic = !0),
          (e.lame_allocated_gfp = 1),
          e
        );
      }),
      (this.nearestBitrateFullIndex = function (e) {
        for (
          var a = [
              8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224,
              256, 320,
            ],
            t = a[16],
            s = 16,
            n = a[16],
            r = 16,
            _ = 0;
          16 > _;
          _++
        )
          if (Math.max(e, a[_ + 1]) != e) {
            (t = a[_ + 1]), (s = _ + 1), (n = a[_]), (r = _);
            break;
          }
        return t - e > e - n ? r : s;
      }),
      (this.lame_init_params = function (a) {
        var n = a.internal_flags;
        if (
          ((n.Class_ID = 0),
          null == n.ATH && (n.ATH = new A()),
          null == n.PSY && (n.PSY = new e()),
          null == n.rgdata && (n.rgdata = new R()),
          (n.channels_in = a.num_channels),
          1 == n.channels_in && (a.mode = o.MONO),
          (n.channels_out = a.mode == o.MONO ? 1 : 2),
          (n.mode_ext = P.MPG_MD_MS_LR),
          a.mode == o.MONO && (a.force_ms = !1),
          a.VBR == i.vbr_off &&
            128 != a.VBR_mean_bitrate_kbps &&
            0 == a.brate &&
            (a.brate = a.VBR_mean_bitrate_kbps),
          a.VBR != i.vbr_off &&
            a.VBR != i.vbr_mtrh &&
            a.VBR != i.vbr_mt &&
            (a.free_format = !1),
          a.VBR == i.vbr_off &&
            0 == a.brate &&
            u.EQ(a.compression_ratio, 0) &&
            (a.compression_ratio = 11.025),
          a.VBR == i.vbr_off &&
            0 < a.compression_ratio &&
            (0 == a.out_samplerate &&
              (a.out_samplerate = map2MP3Frequency(
                int(0.97 * a.in_samplerate),
              )),
            (a.brate =
              0 |
              ((16 * a.out_samplerate * n.channels_out) /
                (1e3 * a.compression_ratio))),
            (n.samplerate_index = h(a.out_samplerate, a)),
            a.free_format ||
              (a.brate = c(a.brate, a.version, a.out_samplerate))),
          0 != a.out_samplerate &&
            (16e3 > a.out_samplerate
              ? ((a.VBR_mean_bitrate_kbps = Math.max(
                  a.VBR_mean_bitrate_kbps,
                  8,
                )),
                (a.VBR_mean_bitrate_kbps = Math.min(
                  a.VBR_mean_bitrate_kbps,
                  64,
                )))
              : 32e3 > a.out_samplerate
              ? ((a.VBR_mean_bitrate_kbps = Math.max(
                  a.VBR_mean_bitrate_kbps,
                  8,
                )),
                (a.VBR_mean_bitrate_kbps = Math.min(
                  a.VBR_mean_bitrate_kbps,
                  160,
                )))
              : ((a.VBR_mean_bitrate_kbps = Math.max(
                  a.VBR_mean_bitrate_kbps,
                  32,
                )),
                (a.VBR_mean_bitrate_kbps = Math.min(
                  a.VBR_mean_bitrate_kbps,
                  320,
                )))),
          0 == a.lowpassfreq)
        ) {
          switch (a.VBR) {
            case i.vbr_off:
              var r = new t();
              m(r, a.brate), (r = r.lowerlimit);
              break;
            case i.vbr_abr:
              (r = new t()), m(r, a.VBR_mean_bitrate_kbps), (r = r.lowerlimit);
              break;
            case i.vbr_rh:
              var p = [
                19500, 19e3, 18600, 18e3, 17500, 16e3, 15600, 14900, 12500, 1e4,
                3950,
              ];
              if (0 <= a.VBR_q && 9 >= a.VBR_q) {
                (r = p[a.VBR_q]), (p = p[a.VBR_q + 1]);
                var d = a.VBR_q_frac;
                r = linear_int(r, p, d);
              } else r = 19500;
              break;
            default:
              (p = [
                19500, 19e3, 18500, 18e3, 17500, 16500, 15500, 14500, 12500,
                9500, 3950,
              ]),
                0 <= a.VBR_q && 9 >= a.VBR_q
                  ? ((r = p[a.VBR_q]),
                    (p = p[a.VBR_q + 1]),
                    (d = a.VBR_q_frac),
                    (r = linear_int(r, p, d)))
                  : (r = 19500);
          }
          a.mode != o.MONO ||
            (a.VBR != i.vbr_off && a.VBR != i.vbr_abr) ||
            (r *= 1.5),
            (a.lowpassfreq = 0 | r);
        }
        if (
          (0 == a.out_samplerate &&
            (2 * a.lowpassfreq > a.in_samplerate &&
              (a.lowpassfreq = a.in_samplerate / 2),
            (r = 0 | a.lowpassfreq),
            (p = a.in_samplerate),
            (d = 44100),
            48e3 <= p
              ? (d = 48e3)
              : 44100 <= p
              ? (d = 44100)
              : 32e3 <= p
              ? (d = 32e3)
              : 24e3 <= p
              ? (d = 24e3)
              : 22050 <= p
              ? (d = 22050)
              : 16e3 <= p
              ? (d = 16e3)
              : 12e3 <= p
              ? (d = 12e3)
              : 11025 <= p
              ? (d = 11025)
              : 8e3 <= p && (d = 8e3),
            -1 == r
              ? (r = d)
              : (15960 >= r && (d = 44100),
                15250 >= r && (d = 32e3),
                11220 >= r && (d = 24e3),
                9970 >= r && (d = 22050),
                7230 >= r && (d = 16e3),
                5420 >= r && (d = 12e3),
                4510 >= r && (d = 11025),
                3970 >= r && (d = 8e3),
                (r =
                  p < d
                    ? 44100 < p
                      ? 48e3
                      : 32e3 < p
                      ? 44100
                      : 24e3 < p
                      ? 32e3
                      : 22050 < p
                      ? 24e3
                      : 16e3 < p
                      ? 22050
                      : 12e3 < p
                      ? 16e3
                      : 11025 < p
                      ? 12e3
                      : 8e3 < p
                      ? 11025
                      : 8e3
                    : d)),
            (a.out_samplerate = r)),
          (a.lowpassfreq = Math.min(20500, a.lowpassfreq)),
          (a.lowpassfreq = Math.min(a.out_samplerate / 2, a.lowpassfreq)),
          a.VBR == i.vbr_off &&
            (a.compression_ratio =
              (16 * a.out_samplerate * n.channels_out) / (1e3 * a.brate)),
          a.VBR == i.vbr_abr &&
            (a.compression_ratio =
              (16 * a.out_samplerate * n.channels_out) /
              (1e3 * a.VBR_mean_bitrate_kbps)),
          a.bWriteVbrTag ||
            ((a.findReplayGain = !1),
            (a.decode_on_the_fly = !1),
            (n.findPeakSample = !1)),
          (n.findReplayGain = a.findReplayGain),
          (n.decode_on_the_fly = a.decode_on_the_fly),
          n.decode_on_the_fly && (n.findPeakSample = !0),
          n.findReplayGain &&
            T.InitGainAnalysis(n.rgdata, a.out_samplerate) ==
              f.INIT_GAIN_ANALYSIS_ERROR)
        )
          return (a.internal_flags = null), -6;
        switch (
          (n.decode_on_the_fly &&
            !a.decode_only &&
            (null != n.hip && V.hip_decode_exit(n.hip),
            (n.hip = V.hip_decode_init())),
          (n.mode_gr = 24e3 >= a.out_samplerate ? 1 : 2),
          (a.framesize = 576 * n.mode_gr),
          (a.encoder_delay = P.ENCDELAY),
          (n.resample_ratio = a.in_samplerate / a.out_samplerate),
          a.VBR)
        ) {
          case i.vbr_mt:
          case i.vbr_rh:
          case i.vbr_mtrh:
            a.compression_ratio = [
              5.7, 6.5, 7.3, 8.2, 10, 11.9, 13, 14, 15, 16.5,
            ][a.VBR_q];
            break;
          case i.vbr_abr:
            a.compression_ratio =
              (16 * a.out_samplerate * n.channels_out) /
              (1e3 * a.VBR_mean_bitrate_kbps);
            break;
          default:
            a.compression_ratio =
              (16 * a.out_samplerate * n.channels_out) / (1e3 * a.brate);
        }
        a.mode == o.NOT_SET && (a.mode = o.JOINT_STEREO),
          0 < a.highpassfreq
            ? ((n.highpass1 = 2 * a.highpassfreq),
              (n.highpass2 =
                0 <= a.highpasswidth
                  ? 2 * (a.highpassfreq + a.highpasswidth)
                  : 2 * a.highpassfreq),
              (n.highpass1 /= a.out_samplerate),
              (n.highpass2 /= a.out_samplerate))
            : ((n.highpass1 = 0), (n.highpass2 = 0)),
          0 < a.lowpassfreq
            ? ((n.lowpass2 = 2 * a.lowpassfreq),
              0 <= a.lowpasswidth
                ? ((n.lowpass1 = 2 * (a.lowpassfreq - a.lowpasswidth)),
                  0 > n.lowpass1 && (n.lowpass1 = 0))
                : (n.lowpass1 = 2 * a.lowpassfreq),
              (n.lowpass1 /= a.out_samplerate),
              (n.lowpass2 /= a.out_samplerate))
            : ((n.lowpass1 = 0), (n.lowpass2 = 0)),
          (r = a.internal_flags);
        var v = 32,
          g = -1;
        if (0 < r.lowpass1) {
          var S = 999;
          for (p = 0; 31 >= p; p++)
            (d = p / 31),
              d >= r.lowpass2 && (v = Math.min(v, p)),
              r.lowpass1 < d && d < r.lowpass2 && (S = Math.min(S, p));
          (r.lowpass1 = 999 == S ? (v - 0.75) / 31 : (S - 0.75) / 31),
            (r.lowpass2 = v / 31);
        }
        if (
          (0 < r.highpass2 &&
            r.highpass2 < (0.75 / 31) * 0.9 &&
            ((r.highpass1 = 0),
            (r.highpass2 = 0),
            K.err.println(
              'Warning: highpass filter disabled.  highpass frequency too small\n',
            )),
          0 < r.highpass2)
        ) {
          for (v = -1, p = 0; 31 >= p; p++)
            (d = p / 31),
              d <= r.highpass1 && (g = Math.max(g, p)),
              r.highpass1 < d && d < r.highpass2 && (v = Math.max(v, p));
          (r.highpass1 = g / 31),
            (r.highpass2 = -1 == v ? (g + 0.75) / 31 : (v + 0.75) / 31);
        }
        for (p = 0; 32 > p; p++)
          (d = p / 31),
            (g =
              r.highpass2 > r.highpass1
                ? l((r.highpass2 - d) / (r.highpass2 - r.highpass1 + 1e-20))
                : 1),
            (d =
              r.lowpass2 > r.lowpass1
                ? l((d - r.lowpass1) / (r.lowpass2 - r.lowpass1 + 1e-20))
                : 1),
            (r.amp_filter[p] = g * d);
        if (
          ((n.samplerate_index = h(a.out_samplerate, a)),
          0 > n.samplerate_index)
        )
          return (a.internal_flags = null), -1;
        if (a.VBR == i.vbr_off) {
          if (a.free_format) n.bitrate_index = 0;
          else if (
            ((a.brate = c(a.brate, a.version, a.out_samplerate)),
            (n.bitrate_index = b(a.brate, a.version, a.out_samplerate)),
            0 >= n.bitrate_index)
          )
            return (a.internal_flags = null), -1;
        } else n.bitrate_index = 1;
        for (
          a.analysis && (a.bWriteVbrTag = !1),
            null != n.pinfo && (a.bWriteVbrTag = !1),
            E.init_bit_stream_w(n),
            r =
              n.samplerate_index +
              3 * a.version +
              6 * (16e3 > a.out_samplerate ? 1 : 0),
            p = 0;
          p < P.SBMAX_l + 1;
          p++
        )
          n.scalefac_band.l[p] = y.sfBandIndex[r].l[p];
        for (p = 0; p < P.PSFB21 + 1; p++)
          (d = (n.scalefac_band.l[22] - n.scalefac_band.l[21]) / P.PSFB21),
            (d = n.scalefac_band.l[21] + p * d),
            (n.scalefac_band.psfb21[p] = d);
        for (
          n.scalefac_band.psfb21[P.PSFB21] = 576, p = 0;
          p < P.SBMAX_s + 1;
          p++
        )
          n.scalefac_band.s[p] = y.sfBandIndex[r].s[p];
        for (p = 0; p < P.PSFB12 + 1; p++)
          (d = (n.scalefac_band.s[13] - n.scalefac_band.s[12]) / P.PSFB12),
            (d = n.scalefac_band.s[12] + p * d),
            (n.scalefac_band.psfb12[p] = d);
        for (
          n.scalefac_band.psfb12[P.PSFB12] = 192,
            n.sideinfo_len =
              1 == a.version
                ? 1 == n.channels_out
                  ? 21
                  : 36
                : 1 == n.channels_out
                ? 13
                : 21,
            a.error_protection && (n.sideinfo_len += 2),
            r = a.internal_flags,
            a.frameNum = 0,
            a.write_id3tag_automatic && H.id3tag_write_v2(a),
            r.bitrate_stereoMode_Hist = s([16, 5]),
            r.bitrate_blockType_Hist = s([16, 6]),
            r.PeakSample = 0,
            a.bWriteVbrTag && I.InitVbrTag(a),
            n.Class_ID = 4294479419,
            r = 0;
          19 > r;
          r++
        )
          n.nsPsy.pefirbuf[r] = 700 * n.mode_gr * n.channels_out;
        switch ((-1 == a.ATHtype && (a.ATHtype = 4), a.VBR)) {
          case i.vbr_mt:
            a.VBR = i.vbr_mtrh;
          case i.vbr_mtrh:
            null == a.useTemporal && (a.useTemporal = !1),
              k.apply_preset(a, 500 - 10 * a.VBR_q, 0),
              0 > a.quality && (a.quality = LAME_DEFAULT_QUALITY),
              5 > a.quality && (a.quality = 0),
              5 < a.quality && (a.quality = 5),
              (n.PSY.mask_adjust = a.maskingadjust),
              (n.PSY.mask_adjust_short = a.maskingadjust_short),
              (n.sfb21_extra = !a.experimentalY && 44e3 < a.out_samplerate),
              (n.iteration_loop = new VBRNewIterationLoop(x));
            break;
          case i.vbr_rh:
            k.apply_preset(a, 500 - 10 * a.VBR_q, 0),
              (n.PSY.mask_adjust = a.maskingadjust),
              (n.PSY.mask_adjust_short = a.maskingadjust_short),
              (n.sfb21_extra = !a.experimentalY && 44e3 < a.out_samplerate),
              6 < a.quality && (a.quality = 6),
              0 > a.quality && (a.quality = LAME_DEFAULT_QUALITY),
              (n.iteration_loop = new VBROldIterationLoop(x));
            break;
          default:
            (n.sfb21_extra = !1),
              0 > a.quality && (a.quality = LAME_DEFAULT_QUALITY),
              (r = a.VBR),
              r == i.vbr_off && (a.VBR_mean_bitrate_kbps = a.brate),
              k.apply_preset(a, a.VBR_mean_bitrate_kbps, 0),
              (a.VBR = r),
              (n.PSY.mask_adjust = a.maskingadjust),
              (n.PSY.mask_adjust_short = a.maskingadjust_short),
              (n.iteration_loop =
                r == i.vbr_off ? new M(x) : new ABRIterationLoop(x));
        }
        if (a.VBR != i.vbr_off) {
          if (
            ((n.VBR_min_bitrate = 1),
            (n.VBR_max_bitrate = 14),
            16e3 > a.out_samplerate && (n.VBR_max_bitrate = 8),
            (0 != a.VBR_min_bitrate_kbps &&
              ((a.VBR_min_bitrate_kbps = c(
                a.VBR_min_bitrate_kbps,
                a.version,
                a.out_samplerate,
              )),
              (n.VBR_min_bitrate = b(
                a.VBR_min_bitrate_kbps,
                a.version,
                a.out_samplerate,
              )),
              0 > n.VBR_min_bitrate)) ||
              (0 != a.VBR_max_bitrate_kbps &&
                ((a.VBR_max_bitrate_kbps = c(
                  a.VBR_max_bitrate_kbps,
                  a.version,
                  a.out_samplerate,
                )),
                (n.VBR_max_bitrate = b(
                  a.VBR_max_bitrate_kbps,
                  a.version,
                  a.out_samplerate,
                )),
                0 > n.VBR_max_bitrate)))
          )
            return -1;
          (a.VBR_min_bitrate_kbps =
            U.bitrate_table[a.version][n.VBR_min_bitrate]),
            (a.VBR_max_bitrate_kbps =
              U.bitrate_table[a.version][n.VBR_max_bitrate]),
            (a.VBR_mean_bitrate_kbps = Math.min(
              U.bitrate_table[a.version][n.VBR_max_bitrate],
              a.VBR_mean_bitrate_kbps,
            )),
            (a.VBR_mean_bitrate_kbps = Math.max(
              U.bitrate_table[a.version][n.VBR_min_bitrate],
              a.VBR_mean_bitrate_kbps,
            ));
        }
        switch (
          (a.tune &&
            ((n.PSY.mask_adjust += a.tune_value_a),
            (n.PSY.mask_adjust_short += a.tune_value_a)),
          (r = a.internal_flags),
          a.quality)
        ) {
          default:
          case 9:
            (r.psymodel = 0),
              (r.noise_shaping = 0),
              (r.noise_shaping_amp = 0),
              (r.noise_shaping_stop = 0),
              (r.use_best_huffman = 0),
              (r.full_outer_loop = 0);
            break;
          case 8:
            a.quality = 7;
          case 7:
            (r.psymodel = 1),
              (r.noise_shaping = 0),
              (r.noise_shaping_amp = 0),
              (r.noise_shaping_stop = 0),
              (r.use_best_huffman = 0),
              (r.full_outer_loop = 0);
            break;
          case 6:
            (r.psymodel = 1),
              0 == r.noise_shaping && (r.noise_shaping = 1),
              (r.noise_shaping_amp = 0),
              (r.noise_shaping_stop = 0),
              -1 == r.subblock_gain && (r.subblock_gain = 1),
              (r.use_best_huffman = 0),
              (r.full_outer_loop = 0);
            break;
          case 5:
            (r.psymodel = 1),
              0 == r.noise_shaping && (r.noise_shaping = 1),
              (r.noise_shaping_amp = 0),
              (r.noise_shaping_stop = 0),
              -1 == r.subblock_gain && (r.subblock_gain = 1),
              (r.use_best_huffman = 0),
              (r.full_outer_loop = 0);
            break;
          case 4:
            (r.psymodel = 1),
              0 == r.noise_shaping && (r.noise_shaping = 1),
              (r.noise_shaping_amp = 0),
              (r.noise_shaping_stop = 0),
              -1 == r.subblock_gain && (r.subblock_gain = 1),
              (r.use_best_huffman = 1),
              (r.full_outer_loop = 0);
            break;
          case 3:
            (r.psymodel = 1),
              0 == r.noise_shaping && (r.noise_shaping = 1),
              (r.noise_shaping_amp = 1),
              (r.noise_shaping_stop = 1),
              -1 == r.subblock_gain && (r.subblock_gain = 1),
              (r.use_best_huffman = 1),
              (r.full_outer_loop = 0);
            break;
          case 2:
            (r.psymodel = 1),
              0 == r.noise_shaping && (r.noise_shaping = 1),
              0 == r.substep_shaping && (r.substep_shaping = 2),
              (r.noise_shaping_amp = 1),
              (r.noise_shaping_stop = 1),
              -1 == r.subblock_gain && (r.subblock_gain = 1),
              (r.use_best_huffman = 1),
              (r.full_outer_loop = 0);
            break;
          case 1:
            (r.psymodel = 1),
              0 == r.noise_shaping && (r.noise_shaping = 1),
              0 == r.substep_shaping && (r.substep_shaping = 2),
              (r.noise_shaping_amp = 2),
              (r.noise_shaping_stop = 1),
              -1 == r.subblock_gain && (r.subblock_gain = 1),
              (r.use_best_huffman = 1),
              (r.full_outer_loop = 0);
            break;
          case 0:
            (r.psymodel = 1),
              0 == r.noise_shaping && (r.noise_shaping = 1),
              0 == r.substep_shaping && (r.substep_shaping = 2),
              (r.noise_shaping_amp = 2),
              (r.noise_shaping_stop = 1),
              -1 == r.subblock_gain && (r.subblock_gain = 1),
              (r.use_best_huffman = 1),
              (r.full_outer_loop = 0);
        }
        return (
          (n.ATH.useAdjust = 0 > a.athaa_type ? 3 : a.athaa_type),
          (n.ATH.aaSensitivityP = Math.pow(10, a.athaa_sensitivity / -10)),
          null == a.short_blocks && (a.short_blocks = _.short_block_allowed),
          a.short_blocks != _.short_block_allowed ||
            (a.mode != o.JOINT_STEREO && a.mode != o.STEREO) ||
            (a.short_blocks = _.short_block_coupled),
          0 > a.quant_comp && (a.quant_comp = 1),
          0 > a.quant_comp_short && (a.quant_comp_short = 0),
          0 > a.msfix && (a.msfix = 0),
          (a.exp_nspsytune |= 1),
          0 > a.internal_flags.nsPsy.attackthre &&
            (a.internal_flags.nsPsy.attackthre = D.NSATTACKTHRE),
          0 > a.internal_flags.nsPsy.attackthre_s &&
            (a.internal_flags.nsPsy.attackthre_s = D.NSATTACKTHRE_S),
          0 > a.scale && (a.scale = 1),
          0 > a.ATHtype && (a.ATHtype = 4),
          0 > a.ATHcurve && (a.ATHcurve = 4),
          0 > a.athaa_loudapprox && (a.athaa_loudapprox = 2),
          0 > a.interChRatio && (a.interChRatio = 0),
          null == a.useTemporal && (a.useTemporal = !0),
          (n.slot_lag = n.frac_SpF = 0),
          a.VBR == i.vbr_off &&
            (n.slot_lag = n.frac_SpF =
              (72e3 * (a.version + 1) * a.brate) % a.out_samplerate | 0),
          y.iteration_init(a),
          O.psymodel_init(a),
          0
        );
      }),
      (this.lame_encode_flush = function (e, a, t, s) {
        var r = e.internal_flags,
          _ = n([2, 1152]),
          i = 0,
          o = r.mf_samples_to_encode - P.POSTDELAY,
          l = p(e);
        if (1 > r.mf_samples_to_encode) return 0;
        var f = 0;
        e.in_samplerate != e.out_samplerate &&
          (o += (16 * e.out_samplerate) / e.in_samplerate);
        var h = e.framesize - (o % e.framesize);
        for (
          576 > h && (h += e.framesize),
            e.encoder_padding = h,
            h = (o + h) / e.framesize;
          0 < h && 0 <= i;

        ) {
          var c = l - r.mf_size;
          (o = e.frameNum),
            (c *= e.in_samplerate),
            (c /= e.out_samplerate),
            1152 < c && (c = 1152),
            1 > c && (c = 1),
            (i = s - f),
            0 == s && (i = 0),
            (i = this.lame_encode_buffer(e, _[0], _[1], c, a, t, i)),
            (t += i),
            (f += i),
            (h -= o != e.frameNum ? 1 : 0);
        }
        if (((r.mf_samples_to_encode = 0), 0 > i)) return i;
        if (
          ((i = s - f),
          0 == s && (i = 0),
          E.flush_bitstream(e),
          (i = E.copy_buffer(r, a, t, i, 1)),
          0 > i)
        )
          return i;
        if (
          ((t += i),
          (f += i),
          (i = s - f),
          0 == s && (i = 0),
          e.write_id3tag_automatic)
        ) {
          if ((H.id3tag_write_v1(e), (i = E.copy_buffer(r, a, t, i, 0)), 0 > i))
            return i;
          f += i;
        }
        return f;
      }),
      (this.lame_encode_buffer = function (e, t, s, n, r, _, i) {
        var o = e.internal_flags,
          l = [null, null];
        if (4294479419 != o.Class_ID) return -3;
        if (0 == n) return 0;
        (null == o.in_buffer_0 || o.in_buffer_nsamples < n) &&
          ((o.in_buffer_0 = a(n)),
          (o.in_buffer_1 = a(n)),
          (o.in_buffer_nsamples = n)),
          (l[0] = o.in_buffer_0),
          (l[1] = o.in_buffer_1);
        for (var f = 0; f < n; f++)
          (l[0][f] = t[f]), 1 < o.channels_in && (l[1][f] = s[f]);
        return d(e, l[0], l[1], n, r, _, i);
      });
  }
  function q() {
    this.setModules = function (e, a) {};
  }
  function Y() {
    this.setModules = function (e, a, t) {};
  }
  function C() {}
  function F() {
    this.setModules = function (e, a) {};
  }
  function j() {
    this.sampleRate = this.channels = this.dataLen = this.dataOffset = 0;
  }
  function G(e) {
    return (
      (e.charCodeAt(0) << 24) |
      (e.charCodeAt(1) << 16) |
      (e.charCodeAt(2) << 8) |
      e.charCodeAt(3)
    );
  }
  var z = {
      fill: function (e, a, t, s) {
        if (2 == arguments.length)
          for (var n = 0; n < e.length; n++) e[n] = arguments[1];
        else for (n = a; n < t; n++) e[n] = s;
      },
    },
    K = {
      arraycopy: function (e, a, t, s, n) {
        for (n = a + n; a < n; ) t[s++] = e[a++];
      },
    },
    Z = {
      SQRT2: 1.4142135623730951,
      FAST_LOG10: function (e) {
        return Math.log10(e);
      },
      FAST_LOG10_X: function (e, a) {
        return Math.log10(e) * a;
      },
    };
  (_.short_block_allowed = new _(0)),
    (_.short_block_coupled = new _(1)),
    (_.short_block_dispensed = new _(2)),
    (_.short_block_forced = new _(3));
  var Q = { MAX_VALUE: 34028235e31 };
  (i.vbr_off = new i(0)),
    (i.vbr_mt = new i(1)),
    (i.vbr_rh = new i(2)),
    (i.vbr_abr = new i(3)),
    (i.vbr_mtrh = new i(4)),
    (i.vbr_default = i.vbr_mtrh),
    (o.STEREO = new o(0)),
    (o.JOINT_STEREO = new o(1)),
    (o.DUAL_CHANNEL = new o(2)),
    (o.MONO = new o(3)),
    (o.NOT_SET = new o(4)),
    (f.STEPS_per_dB = 100),
    (f.MAX_dB = 120),
    (f.GAIN_NOT_ENOUGH_SAMPLES = -24601),
    (f.GAIN_ANALYSIS_ERROR = 0),
    (f.GAIN_ANALYSIS_OK = 1),
    (f.INIT_GAIN_ANALYSIS_ERROR = 0),
    (f.INIT_GAIN_ANALYSIS_OK = 1),
    (f.YULE_ORDER = 10),
    (f.MAX_ORDER = f.YULE_ORDER),
    (f.MAX_SAMP_FREQ = 48e3),
    (f.RMS_WINDOW_TIME_NUMERATOR = 1),
    (f.RMS_WINDOW_TIME_DENOMINATOR = 20),
    (f.MAX_SAMPLES_PER_WINDOW =
      (f.MAX_SAMP_FREQ * f.RMS_WINDOW_TIME_NUMERATOR) /
        f.RMS_WINDOW_TIME_DENOMINATOR +
      1),
    (u.EQ = function (e, a) {
      return Math.abs(e) > Math.abs(a)
        ? Math.abs(e - a) <= 1e-6 * Math.abs(e)
        : Math.abs(e - a) <= 1e-6 * Math.abs(a);
    }),
    (u.NEQ = function (e, a) {
      return !u.EQ(e, a);
    }),
    (m.NUMTOCENTRIES = 100),
    (m.MAXFRAMESIZE = 2880);
  var U = {
    t1HB: [1, 1, 1, 0],
    t2HB: [1, 2, 1, 3, 1, 1, 3, 2, 0],
    t3HB: [3, 2, 1, 1, 1, 1, 3, 2, 0],
    t5HB: [1, 2, 6, 5, 3, 1, 4, 4, 7, 5, 7, 1, 6, 1, 1, 0],
    t6HB: [7, 3, 5, 1, 6, 2, 3, 2, 5, 4, 4, 1, 3, 3, 2, 0],
    t7HB: [
      1, 2, 10, 19, 16, 10, 3, 3, 7, 10, 5, 3, 11, 4, 13, 17, 8, 4, 12, 11, 18,
      15, 11, 2, 7, 6, 9, 14, 3, 1, 6, 4, 5, 3, 2, 0,
    ],
    t8HB: [
      3, 4, 6, 18, 12, 5, 5, 1, 2, 16, 9, 3, 7, 3, 5, 14, 7, 3, 19, 17, 15, 13,
      10, 4, 13, 5, 8, 11, 5, 1, 12, 4, 4, 1, 1, 0,
    ],
    t9HB: [
      7, 5, 9, 14, 15, 7, 6, 4, 5, 5, 6, 7, 7, 6, 8, 8, 8, 5, 15, 6, 9, 10, 5,
      1, 11, 7, 9, 6, 4, 1, 14, 4, 6, 2, 6, 0,
    ],
    t10HB: [
      1, 2, 10, 23, 35, 30, 12, 17, 3, 3, 8, 12, 18, 21, 12, 7, 11, 9, 15, 21,
      32, 40, 19, 6, 14, 13, 22, 34, 46, 23, 18, 7, 20, 19, 33, 47, 27, 22, 9,
      3, 31, 22, 41, 26, 21, 20, 5, 3, 14, 13, 10, 11, 16, 6, 5, 1, 9, 8, 7, 8,
      4, 4, 2, 0,
    ],
    t11HB: [
      3, 4, 10, 24, 34, 33, 21, 15, 5, 3, 4, 10, 32, 17, 11, 10, 11, 7, 13, 18,
      30, 31, 20, 5, 25, 11, 19, 59, 27, 18, 12, 5, 35, 33, 31, 58, 30, 16, 7,
      5, 28, 26, 32, 19, 17, 15, 8, 14, 14, 12, 9, 13, 14, 9, 4, 1, 11, 4, 6, 6,
      6, 3, 2, 0,
    ],
    t12HB: [
      9, 6, 16, 33, 41, 39, 38, 26, 7, 5, 6, 9, 23, 16, 26, 11, 17, 7, 11, 14,
      21, 30, 10, 7, 17, 10, 15, 12, 18, 28, 14, 5, 32, 13, 22, 19, 18, 16, 9,
      5, 40, 17, 31, 29, 17, 13, 4, 2, 27, 12, 11, 15, 10, 7, 4, 1, 27, 12, 8,
      12, 6, 3, 1, 0,
    ],
    t13HB: [
      1, 5, 14, 21, 34, 51, 46, 71, 42, 52, 68, 52, 67, 44, 43, 19, 3, 4, 12,
      19, 31, 26, 44, 33, 31, 24, 32, 24, 31, 35, 22, 14, 15, 13, 23, 36, 59,
      49, 77, 65, 29, 40, 30, 40, 27, 33, 42, 16, 22, 20, 37, 61, 56, 79, 73,
      64, 43, 76, 56, 37, 26, 31, 25, 14, 35, 16, 60, 57, 97, 75, 114, 91, 54,
      73, 55, 41, 48, 53, 23, 24, 58, 27, 50, 96, 76, 70, 93, 84, 77, 58, 79,
      29, 74, 49, 41, 17, 47, 45, 78, 74, 115, 94, 90, 79, 69, 83, 71, 50, 59,
      38, 36, 15, 72, 34, 56, 95, 92, 85, 91, 90, 86, 73, 77, 65, 51, 44, 43,
      42, 43, 20, 30, 44, 55, 78, 72, 87, 78, 61, 46, 54, 37, 30, 20, 16, 53,
      25, 41, 37, 44, 59, 54, 81, 66, 76, 57, 54, 37, 18, 39, 11, 35, 33, 31,
      57, 42, 82, 72, 80, 47, 58, 55, 21, 22, 26, 38, 22, 53, 25, 23, 38, 70,
      60, 51, 36, 55, 26, 34, 23, 27, 14, 9, 7, 34, 32, 28, 39, 49, 75, 30, 52,
      48, 40, 52, 28, 18, 17, 9, 5, 45, 21, 34, 64, 56, 50, 49, 45, 31, 19, 12,
      15, 10, 7, 6, 3, 48, 23, 20, 39, 36, 35, 53, 21, 16, 23, 13, 10, 6, 1, 4,
      2, 16, 15, 17, 27, 25, 20, 29, 11, 17, 12, 16, 8, 1, 1, 0, 1,
    ],
    t15HB: [
      7, 12, 18, 53, 47, 76, 124, 108, 89, 123, 108, 119, 107, 81, 122, 63, 13,
      5, 16, 27, 46, 36, 61, 51, 42, 70, 52, 83, 65, 41, 59, 36, 19, 17, 15, 24,
      41, 34, 59, 48, 40, 64, 50, 78, 62, 80, 56, 33, 29, 28, 25, 43, 39, 63,
      55, 93, 76, 59, 93, 72, 54, 75, 50, 29, 52, 22, 42, 40, 67, 57, 95, 79,
      72, 57, 89, 69, 49, 66, 46, 27, 77, 37, 35, 66, 58, 52, 91, 74, 62, 48,
      79, 63, 90, 62, 40, 38, 125, 32, 60, 56, 50, 92, 78, 65, 55, 87, 71, 51,
      73, 51, 70, 30, 109, 53, 49, 94, 88, 75, 66, 122, 91, 73, 56, 42, 64, 44,
      21, 25, 90, 43, 41, 77, 73, 63, 56, 92, 77, 66, 47, 67, 48, 53, 36, 20,
      71, 34, 67, 60, 58, 49, 88, 76, 67, 106, 71, 54, 38, 39, 23, 15, 109, 53,
      51, 47, 90, 82, 58, 57, 48, 72, 57, 41, 23, 27, 62, 9, 86, 42, 40, 37, 70,
      64, 52, 43, 70, 55, 42, 25, 29, 18, 11, 11, 118, 68, 30, 55, 50, 46, 74,
      65, 49, 39, 24, 16, 22, 13, 14, 7, 91, 44, 39, 38, 34, 63, 52, 45, 31, 52,
      28, 19, 14, 8, 9, 3, 123, 60, 58, 53, 47, 43, 32, 22, 37, 24, 17, 12, 15,
      10, 2, 1, 71, 37, 34, 30, 28, 20, 17, 26, 21, 16, 10, 6, 8, 6, 2, 0,
    ],
    t16HB: [
      1, 5, 14, 44, 74, 63, 110, 93, 172, 149, 138, 242, 225, 195, 376, 17, 3,
      4, 12, 20, 35, 62, 53, 47, 83, 75, 68, 119, 201, 107, 207, 9, 15, 13, 23,
      38, 67, 58, 103, 90, 161, 72, 127, 117, 110, 209, 206, 16, 45, 21, 39, 69,
      64, 114, 99, 87, 158, 140, 252, 212, 199, 387, 365, 26, 75, 36, 68, 65,
      115, 101, 179, 164, 155, 264, 246, 226, 395, 382, 362, 9, 66, 30, 59, 56,
      102, 185, 173, 265, 142, 253, 232, 400, 388, 378, 445, 16, 111, 54, 52,
      100, 184, 178, 160, 133, 257, 244, 228, 217, 385, 366, 715, 10, 98, 48,
      91, 88, 165, 157, 148, 261, 248, 407, 397, 372, 380, 889, 884, 8, 85, 84,
      81, 159, 156, 143, 260, 249, 427, 401, 392, 383, 727, 713, 708, 7, 154,
      76, 73, 141, 131, 256, 245, 426, 406, 394, 384, 735, 359, 710, 352, 11,
      139, 129, 67, 125, 247, 233, 229, 219, 393, 743, 737, 720, 885, 882, 439,
      4, 243, 120, 118, 115, 227, 223, 396, 746, 742, 736, 721, 712, 706, 223,
      436, 6, 202, 224, 222, 218, 216, 389, 386, 381, 364, 888, 443, 707, 440,
      437, 1728, 4, 747, 211, 210, 208, 370, 379, 734, 723, 714, 1735, 883, 877,
      876, 3459, 865, 2, 377, 369, 102, 187, 726, 722, 358, 711, 709, 866, 1734,
      871, 3458, 870, 434, 0, 12, 10, 7, 11, 10, 17, 11, 9, 13, 12, 10, 7, 5, 3,
      1, 3,
    ],
    t24HB: [
      15, 13, 46, 80, 146, 262, 248, 434, 426, 669, 653, 649, 621, 517, 1032,
      88, 14, 12, 21, 38, 71, 130, 122, 216, 209, 198, 327, 345, 319, 297, 279,
      42, 47, 22, 41, 74, 68, 128, 120, 221, 207, 194, 182, 340, 315, 295, 541,
      18, 81, 39, 75, 70, 134, 125, 116, 220, 204, 190, 178, 325, 311, 293, 271,
      16, 147, 72, 69, 135, 127, 118, 112, 210, 200, 188, 352, 323, 306, 285,
      540, 14, 263, 66, 129, 126, 119, 114, 214, 202, 192, 180, 341, 317, 301,
      281, 262, 12, 249, 123, 121, 117, 113, 215, 206, 195, 185, 347, 330, 308,
      291, 272, 520, 10, 435, 115, 111, 109, 211, 203, 196, 187, 353, 332, 313,
      298, 283, 531, 381, 17, 427, 212, 208, 205, 201, 193, 186, 177, 169, 320,
      303, 286, 268, 514, 377, 16, 335, 199, 197, 191, 189, 181, 174, 333, 321,
      305, 289, 275, 521, 379, 371, 11, 668, 184, 183, 179, 175, 344, 331, 314,
      304, 290, 277, 530, 383, 373, 366, 10, 652, 346, 171, 168, 164, 318, 309,
      299, 287, 276, 263, 513, 375, 368, 362, 6, 648, 322, 316, 312, 307, 302,
      292, 284, 269, 261, 512, 376, 370, 364, 359, 4, 620, 300, 296, 294, 288,
      282, 273, 266, 515, 380, 374, 369, 365, 361, 357, 2, 1033, 280, 278, 274,
      267, 264, 259, 382, 378, 372, 367, 363, 360, 358, 356, 0, 43, 20, 19, 17,
      15, 13, 11, 9, 7, 6, 4, 7, 5, 3, 1, 3,
    ],
    t32HB: [1, 10, 8, 20, 12, 20, 16, 32, 14, 12, 24, 0, 28, 16, 24, 16],
    t33HB: [15, 28, 26, 48, 22, 40, 36, 64, 14, 24, 20, 32, 12, 16, 8, 0],
    t1l: [1, 4, 3, 5],
    t2l: [1, 4, 7, 4, 5, 7, 6, 7, 8],
    t3l: [2, 3, 7, 4, 4, 7, 6, 7, 8],
    t5l: [1, 4, 7, 8, 4, 5, 8, 9, 7, 8, 9, 10, 8, 8, 9, 10],
    t6l: [3, 4, 6, 8, 4, 4, 6, 7, 5, 6, 7, 8, 7, 7, 8, 9],
    t7l: [
      1, 4, 7, 9, 9, 10, 4, 6, 8, 9, 9, 10, 7, 7, 9, 10, 10, 11, 8, 9, 10, 11,
      11, 11, 8, 9, 10, 11, 11, 12, 9, 10, 11, 12, 12, 12,
    ],
    t8l: [
      2, 4, 7, 9, 9, 10, 4, 4, 6, 10, 10, 10, 7, 6, 8, 10, 10, 11, 9, 10, 10,
      11, 11, 12, 9, 9, 10, 11, 12, 12, 10, 10, 11, 11, 13, 13,
    ],
    t9l: [
      3, 4, 6, 7, 9, 10, 4, 5, 6, 7, 8, 10, 5, 6, 7, 8, 9, 10, 7, 7, 8, 9, 9,
      10, 8, 8, 9, 9, 10, 11, 9, 9, 10, 10, 11, 11,
    ],
    t10l: [
      1, 4, 7, 9, 10, 10, 10, 11, 4, 6, 8, 9, 10, 11, 10, 10, 7, 8, 9, 10, 11,
      12, 11, 11, 8, 9, 10, 11, 12, 12, 11, 12, 9, 10, 11, 12, 12, 12, 12, 12,
      10, 11, 12, 12, 13, 13, 12, 13, 9, 10, 11, 12, 12, 12, 13, 13, 10, 10, 11,
      12, 12, 13, 13, 13,
    ],
    t11l: [
      2, 4, 6, 8, 9, 10, 9, 10, 4, 5, 6, 8, 10, 10, 9, 10, 6, 7, 8, 9, 10, 11,
      10, 10, 8, 8, 9, 11, 10, 12, 10, 11, 9, 10, 10, 11, 11, 12, 11, 12, 9, 10,
      11, 12, 12, 13, 12, 13, 9, 9, 9, 10, 11, 12, 12, 12, 9, 9, 10, 11, 12, 12,
      12, 12,
    ],
    t12l: [
      4, 4, 6, 8, 9, 10, 10, 10, 4, 5, 6, 7, 9, 9, 10, 10, 6, 6, 7, 8, 9, 10, 9,
      10, 7, 7, 8, 8, 9, 10, 10, 10, 8, 8, 9, 9, 10, 10, 10, 11, 9, 9, 10, 10,
      10, 11, 10, 11, 9, 9, 9, 10, 10, 11, 11, 12, 10, 10, 10, 11, 11, 11, 11,
      12,
    ],
    t13l: [
      1, 5, 7, 8, 9, 10, 10, 11, 10, 11, 12, 12, 13, 13, 14, 14, 4, 6, 8, 9, 10,
      10, 11, 11, 11, 11, 12, 12, 13, 14, 14, 14, 7, 8, 9, 10, 11, 11, 12, 12,
      11, 12, 12, 13, 13, 14, 15, 15, 8, 9, 10, 11, 11, 12, 12, 12, 12, 13, 13,
      13, 13, 14, 15, 15, 9, 9, 11, 11, 12, 12, 13, 13, 12, 13, 13, 14, 14, 15,
      15, 16, 10, 10, 11, 12, 12, 12, 13, 13, 13, 13, 14, 13, 15, 15, 16, 16,
      10, 11, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16, 11, 11,
      12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 18, 18, 10, 10, 11, 12,
      12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 17, 17, 11, 11, 12, 12, 13, 13,
      13, 15, 14, 15, 15, 16, 16, 16, 18, 17, 11, 12, 12, 13, 13, 14, 14, 15,
      14, 15, 16, 15, 16, 17, 18, 19, 12, 12, 12, 13, 14, 14, 14, 14, 15, 15,
      15, 16, 17, 17, 17, 18, 12, 13, 13, 14, 14, 15, 14, 15, 16, 16, 17, 17,
      17, 18, 18, 18, 13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 17,
      18, 18, 14, 14, 14, 15, 15, 15, 17, 16, 16, 19, 17, 17, 17, 19, 18, 18,
      13, 14, 15, 16, 16, 16, 17, 16, 17, 17, 18, 18, 21, 20, 21, 18,
    ],
    t15l: [
      3, 5, 6, 8, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 14, 5, 5, 7, 8, 9,
      9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 6, 7, 7, 8, 9, 9, 10, 10, 10,
      11, 11, 12, 12, 13, 13, 13, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12,
      13, 13, 13, 8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 9,
      9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14, 10, 9, 10, 10,
      10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14, 10, 10, 10, 11, 11, 11,
      11, 12, 12, 12, 12, 12, 13, 13, 13, 14, 10, 10, 10, 11, 11, 11, 11, 12,
      12, 12, 12, 13, 13, 14, 14, 14, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13,
      13, 13, 13, 14, 14, 14, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13,
      13, 14, 15, 14, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14,
      14, 15, 12, 12, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15,
      12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 13, 13,
      13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 14, 15, 13, 13, 13, 13,
      13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15,
    ],
    t16_5l: [
      1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 11, 4, 6, 8, 9,
      10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 11, 7, 8, 9, 10, 11, 11, 12,
      12, 13, 12, 13, 13, 13, 14, 14, 12, 9, 9, 10, 11, 11, 12, 12, 12, 13, 13,
      14, 14, 14, 15, 15, 13, 10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14,
      15, 15, 15, 12, 10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15,
      16, 13, 11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 13,
      11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 13, 11, 12,
      12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 13, 12, 12, 12, 13,
      13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 14, 12, 13, 12, 13, 14, 14,
      14, 14, 15, 16, 16, 16, 17, 17, 16, 13, 13, 13, 13, 13, 14, 14, 15, 16,
      16, 16, 16, 16, 16, 15, 16, 14, 13, 14, 14, 14, 14, 15, 15, 15, 15, 17,
      16, 16, 16, 16, 18, 14, 15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17,
      17, 19, 17, 14, 14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17,
      16, 14, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 12,
    ],
    t16l: [
      1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 10, 4, 6, 8, 9,
      10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 10, 7, 8, 9, 10, 11, 11, 12,
      12, 13, 12, 13, 13, 13, 14, 14, 11, 9, 9, 10, 11, 11, 12, 12, 12, 13, 13,
      14, 14, 14, 15, 15, 12, 10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14,
      15, 15, 15, 11, 10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15,
      16, 12, 11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 12,
      11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 12, 11, 12,
      12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 12, 12, 12, 12, 13,
      13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 13, 12, 13, 12, 13, 14, 14,
      14, 14, 15, 16, 16, 16, 17, 17, 16, 12, 13, 13, 13, 13, 14, 14, 15, 16,
      16, 16, 16, 16, 16, 15, 16, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 17,
      16, 16, 16, 16, 18, 13, 15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17,
      17, 19, 17, 13, 14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17,
      16, 13, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10,
    ],
    t24l: [
      4, 5, 7, 8, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 10, 5, 6, 7, 8, 9,
      10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 10, 7, 7, 8, 9, 9, 10, 10, 11, 11,
      11, 11, 12, 12, 12, 13, 9, 8, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12,
      12, 12, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 13, 9, 10,
      9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 9, 10, 10, 10, 10,
      10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 9, 11, 10, 10, 10, 11, 11, 11,
      11, 12, 12, 12, 12, 12, 13, 13, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11,
      12, 12, 12, 12, 13, 13, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12,
      12, 13, 13, 13, 10, 12, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13,
      13, 13, 10, 12, 12, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13,
      10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 10, 12,
      12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10, 13, 12, 12,
      12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 10, 9, 9, 9, 9, 9, 9, 9,
      9, 9, 9, 9, 10, 10, 10, 10, 6,
    ],
    t32l: [1, 5, 5, 7, 5, 8, 7, 9, 5, 7, 7, 9, 7, 9, 9, 10],
    t33l: [4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8],
  };
  (U.ht = [
    new p(0, 0, null, null),
    new p(2, 0, U.t1HB, U.t1l),
    new p(3, 0, U.t2HB, U.t2l),
    new p(3, 0, U.t3HB, U.t3l),
    new p(0, 0, null, null),
    new p(4, 0, U.t5HB, U.t5l),
    new p(4, 0, U.t6HB, U.t6l),
    new p(6, 0, U.t7HB, U.t7l),
    new p(6, 0, U.t8HB, U.t8l),
    new p(6, 0, U.t9HB, U.t9l),
    new p(8, 0, U.t10HB, U.t10l),
    new p(8, 0, U.t11HB, U.t11l),
    new p(8, 0, U.t12HB, U.t12l),
    new p(16, 0, U.t13HB, U.t13l),
    new p(0, 0, null, U.t16_5l),
    new p(16, 0, U.t15HB, U.t15l),
    new p(1, 1, U.t16HB, U.t16l),
    new p(2, 3, U.t16HB, U.t16l),
    new p(3, 7, U.t16HB, U.t16l),
    new p(4, 15, U.t16HB, U.t16l),
    new p(6, 63, U.t16HB, U.t16l),
    new p(8, 255, U.t16HB, U.t16l),
    new p(10, 1023, U.t16HB, U.t16l),
    new p(13, 8191, U.t16HB, U.t16l),
    new p(4, 15, U.t24HB, U.t24l),
    new p(5, 31, U.t24HB, U.t24l),
    new p(6, 63, U.t24HB, U.t24l),
    new p(7, 127, U.t24HB, U.t24l),
    new p(8, 255, U.t24HB, U.t24l),
    new p(9, 511, U.t24HB, U.t24l),
    new p(11, 2047, U.t24HB, U.t24l),
    new p(13, 8191, U.t24HB, U.t24l),
    new p(0, 0, U.t32HB, U.t32l),
    new p(0, 0, U.t33HB, U.t33l),
  ]),
    (U.largetbl = [
      65540, 327685, 458759, 589832, 655369, 655370, 720906, 720907, 786443,
      786444, 786444, 851980, 851980, 851980, 917517, 655370, 262149, 393222,
      524295, 589832, 655369, 720906, 720906, 720907, 786443, 786443, 786444,
      851980, 917516, 851980, 917516, 655370, 458759, 524295, 589832, 655369,
      720905, 720906, 786442, 786443, 851979, 786443, 851979, 851980, 851980,
      917516, 917517, 720905, 589832, 589832, 655369, 720905, 720906, 786442,
      786442, 786443, 851979, 851979, 917515, 917516, 917516, 983052, 983052,
      786441, 655369, 655369, 720905, 720906, 786442, 786442, 851978, 851979,
      851979, 917515, 917516, 917516, 983052, 983052, 983053, 720905, 655370,
      655369, 720906, 720906, 786442, 851978, 851979, 917515, 851979, 917515,
      917516, 983052, 983052, 983052, 1048588, 786441, 720906, 720906, 720906,
      786442, 851978, 851979, 851979, 851979, 917515, 917516, 917516, 917516,
      983052, 983052, 1048589, 786441, 720907, 720906, 786442, 786442, 851979,
      851979, 851979, 917515, 917516, 983052, 983052, 983052, 983052, 1114125,
      1114125, 786442, 720907, 786443, 786443, 851979, 851979, 851979, 917515,
      917515, 983051, 983052, 983052, 983052, 1048588, 1048589, 1048589, 786442,
      786443, 786443, 786443, 851979, 851979, 917515, 917515, 983052, 983052,
      983052, 983052, 1048588, 983053, 1048589, 983053, 851978, 786444, 851979,
      786443, 851979, 917515, 917516, 917516, 917516, 983052, 1048588, 1048588,
      1048589, 1114125, 1114125, 1048589, 786442, 851980, 851980, 851979,
      851979, 917515, 917516, 983052, 1048588, 1048588, 1048588, 1048588,
      1048589, 1048589, 983053, 1048589, 851978, 851980, 917516, 917516, 917516,
      917516, 983052, 983052, 983052, 983052, 1114124, 1048589, 1048589,
      1048589, 1048589, 1179661, 851978, 983052, 917516, 917516, 917516, 983052,
      983052, 1048588, 1048588, 1048589, 1179661, 1114125, 1114125, 1114125,
      1245197, 1114125, 851978, 917517, 983052, 851980, 917516, 1048588,
      1048588, 983052, 1048589, 1048589, 1114125, 1179661, 1114125, 1245197,
      1114125, 1048589, 851978, 655369, 655369, 655369, 720905, 720905, 786441,
      786441, 786441, 851977, 851977, 851977, 851978, 851978, 851978, 851978,
      655366,
    ]),
    (U.table23 = [
      65538, 262147, 458759, 262148, 327684, 458759, 393222, 458759, 524296,
    ]),
    (U.table56 = [
      65539, 262148, 458758, 524296, 262148, 327684, 524294, 589831, 458757,
      524294, 589831, 655368, 524295, 524295, 589832, 655369,
    ]),
    (U.bitrate_table = [
      [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1],
      [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1],
      [0, 8, 16, 24, 32, 40, 48, 56, 64, -1, -1, -1, -1, -1, -1, -1],
    ]),
    (U.samplerate_table = [
      [22050, 24e3, 16e3, -1],
      [44100, 48e3, 32e3, -1],
      [11025, 12e3, 8e3, -1],
    ]),
    (U.scfsi_band = [0, 6, 11, 16, 21]),
    (w.Q_MAX = 257),
    (w.Q_MAX2 = 116),
    (w.LARGE_BITS = 1e5),
    (w.IXMAX_VAL = 8206);
  var W = {};
  (W.SFBMAX = 3 * P.SBMAX_s),
    (P.ENCDELAY = 576),
    (P.POSTDELAY = 1152),
    (P.MDCTDELAY = 48),
    (P.FFTOFFSET = 224 + P.MDCTDELAY),
    (P.DECDELAY = 528),
    (P.SBLIMIT = 32),
    (P.CBANDS = 64),
    (P.SBPSY_l = 21),
    (P.SBPSY_s = 12),
    (P.SBMAX_l = 22),
    (P.SBMAX_s = 13),
    (P.PSFB21 = 6),
    (P.PSFB12 = 6),
    (P.BLKSIZE = 1024),
    (P.HBLKSIZE = P.BLKSIZE / 2 + 1),
    (P.BLKSIZE_s = 256),
    (P.HBLKSIZE_s = P.BLKSIZE_s / 2 + 1),
    (P.NORM_TYPE = 0),
    (P.START_TYPE = 1),
    (P.SHORT_TYPE = 2),
    (P.STOP_TYPE = 3),
    (P.MPG_MD_LR_LR = 0),
    (P.MPG_MD_LR_I = 1),
    (P.MPG_MD_MS_LR = 2),
    (P.MPG_MD_MS_I = 3),
    (P.fircoef = [
      -0.1039435,
      -0.1892065,
      5 * -0.0432472,
      -0.155915,
      3898045e-23,
      0.0467745 * 5,
      0.50455,
      0.756825,
      0.187098 * 5,
    ]),
    (L.MFSIZE = 3456 + P.ENCDELAY - P.MDCTDELAY),
    (L.MAX_HEADER_BUF = 256),
    (L.MAX_BITS_PER_CHANNEL = 4095),
    (L.MAX_BITS_PER_GRANULE = 7680),
    (L.BPC = 320),
    (j.RIFF = G('RIFF')),
    (j.WAVE = G('WAVE')),
    (j.fmt_ = G('fmt ')),
    (j.data = G('data')),
    (j.readHeader = function (e) {
      var a = new j(),
        t = e.getUint32(0, !1);
      if (
        j.RIFF == t &&
        (e.getUint32(4, !0),
        j.WAVE == e.getUint32(8, !1) && j.fmt_ == e.getUint32(12, !1))
      ) {
        var s = e.getUint32(16, !0),
          n = 20;
        switch (s) {
          case 16:
          case 18:
            (a.channels = e.getUint16(n + 2, !0)),
              (a.sampleRate = e.getUint32(n + 4, !0));
            break;
          default:
            throw 'extended fmt chunk not implemented';
        }
        (n += s), (s = j.data);
        for (var r = 0; s != t; ) {
          if (((t = e.getUint32(n, !1)), (r = e.getUint32(n + 4, !0)), s == t))
            break;
          n += r + 8;
        }
        return (a.dataLen = r), (a.dataOffset = n + 8), a;
      }
    }),
    (W.SFBMAX = 3 * P.SBMAX_s),
    (lamejs.Mp3Encoder = function (e, a, t) {
      3 != arguments.length &&
        (console.error(
          'WARN: Mp3Encoder(channels, samplerate, kbps) not specified',
        ),
        (e = 1),
        (a = 44100),
        (t = 128));
      var s = new X(),
        n = new q(),
        r = new f(),
        _ = new u(),
        i = new h(),
        p = new w(),
        d = new k(),
        v = new m(),
        g = new l(),
        S = new F(),
        R = new b(),
        M = new c(),
        A = new Y(),
        B = new C();
      s.setModules(r, _, i, p, d, v, g, S, B),
        _.setModules(r, B, g, v),
        S.setModules(_, g),
        i.setModules(s),
        d.setModules(_, R, p, M),
        p.setModules(M, R, s.enc.psy),
        R.setModules(_),
        M.setModules(p),
        v.setModules(s, _, g),
        n.setModules(A, B),
        A.setModules(g, S, i);
      var T = s.lame_init();
      (T.num_channels = e),
        (T.in_samplerate = a),
        (T.brate = t),
        (T.mode = o.STEREO),
        (T.quality = 3),
        (T.bWriteVbrTag = !1),
        (T.disable_reservoir = !0),
        (T.write_id3tag_automatic = !1),
        s.lame_init_params(T);
      var E = 1152,
        y = 0 | (1.25 * E + 7200),
        x = new Int8Array(y);
      (this.encodeBuffer = function (a, t) {
        return (
          1 == e && (t = a),
          a.length > E &&
            ((E = a.length),
            (y = 0 | (1.25 * E + 7200)),
            (x = new Int8Array(y))),
          (a = s.lame_encode_buffer(T, a, t, a.length, x, 0, y)),
          new Int8Array(x.subarray(0, a))
        );
      }),
        (this.flush = function () {
          var e = s.lame_encode_flush(T, x, 0, y);
          return new Int8Array(x.subarray(0, e));
        });
    }),
    (lamejs.WavHeader = j);
}
lamejs();
